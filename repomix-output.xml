This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.log, tmp/, **/*.po, **/*.pot, submodules
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
.github/
  workflows/
    build_deploy.yml
    linkcheck.yml
    update_submodule.yml
    vale.yml
docs/
  _static/
    copy.svg
    custom.css
    patch_scrollToActive.js
    print.css
    search_shortcut.js
    searchtools.js
    switcher.json
  _templates/
    sections/
      header-article.html
      sidebar.html
    404.html
    layout.html
    page.html
    search-field.html
    search.html
  .well-known/
    .well-known/
      security.txt
  community/
    code_of_conduct.md
    contributing.md
    index.md
    license.md
    module_lifecycle_development_status.rst
    module_lifecycle_maintainer_role.rst
    release_management.md
    security_reporting.md
    support.md
  contributing/
    redirects.md
  developer_guide/
    api_usage/
      external_api_xmlrpc.md
      index.md
      rest_api.md
    customization/
      customizing_areas.md
      customizing_audit.md
      customizing_change_requests.md
      customizing_cycles.md
      customizing_entitlements.md
      customizing_fields.md
      customizing_indicators.md
      customizing_programs.md
      customizing_registry.md
      customizing_service_points.md
      implementing_pmt.md
      index.md
    integrations/
      dci.md
      esignet.md
      index.md
      keycloak_beneficiary_portal.md
      oidc.md
    architecture.md
    best_practices.md
    developer_mode.md
    i18n_l10n.md
    index.md
    module_development.md
    setup.md
    troubleshooting.md
  getting_started/
    index.md
    installation_docker.md
    installation_pypi.md
    poc_and_pilot.md
  howto/
    index.md
  overview/
    case_studies/
      index.md
    concepts/
      data_collection_validation.md
      data_protection.md
      digital_public_infrastructure.md
      extensibility.md
      farmer_registry.md
      index.md
      integrated_beneficiary_registry.md
      registrant_concepts.md
      registry_key_concepts.md
      social_registry.md
      sp_mis.md
      user_management.md
    features/
      index.md
      integrations_apis.md
      registry_data_management.md
    use_cases/
      farmer_registry.md
      index.md
    index.md
  reference/
    api/
      index.md
    modules/
      g2p_auth_id_oidc.md
      g2p_bank_rest_api.md
      g2p_bank.md
      g2p_connect_demo.md
      g2p_encryption_keymanager.md
      g2p_encryption_rest_api.md
      g2p_encryption.md
      g2p_entitlement_differential.md
      g2p_entitlement_in_kind.md
      g2p_entitlement_voucher.md
      g2p_openid_vci_programs.md
      g2p_openid_vci.md
      g2p_payment_cash.md
      g2p_payment_files.md
      g2p_payment_g2p_connect.md
      g2p_payment_interop_layer.md
      g2p_payment_phee.md
      g2p_payment_simple_mpesa.md
      g2p_program_approval.md
      g2p_program_assessment.md
      g2p_program_autoenrol.md
      g2p_program_cycleless.md
      g2p_program_documents.md
      g2p_program_registrant_info_rest_api.md
      g2p_program_registrant_info.md
      g2p_program_reimbursement.md
      g2p_programs_rest_api.md
      g2p_programs.md
      g2p_proxy_means_test.md
      g2p_registry_addl_info_rest_api.md
      g2p_registry_addl_info.md
      g2p_registry_base.md
      g2p_registry_encryption.md
      g2p_registry_group.md
      g2p_registry_individual.md
      g2p_registry_membership.md
      g2p_registry_rest_api_extension_demo.md
      g2p_registry_rest_api.md
      index.md
      spp_api_records.md
      spp_api.md
      spp_area_gis.md
      spp_area.md
      spp_audit_config.md
      spp_audit_log.md
      spp_audit_post.md
      spp_auto_update_entitlements.md
      spp_base_api.md
      spp_base_demo.md
      spp_base_gis_demo.md
      spp_base_gis_rest.md
      spp_base_gis.md
      spp_base_setting.md
      spp_base.md
      spp_basic_cash_entitlement_spent.md
      spp_change_request_add_children_demo.md
      spp_change_request_add_farmer.md
      spp_change_request.md
      spp_consent.md
      spp_custom_field_custom_filter.md
      spp_custom_field_recompute_daily.md
      spp_custom_field.md
      spp_custom_fields_ui.md
      spp_custom_filter_ui.md
      spp_custom_filter.md
      spp_data_export.md
      spp_dci_api_server.md
      spp_demo.md
      spp_dms.md
      spp_eligibility_sql.md
      spp_eligibility_tags.md
      spp_encryption.md
      spp_ent_trans.md
      spp_entitlement_basket.md
      spp_entitlement_cash.md
      spp_entitlement_in_kind.md
      spp_event_data_program_membership.md
      spp_event_data.md
      spp_event_demo.md
      spp_exclusion_filter.md
      spp_farmer_registry_base.md
      spp_farmer_registry_dashboard.md
      spp_farmer_registry_demo.md
      spp_idpass.md
      spp_idqueue.md
      spp_import_dci_api.md
      spp_import_match.md
      spp_irrigation.md
      spp_land_record.md
      spp_manual_entitlement.md
      spp_oauth.md
      spp_openid_vci_group.md
      spp_openid_vci_individual.md
      spp_openid_vci.md
      spp_pmt.md
      spp_pos.md
      spp_program_id.md
      spp_programs_compliance_criteria.md
      spp_programs_sp.md
      spp_programs.md
      spp_registrant_import.md
      spp_registrant_tag.md
      spp_registry_data_source.md
      spp_registry_group_hierarchy.md
      spp_scan_id_document.md
      spp_service_point_device.md
      spp_service_points.md
      spp_starter.md
      spp_user_roles.md
    technical/
      audit_logs.md
      backup.md
      cycle_manager.rst
      deduplication_manager.md
      eligibility_manager.rst
      entitlement_manager.rst
      index.md
      monitoring.md
      notification_manager.rst
      performance.md
      program_manager.rst
      security.md
    glossary.rst
    index.md
  tutorial/
    user_guides/
      create_program_cycle_prepare_entitlements.md
    managing_social_protection_programs.md
    programs_and_cycles.md
  user_guide/
    administration/
      hardware_integration.md
      import_areas.md
      index.md
      managing_custom_fields.md
      service_points.md
      user_access.md
      using_audit_logs.md
    program_management/
      allocate_funds.md
      configure_entitlements.md
      create_cycle.md
      create_program.md
      enroll_beneficiaries.md
      implementing_pmt.md
      index.md
      programs_overview.md
      using_geotargeting.md
      using_indicators.md
      using_pmt.md
      using_vouchers.md
    registry_management/
      identity_management.md
      import_export_data.md
      index.md
      register_individual.md
      setting_up_farmer_registry.md
      using_change_requests.md
      using_event_data.md
    consent_management.md
    grievance_management.md
    index.md
    pos_usage.md
    reporting_dashboards.md
  addMetaData.py
  conf.py
  index.md
  robots.txt
  spelling_wordlist.txt
review_work/
  doc_contributor_guidelines.md
  doc_migration_guide.md
  doc_structure_proposal.md
  refactor_pages.md
share/
  man/
    man1/
      qr.1
      ttx.1
styles/
  Vocab/
    OpenSPP/
      accept.txt
.gitignore
.gitmodules
.vale.ini
CLAUDE.md
CODE_OF_CONDUCT.md
CONTRIBUTING.md
COPYRIGHT
handle_remaining_files.py
LICENSE
logs_start
Makefile
netlify.toml
README.md
refactor_docs.py
refactor_log.txt
requirements_frozen.txt
requirements_odoo.txt
requirements-initial.txt
requirements.txt
update_links.py
update_navigation.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(tree:*)",
      "Bash(make:*)",
      "Bash(bin/pip uninstall Pillow -y)",
      "Bash(bin/pip install:*)"
    ],
    "deny": []
  }
}
</file>

<file path=".github/workflows/linkcheck.yml">
name: Linkcheck

on:
  schedule:
    # First day of month at 05:46 in every 2nd month
    - cron: '46 5 * * 1'

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          sudo apt-get install libsasl2-dev libldap2-dev libssl-dev &&
          pip install -q -r requirements_frozen.txt

      - name: Run linkcheck
        run: make linkcheck
</file>

<file path=".github/workflows/update_submodule.yml">
name: Get latest version of submodules and push back to docs_v3 branch

on:
  workflow_dispatch:

jobs:
  update_submodules:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v3
        with: 
          ref: master
          submodules: true

      - name: Submodule update
        run: |
          git status
          git submodule update --init --recursive
          git submodule update --remote --recursive

      - name: Commit updates
        run: |
          git status
          git add submodules/openg2p-program submodules/openg2p-registry
          git status
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "Update submodules tip" || echo "No changes to commit"
          git push
</file>

<file path=".github/workflows/vale.yml">
name: Run Vale

on:
  push:
    branches:
      - "main"

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          sudo apt-get install libsasl2-dev libldap2-dev libssl-dev &&
          pip install -q -r requirements_frozen.txt && pip install vale

      - name: Run Vale
        run: make vale
</file>

<file path="docs/_static/copy.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">
  <g fill-rule="evenodd">
    <path d="M14.9997,3.0003 L14.9997,7.0003 L17.0007,7.0003 L17.0007,5.0003 L24.9997,5.0003 L24.9997,11.0003 L30.9997,11.0003 L30.9997,25.0003 L24.9997,25.0003 L24.9997,26.9993 L32.9997,26.9993 L32.9997,9.5853 L26.4147,3.0003 L14.9997,3.0003 Z M27.0007,6.4143 L29.5857,8.9993 L27.0007,8.9993 L27.0007,6.4143 Z"/>
    <path d="M4.9998,8.9997 L4.9998,32.9997 L22.9998,32.9997 L22.9998,15.5857 L16.4148,8.9997 L4.9998,8.9997 Z M6.9998,11.0007 L14.9998,11.0007 L14.9998,16.9997 L20.9998,16.9997 L20.9998,31.0007 L6.9998,31.0007 L6.9998,11.0007 Z M17.0008,12.4147 L19.5858,14.9997 L17.0008,14.9997 L17.0008,12.4147 Z"/>
  </g>
</svg>
</file>

<file path="docs/_static/custom.css">
:root {
  /* Add Font Awesome 5 icon and color for todo */
  --pst-icon-clipboard-list: '\f46d';
  --pst-icon-admonition-todo: var(--pst-icon-clipboard-list);
  --pst-color-admonition-todo: 161, 46, 233;
  --target-color: #b9ee9e;
  --codeblock-color: #aad993;
}

.visuallyhidden {
  display: none;
}

pre {
  border-radius: 0;
  background-color: white;
  box-shadow: none;
}

a,
a:visited,
main.bd-content #main-content a,
main.bd-content #main-content a:visited {
  color: #2980b9;
}

a:hover,
main.bd-content #main-content a:hover {
  color: #1a567e;
  text-decoration: none;
}

ul {
  list-style-type: square;
}

ul li>p {
  margin-bottom: 0.3rem;
}

ol li>p {
  margin-bottom: 0.3rem;
}

img {
  margin: 1rem 0;
}

figure img,
img.figure,
.figure img {
  box-shadow: 0 6px 24px 0 rgba(153, 153, 153, 0.3);
}

.sidebar img.logo {
  box-shadow: none;
  width: 200px;
  margin-bottom: 1rem;
}

img.inline {
  margin: 0;
  height: 1em;
}

span.linenos {
  padding-right: 1em;
}

dt:target,
span.highlighted,
ul.search li span.highlighted {
  background-color: var(--target-color);
}

.bd-sidebar .nav ul {
  padding: 0 0 0 1rem;
}

.bd-sidebar .nav .toctree-checkbox~label i {
  transform: rotate(90deg);
}

.bd-sidebar .nav .toctree-checkbox:checked~label i {
  transform: rotate(0deg);
}

.toctree-wrapper .caption {
  font-weight: bold;
  font-size: 1.2em;
  margin-top: 3rem;
}

.toctree-wrapper ul {
  list-style: none;
}

section:not(#glossary) h1~dl {
  display: grid;
  grid-template-columns: max-content auto;
}

section:not(#glossary) h1~dl dd {
  margin-bottom: unset !important;
}

div.section {
  margin-bottom: 5rem;
}

div.section div.section {
  margin-bottom: 2rem;
}

div.section div.section div.section {
  margin-bottom: 2rem;
}

/* admonitions */
.admonition {
  border-radius: 0;
  border: none;
  border-left: .2rem solid;
  border-left-color: rgba(var(--pst-color-admonition-default), 1);
}

.admonition .admonition-title {
  margin-bottom: 1.5rem !important;
}

/* admonition todo */
.admonition.admonition-todo,
div.admonition.admonition-todo {
  border-color: rgba(var(--pst-color-admonition-todo), 1);
}

.admonition.admonition-todo>.admonition-title,
div.admonition.admonition-todo>.admonition-title {
  background-color: rgba(var(--pst-color-admonition-todo), .1);
}

.admonition.admonition-todo>.admonition-title::before,
div.admonition.admonition-todo>.admonition-title::before {
  color: rgba(var(--pst-color-admonition-todo), 1);
  content: var(--pst-icon-admonition-todo);
}

.admonition-github-only.admonition {
  display: none;
}

/* admonition margin */
.admonition.margin ul,
.admonition.margin ol {
  padding-left: 1rem;
}

.topic {
  padding: 1.5em 1em .5em 1em;
}

.topic-title {
  font-weight: bold;
}


/* Bootstrap */
.btn-primary {
  color: #fff;
  background-color: #2980b9;
  border-color: #2980b9;
}

.btn-primary {
  background-color: #1f86ca;
  border-color: #2980b9;
}

/* Search */

/* Show search form. It is hidden by default. */
#search-documentation,
#search-documentation~form,
#search-documentation~p {
  display: block;
}

#search-form:focus-within #shortcut-page,
.bd-search:focus-within #shortcut {
  display: none;
}

#shortcut-page.input-group-text {
  padding-top: 0;
  padding-bottom: 0;
}

input#q {
  border-radius: .25rem 0 0 .25rem;
}

.form-control:focus {
  box-shadow: none;
  border-width: 2px;
}

ul.search {
  margin-left: 0;
}

p.search-summary {
  margin: 1em 0 2rem 0;
}

#search-results ul {
  list-style-type: none;
  padding-left: 0;
}

#search-results ul li,
ul.search li {
  margin-bottom: 2rem;
  padding: 0;
  background-image: none;
  border-bottom: none;
}

#search-results ul li h3 {
  margin: 0.4rem 0 .5rem;
  font-size: 1.5rem;
}

#search-results ul li .breadcrumbs {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

#search-results ul li .breadcrumbs a {
  font-weight: normal;
}

#search-results ul li .breadcrumbs .lastbreadcrumb {
  white-space: nowrap;
  display: inline-block;
  max-width: 12rem;
  overflow: hidden;
  /* "overflow"-Wert darf nicht "visible" sein */

  text-overflow: ellipsis;
}

ul.search li p.context {
  margin-left: 0;
}

/* Search form sidebar */

.bd-search {
  font-size: .8rem;
}

.bd-search:focus-within #search-input {
  border-radius: .25rem;
}

#shortcut.input-group-text {
  padding-top: 0;
  padding-bottom: 0;
}

.bd-search input,
.bd-search .input-group-text {
  font-size: .8rem;
  padding-left: .5em;
}

input#search-input {
  padding-left: 2.1875rem;
  border-radius: .25rem 0 0 .25rem;
}

.search-icon {
  position: absolute;
  color: #a4a6a7;
  left: .625rem;
  z-index: 100;
  align-self: center;
}

.input-group-text kbd {
  padding: 0rem 0.4rem;
  font-size: 135%;
}

.pathseparator {
  padding: 0 0.7rem;
}

/* header-article */
div.header-article__label {
  display: flex;
  align-items: center;
  margin: 0 auto 0 1em;
  font-size: 80%;
  overflow: hidden;
  white-space: nowrap;
}

/* submenu */
.bd-toc {
  box-shadow: 0 .2rem .5rem rgba(0, 0, 0, .05), 0 0 .0625rem rgba(0, 0, 0, .1);
}

/* extra sidebar */
div.sidebar:not(.margin) {
  width: 40%;
  float: right;
  clear: right;
  margin: .3rem 0 .3rem 0.5em;
  padding: 2rem 0 1.5rem 1rem !important;
  background-color: rgba(var(--pst-color-admonition-note), .1);
  border: none;
  border-left: 8px rgba(var(--pst-color-admonition-default), 1) solid;
  border-radius: .2rem;
  box-shadow: 0 .2rem .5rem rgba(0, 0, 0, .05), 0 0 .0625rem rgba(0, 0, 0, .1);
}

div.sidebar:not(.margin) .figure {
  margin-top: 0;
  padding-top: 0;
  margin-left: 0;
  padding-left: 0;
}

div.sidebar:not(.margin) img.logo {
  margin-top: 0;
  margin-bottom: .3rem;
}

div.sidebar:not(.margin) p {
  margin-bottom: 0;
}

div.sidebar:not(.margin) p.sidebar-title {
  display: none;
}

div.sidebar:not(.margin) div.topic {
  padding: .5em 0;
  background-color: transparent;
  border: none;
}

div.sidebar:not(.margin) pre {
  margin: .5em 0 1.5em 0;
}

div.sidebar:not(.margin) div[class*="highlight-"] {
  margin-right: .5em;
}

div.sidebar:not(.margin) .admonition {
  margin-right: .5em;
  background-color: #ffffff;
}

@media (min-width:768px) {
  div.sidebar:not(.margin) {
    width: 50%;
    margin-left: 1.5em;
    margin-right: -28%;
  }
}


main.bd-content #main-content dl.simple dt {
  margin-top: .8em;
}

main.bd-content #main-content dl.simple dt:nth-of-type(1) {
  margin-top: 0;
}

main.bd-content #main-content dl.simple dd {
  margin-top: .8em;
}

main.bd-content #main-content dl.simple dt+dd {
  margin-top: 0;
}

.prev-next-bottom {
  margin: 20px 0 30px 0;
}

.prev-next-bottom a.left-prev,
.prev-next-bottom a.right-next {
  padding: 5px 10px;
  border: 1px solid rgba(0, 0, 0, .2);
  max-width: 45%;
  overflow-x: hidden;
  color: rgba(0, 0, 0, .65);
  border-radius: 10px;
}

/* Local navigation */
li.nav-item.toc-entry {
  line-height: 1.25em;
  margin-bottom: 0.25em;
}

span.guilabel,
span.menuselection {
  border: none;
  background: #e7f2fa;
  border-radius: 4px;
  padding: 4px 5px;
  font-size: 90%;
  font-weight: bold;
  font-style: italic;
  white-space: nowrap;
}


/*
 * extensions
 */

/* definitions */
dl.py.function {
  margin-bottom: 5rem;
}

dl.py.function>dt {
  background-color: var(--codeblock-color);
  padding: 4px 5px;
}

dl.py.function>dt:target {
  background-color: var(--target-color);
}

dl.field-list>dt {
  padding-left: 0;
}

/* code blocks */
div.viewcode-block:target {
  padding: 10px 10px;
  background-color: var(--codeblock-color);
  border-top: 1px solid var(--codeblock-color);
  border-bottom: 1px solid var(--codeblock-color);
}

/* Fix paragraphs in list items. */
#main-content ol > li > p:nth-child(n+2),
#main-content ul > li > p:nth-child(n+2) {
  margin-top: 1em;
}

@media (min-width: 768px) {
  div.navbar-brand-box {
      padding-top:0
  }
}

dl.py > dd, dl.js > dd, dl.o-definition-list > dd {
  margin-top: -0.075rem;
  margin-left: 0;
  padding-left: 1rem;
  padding-top: 0.5rem;
  border-left: 3px solid #F2F2F2;
}

.o_code, .sig [class^="sig-"] {
  display: inline-block;
  overflow-wrap: anywhere;
  background: #F2F2F2;
  font-size: 0.875rem;
  font-family: 'Consolas', 'Menlo', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace;
  font-weight: inherit;
  /* color: inherit; */
}
</file>

<file path="docs/_static/patch_scrollToActive.js">
/**
 * Patch of scrollToActive of sphinxbook theme
 * Scroll to active navigation item
 */

/**
 * A helper function to load scripts when the DOM is loaded.
 * This waits for everything to be on the page first before running, since
 * some functionality doesn't behave properly until everything is ready.
 */
 var sbRunWhenDOMLoaded = (cb) => {
  if (document.readyState != "loading") {
    cb();
  } else if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", cb);
  } else {
    document.attachEvent("onreadystatechange", function () {
      if (document.readyState == "complete") cb();
    });
  }
};

/**
 * Sidebar scroll on load.
 *
 * Detect the active page in the sidebar, and scroll so that it is centered on
 * the screen.
 */

var scrollToActive = () => {
  let navbar_scrollable = $("#site-navigation").children()[0];
  let active_navigation_item = $("#site-navigation .active").last();
  if (active_navigation_item) {
    if (active_navigation_item.offset().top > $(window).height() * 0.5) {
      navbar_scrollable.scrollTop = active_navigation_item.offset().top - $(window).height() * 0.2;
    }
  }
};


sbRunWhenDOMLoaded(scrollToActive);
</file>

<file path="docs/_static/print.css">
.tooltip {
  display: none;
}
</file>

<file path="docs/_static/search_shortcut.js">
/**
 * Add shortcut `ctrl+k` to focus on search field
 */

 $(document).ready(() => {
    if (window.location.pathname === '/search.html') {
        $('form.bd-search .input-group').hide(); // Hide Sidebar Search field

        $(document).keydown(function(event) {
            if ((event.ctrlKey || event.metaKey) && event.key == "k") {
                event.preventDefault();
                $('#q').focus();
            }
        });
    } else {
        $(document).keydown(function(event) {
            if ((event.ctrlKey || event.metaKey) && event.key == "k") {
                event.preventDefault();
                $('#search-input').focus();
            }
        });
    }
    
    // if OS isn't Mac change visual indication of search field
    if (navigator.platform.indexOf('Mac') === -1) {
        $('#search-shortcut').html("^");
        $('#search-page-shortcut').html("^");
    }
    
});

function onReset() {
    $('#search-form').trigger('reset');
    $('#search-form').trigger('submit');
}
</file>

<file path="docs/_static/searchtools.js">
/*
 * searchtools.js
 * ~~~~~~~~~~~~~~~~
 *
 * Sphinx JavaScript utilities for the full-text search.
 *
 * :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.
 * :license: BSD, see LICENSE for details.
 *
 */

var title_documentation = 'OpenSPP Documentation';

if (!Scorer) {
  /**
   * Simple result scoring code.
   */
  var Scorer = {
    // Implement the following function to further tweak the score for each result
    // The function takes a result array [filename, title, anchor, descr, score]
    // and returns the new score.
    /*
    score: function(result) {
      return result[4];
    },
    */

    // query matches the full name of an object
    objNameMatch: 11,
    // or matches in the last dotted part of the object name
    objPartialMatch: 6,
    // Additive scores depending on the priority of the object
    objPrio: {0:  15,   // used to be importantResults
              1:  5,   // used to be objectResults
              2: -5},  // used to be unimportantResults
    //  Used when the priority is not in the mapping.
    objPrioDefault: 0,

    // query found in title
    title: 15,
    partialTitle: 7,
    // query found in terms
    term: 5,
    partialTerm: 2
  };
}

if (!splitQuery) {
  function splitQuery(query) {
    return query.split(/\s+/);
  }
}

/**
 * Search Module
 */
var Search = {

  _index : null,
  _queued_query : null,
  _pulse_status : -1,

  htmlToText : function(htmlString) {
      var virtualDocument = document.implementation.createHTMLDocument('virtual');
      var htmlElement = $(htmlString, virtualDocument);
      htmlElement.find('.headerlink').remove();
      docContent = htmlElement.find('[role=main]')[0];
      if(docContent === undefined) {
          console.warn("Content block not found. Sphinx search tries to obtain it " +
                       "via '[role=main]'. Could you check your theme or template.");
          return "";
      }
      return docContent.textContent || docContent.innerText;
  },

  init : function() {
      var params = $.getQueryParameters();
      let doc_section = params.doc_section ? params.doc_section[0] : 'all';
      $('input[id="doc_section_' + doc_section + '"]').prop("checked", true)
      if (params.q) {
          var query = params.q[0];
          $('input[name="q"]')[0].value = query;
          $('input[name="q"]')[1].value = query;
          this.performSearch(query, doc_section);
      }
  },

  loadIndex : function(url) {
    $.ajax({type: "GET", url: url, data: null,
            dataType: "script", cache: true,
            complete: function(jqxhr, textstatus) {
              if (textstatus != "success") {
                document.getElementById("searchindexloader").src = url;
              }
            }});
  },

  setIndex : function(index) {
    var q;
    this._index = index;
    if ((q = this._queued_query) !== null) {
      this._queued_query = null;
      Search.query(q);
    }
  },

  hasIndex : function() {
      return this._index !== null;
  },

  deferQuery : function(query) {
      this._queued_query = query;
  },

  stopPulse : function() {
      this._pulse_status = 0;
  },

  startPulse : function() {
    if (this._pulse_status >= 0)
        return;
    function pulse() {
      var i;
      Search._pulse_status = (Search._pulse_status + 1) % 4;
      var dotString = '';
      for (i = 0; i < Search._pulse_status; i++)
        dotString += '.';
      Search.dots.text(dotString);
      if (Search._pulse_status > -1)
        window.setTimeout(pulse, 500);
    }
    pulse();
  },

  /**
   * perform a search for something (or wait until index is loaded)
   */
  performSearch : function(query, doc_section) {
    // create the required interface elements
    this.out = $('#search-results');
    this.title = $('').appendTo(this.out);
    this.dots = $('<span></span>').appendTo(this.title);
    this.status = $('<p class="search-summary">&nbsp;</p>').appendTo(this.out);
    this.output = $('<ul class="search"/>').appendTo(this.out);

    $('#search-progress').text(_('Preparing search...'));
    this.startPulse();

    // index already loaded, the browser was quick!
    if (this.hasIndex()) {
      this.query(query, doc_section);
    } else {
      this.deferQuery(query);
    }
  },

  /**
   * execute search (requires search index to be loaded)
   */
  query : function(query, doc_section) {
    var i;

    // stem the searchterms and add them to the correct list
    var stemmer = new Stemmer();
    var searchterms = [];
    var excluded = [];
    var hlterms = [];
    var tmp = splitQuery(query);
    var objectterms = [];
    for (i = 0; i < tmp.length; i++) {
      if (tmp[i] !== "") {
          objectterms.push(tmp[i].toLowerCase());
      }

      if ($u.indexOf(stopwords, tmp[i].toLowerCase()) != -1 || tmp[i] === "") {
        // skip this "word"
        continue;
      }
      // stem the word
      var word = stemmer.stemWord(tmp[i].toLowerCase());
      // prevent stemmer from cutting word smaller than two chars
      if(word.length < 3 && tmp[i].length >= 3) {
        word = tmp[i];
      }
      var toAppend;
      // select the correct list
      if (word[0] == '-') {
        toAppend = excluded;
        word = word.substr(1);
      }
      else {
        toAppend = searchterms;
        hlterms.push(tmp[i].toLowerCase());
      }
      // only add if not already in the list
      if (!$u.contains(toAppend, word))
        toAppend.push(word);
    }
    var highlightstring = '?highlight=' + $.urlencode(hlterms.join(" "));

    // prepare search
    var terms = this._index.terms;
    var titleterms = this._index.titleterms;

    // array of [filename, title, anchor, descr, score]
    var results = [];
    $('#search-progress').empty();

    // lookup as object
    for (i = 0; i < objectterms.length; i++) {
      var others = [].concat(objectterms.slice(0, i),
                             objectterms.slice(i+1, objectterms.length));
      results = results.concat(this.performObjectSearch(objectterms[i], others));
    }

    // lookup as search terms in fulltext
    results = results.concat(this.performTermsSearch(searchterms, excluded, terms, titleterms));

    // let the scorer override scores with a custom scoring function
    if (Scorer.score) {
      for (i = 0; i < results.length; i++)
        results[i][4] = Scorer.score(results[i]);
    }

    // Filter results by doc_section
    if (doc_section && doc_section !== 'all') {
      results = results.filter(result => {
        let condition = result[0].split('/')[0] === doc_section;
        return condition
      })
    }

    // Enrich item with parent doc_section title
    for (i = 0; i < results.length; i++) 
      results[i][6] = results[i][6] || title_documentation;

    // now sort the results by score (in opposite order of appearance, since the
    // display function below uses pop() to retrieve items) and then
    // alphabetically
    results.sort(function(a, b) {
      var left = a[4];
      var right = b[4];
      if (left > right) {
        return 1;
      } else if (left < right) {
        return -1;
      } else {
        // same score: sort alphabetically
        left = a[1].toLowerCase();
        right = b[1].toLowerCase();
        return (left > right) ? -1 : ((left < right) ? 1 : 0);
      }
    });

    function _getBreadcrumbs(item, linkUrl) {
      let parentTitles = item[6];
      let opensppApiTitles = [
        "An OpenSPP API",
        "List of all API methods with descriptions"
      ];
      // ugly hack for documentation integrated via git submodule
      parentTitles = Array.isArray(parentTitles) ? parentTitles : opensppApiTitles;      
      let path = item[0].split('/')
        .slice(0, -1);
      path = path.map((el, index) => {
        return {
          "path": path.slice(0, index+1).join('/'),
          "title": parentTitles[index]
        }
      })
      let markup = path
        .map((el, idx) => {
            return `<a href="/${el.path}">${el.title}</a>` 
          })
      markup.push(`<span class="lastbreadcrumb">${item[1]}</span>`)
      return markup.join('<span class="pathseparator">&gt;</span>');
    }

    // Print the results.
    var resultCount = results.length;
    function displayNextItem() {
      // results left, load the summary and display it
      if (results.length) {
        var item = results.pop();
        var listItem = $('<li></li>');
        var requestUrl = "";
        var linkUrl = "";
        if (DOCUMENTATION_OPTIONS.BUILDER === 'dirhtml') {
          // dirhtml builder
          var dirname = item[0] + '/';
          if (dirname.match(/\/index\/$/)) {
            dirname = dirname.substring(0, dirname.length-6);
          } else if (dirname == 'index/') {
            dirname = '';
          }
          requestUrl = DOCUMENTATION_OPTIONS.URL_ROOT + dirname;
          linkUrl = requestUrl;

        } else {
          // normal html builders
          requestUrl = DOCUMENTATION_OPTIONS.URL_ROOT + item[0] + DOCUMENTATION_OPTIONS.FILE_SUFFIX;
          linkUrl = item[0] + DOCUMENTATION_OPTIONS.LINK_SUFFIX;
        }
        let breadcrumbs = _getBreadcrumbs(item, linkUrl);
        breadcrumbs = $("<div class='breadcrumbs'>" + breadcrumbs + "</div>");
        listItem.append(breadcrumbs);
        let headline = $('<h3/>');
        headline.append($('<a/>').attr('href',
          linkUrl +
          highlightstring + item[2]).html(item[1]));
        
        listItem.append(headline);

        if (item[3]) {
          listItem.append($('<span> (' + item[3] + ')</span>'));
          Search.output.append(listItem);
          setTimeout(function() {
            displayNextItem();
          }, 5);
        } else if (DOCUMENTATION_OPTIONS.HAS_SOURCE) {
          $.ajax({url: requestUrl,
                  dataType: "text",
                  complete: function(jqxhr, textstatus) {
                    var data = jqxhr.responseText;
                    if (data !== '' && data !== undefined) {
                      listItem.append(Search.makeSearchSummary(data, searchterms, hlterms));
                    }
                    Search.output.append(listItem);
                    setTimeout(function() {
                      displayNextItem();
                    }, 5);
                  }});
        } else {
          // no source available, just display title
          Search.output.append(listItem);
          setTimeout(function() {
            displayNextItem();
          }, 5);
        }
      }
      // search finished, update title and status message
      else {
        Search.stopPulse();
        Search.title.text(_('Search Results'));
        if (query === '') {
          Search.status.text(_('No query, no results.'));
        }
        else if (!resultCount)
          Search.status.text(_('Your search did not match any documents. Please make sure that all words are spelled correctly. Searching for multiple words only shows matches that contain all words.'));
        else
            Search.status.text(_('Found %s page(s) matching the search query.').replace('%s', resultCount));
        Search.status.fadeIn(500);
      }
    }
    displayNextItem();
  },

  /**
   * search for object names
   */
  performObjectSearch : function(object, otherterms) {
    var filenames = this._index.filenames;
    var docnames = this._index.docnames;
    var objects = this._index.objects;
    var objnames = this._index.objnames;
    var titles = this._index.titles;

    var i;
    var results = [];

    for (var prefix in objects) {
      for (var iMatch = 0; iMatch != objects[prefix].length; ++iMatch) {
        var match = objects[prefix][iMatch];
        var name = match[4];
        var fullname = (prefix ? prefix + '.' : '') + name;
        var fullnameLower = fullname.toLowerCase()
        if (fullnameLower.indexOf(object) > -1) {
          var score = 0;
          var parts = fullnameLower.split('.');
          // check for different match types: exact matches of full name or
          // "last name" (i.e. last dotted part)
          if (fullnameLower == object || parts[parts.length - 1] == object) {
            score += Scorer.objNameMatch;
          // matches in last name
          } else if (parts[parts.length - 1].indexOf(object) > -1) {
            score += Scorer.objPartialMatch;
          }
          var objname = objnames[match[1]][2];
          var title = titles[match[0]];
          // If more than one term searched for, we require other words to be
          // found in the name/title/description
          if (otherterms.length > 0) {
            var haystack = (prefix + ' ' + name + ' ' +
                            objname + ' ' + title).toLowerCase();
            var allfound = true;
            for (i = 0; i < otherterms.length; i++) {
              if (haystack.indexOf(otherterms[i]) == -1) {
                allfound = false;
                break;
              }
            }
            if (!allfound) {
              continue;
            }
          }
          var descr = objname + _(', in ') + title;

          var anchor = match[3];
          if (anchor === '')
            anchor = fullname;
          else if (anchor == '-')
            anchor = objnames[match[1]][1] + '-' + fullname;
          // add custom score for some objects according to scorer
          if (Scorer.objPrio.hasOwnProperty(match[2])) {
            score += Scorer.objPrio[match[2]];
          } else {
            score += Scorer.objPrioDefault;
          }
          results.push([docnames[match[0]], fullname, '#'+anchor, descr, score, filenames[match[0]]]);
        }
      }
    }

    return results;
  },

  /**
   * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
   */
  escapeRegExp : function(string) {
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
  },

  /**
   * search for full-text terms in the index
   */
  performTermsSearch : function(searchterms, excluded, terms, titleterms) {
    var docnames = this._index.docnames;
    var filenames = this._index.filenames;
    var titles = this._index.titles;

    var i, j, file;
    var fileMap = {};
    var scoreMap = {};
    var results = [];

    // perform the search on the required terms
    for (i = 0; i < searchterms.length; i++) {
      var word = searchterms[i];
      var files = [];
      var _o = [
        {files: terms[word], score: Scorer.term},
        {files: titleterms[word], score: Scorer.title}
      ];
      // add support for partial matches
      if (word.length > 2) {
        var word_regex = this.escapeRegExp(word);
        for (var w in terms) {
          if (w.match(word_regex) && !terms[word]) {
            _o.push({files: terms[w], score: Scorer.partialTerm})
          }
        }
        for (var w in titleterms) {
          if (w.match(word_regex) && !titleterms[word]) {
              _o.push({files: titleterms[w], score: Scorer.partialTitle})
          }
        }
      }

      // no match but word was a required one
      if ($u.every(_o, function(o){return o.files === undefined;})) {
        break;
      }
      // found search word in contents
      $u.each(_o, function(o) {
        var _files = o.files;
        if (_files === undefined)
          return

        if (_files.length === undefined)
          _files = [_files];
        files = files.concat(_files);

        // set score for the word in each file to Scorer.term
        for (j = 0; j < _files.length; j++) {
          file = _files[j];
          if (!(file in scoreMap))
            scoreMap[file] = {};
          scoreMap[file][word] = o.score;
        }
      });

      // create the mapping
      for (j = 0; j < files.length; j++) {
        file = files[j];
        if (file in fileMap && fileMap[file].indexOf(word) === -1)
          fileMap[file].push(word);
        else
          fileMap[file] = [word];
      }
    }

    // now check if the files don't contain excluded terms
    for (file in fileMap) {
      var valid = true;

      // check if all requirements are matched
      var filteredTermCount = // as search terms with length < 3 are discarded: ignore
        searchterms.filter(function(term){return term.length > 2}).length
      if (
        fileMap[file].length != searchterms.length &&
        fileMap[file].length != filteredTermCount
      ) continue;

      // ensure that none of the excluded terms is in the search result
      for (i = 0; i < excluded.length; i++) {
        if (terms[excluded[i]] == file ||
            titleterms[excluded[i]] == file ||
            $u.contains(terms[excluded[i]] || [], file) ||
            $u.contains(titleterms[excluded[i]] || [], file)) {
          valid = false;
          break;
        }
      }
      // if we have still a valid result we can add it to the result list
      if (valid) {
        /**
         * file: index
         * docnames: array of paths
         * titles: array of titles
         */

        // select one (max) score for the file.
        // for better ranking, we should calculate ranking by using words statistics like basic tf-idf...
        var score = $u.max($u.map(fileMap[file], function(w){return scoreMap[file][w]}));

        /**
         * Return array with titles of ancestors of file.
         * @param {number} idx - The index of the result item in global list of files
         * @returns array
         */
        function getParentTitles(idx) {
          let path = docnames[idx]

          let foo = path.split('/').slice(0, -1);
          foo = foo.map((el, index) => {
            return `${foo.slice(0, index+1).join('/')}/index`
          })
      
          let parentTitles = foo.map(el => {
            let parentId = docnames.indexOf(el);
            let title = parentId === -1 ? title_documentation : titles[parentId];
            return title
          })
          return parentTitles
        }

        results.push([docnames[file], titles[file], '', null, score, filenames[file], getParentTitles(file)]);
      }
    }
    return results;
  },

  /**
   * helper function to return a node containing the
   * search summary for a given text. keywords is a list
   * of stemmed words, hlwords is the list of normal, unstemmed
   * words. the first one is used to find the occurrence, the
   * latter for highlighting it.
   */
  makeSearchSummary : function(htmlText, keywords, hlwords) {
    var text = Search.htmlToText(htmlText);
    var textLower = text.toLowerCase();
    var start = 0;
    $.each(keywords, function() {
      var i = textLower.indexOf(this.toLowerCase());
      if (i > -1)
        start = i;
    });
    start = Math.max(start - 120, 0);
    var excerpt = ((start > 0) ? '...' : '') +
      $.trim(text.substr(start, 240)) +
      ((start + 240 - text.length) ? '...' : '');
    var rv = $('<p class="context"></p>').text(excerpt);
    $.each(hlwords, function() {
      rv = rv.highlightText(this, 'highlighted');
    });
    return rv;
  }
};

$(document).ready(function() {
  Search.init();
  $('#q').focus();
  $('input[name="doc_section"]').change(function() {
    this.form.submit();
  });
  
  function clearSearchField() {
    $('#q').val('');
    this.form.submit();
  }
  $( "button.clear_search" ).on( "click", clearSearchField );
});
</file>

<file path="docs/_static/switcher.json">
[
    {
        "name": "1.1 (current)",
        "version": "1.1",
        "url": "https://docs.openspp.org/"
    }
]
</file>

<file path="docs/_templates/sections/header-article.html">
{# To trigger whether the TOC and its button show up #}
{% set page_toc = generate_toc_html() %}
{% from "../macros/buttons.html" import render_funcs, render_label_input_button with context %}

<div class="col py-1 d-flex header-article-main">
    <div class="header-article__left">
        {% if theme_single_page != True %}
        {{ render_label_input_button(for_input="__navigation", tooltip="Toggle navigation", icon="fas fa-bars", tooltip_placement="right") }}
        {% endif %}
    </div>
    <div class="header-article__label">
        <span>{{ title|striptags|e }}{%- for parent in parents[:1] %} – {{ parent.title }}{%- endfor %}</span>
    </div>
    <div class="header-article__right">
        {%- for button in header_buttons -%}
        {{ render_funcs[button.pop("type")](**button) }}
        {%- endfor -%}

        {% if page_toc -%}
        {{ render_label_input_button("__page-toc", icon="fas fa-list", label="page-toc") }}
        {%- endif %}
    </div>
</div>

<!-- Table of contents -->
<div class="col-md-3 bd-toc show noprint">
    {%- if page_toc | length >= 1 %}
    <div class="tocsection onthispage pt-5 pb-3">
        <i class="fas fa-list"></i> {{ translate(theme_toc_title) }}
    </div>
    <nav id="bd-toc-nav" aria-label="Page">
        {{ page_toc }}
    </nav>
    {%- endif %}
</div>
</file>

<file path="docs/_templates/sections/sidebar.html">
{%- for sidebartemplate in sidebars %}
{%- include sidebartemplate %}
{%- endfor %}
</file>

<file path="docs/_templates/404.html">
{% extends "!page.html" %}

{%- block htmltitle %}
<title>{{ title|striptags|e }}{%- for parent in parents %} – {{ parent.title }}{%- endfor %}{{ titlesuffix }}</title>
{%- endblock %}

{% block body %}
<div>
    <h1>Page not found</h1>
    <p>Unfortunately we couldn't find the content you were looking for.</p>
</div>

<style>
    /* Hide empty sub menu. */
    .sticky-top .bd-toc {
        visibility: hidden;
    }
</style>
{% endblock %}
</file>

<file path="docs/_templates/layout.html">
{% extends "sphinx_book_theme/layout.html" %}
{%- block extrahead %}
{{ super() }}
<!-- Matomo Tag Manager -->
<!-- End Matomo Tag Manager -->
{% endblock %}


{% block body_tag %}
  <body data-spy="scroll" data-target="#bd-toc-nav" data-offset="100">
{%- endblock %}
</file>

<file path="docs/_templates/page.html">
{% extends "!page.html" %}

{%- block htmltitle %}
<title>{{ title|striptags|e }}{%- for parent in parents %} – {{ parent.title }}{%- endfor %}{{ titlesuffix }}</title>
{%- endblock %}


{% block footer %}
    <script type="text/javascript">
        $(document).ready(function() {
            // Hide empty sub menu.
            if ($.trim($(".sticky-top .bd-toc").html()) === "") {
                $(".sticky-top .bd-toc").css("visibility", "hidden");
            }
        });
    </script>

{% endblock %}
</file>

<file path="docs/_templates/search-field.html">
<form class="bd-search d-flex align-items-center" action="{{ pathto('search') }}" method="get">
  <div class="input-group">
    <label for="q" class="sr-only">Search string
    </label>
    <i class="fa fa-search fa-lg search-icon" aria-hidden="true"></i>
    <input
    type="search" name="q" id="search-input"
    class="form-control"
    placeholder="{{ _(theme_search_bar_text) }}"
    aria-labelledby="{{ _(theme_search_bar_text) }}"
    value="" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
    />
    <div class="input-group-append">
      <span class="input-group-text" id="shortcut">
        <kbd id="search-shortcut">⌘</kbd>&nbsp;<kbd>K</kbd>
      </span>
    </div>
  </div>
</form>
</file>

<file path="docs/_templates/search.html">
{#
  basic/search.html
  ~~~~~~~~~~~~~~~~~

  Template for the search page.

  :copyright: Copyright 2007-2021 by the Sphinx team, see AUTHORS.
  :license: BSD, see LICENSE for details.
#}
{%- extends "layout.html" %}
{% set title = _('Search') %}
{% block header %}
  <link rel="stylesheet/less" type="text/css" href="/_static/custom.css" />
  <script src="https://cdn.jsdelivr.net/npm/less@4.1.1" ></script>
{% endblock %}
{%- block scripts %}
  {{ super() }}
  <script src="{{ pathto('_static/searchtools.js', 1) }}"></script>
  <script src="{{ pathto('_static/language_data.js', 1) }}"></script>
{%- endblock %}
{% block extrahead %}
  <script src="{{ pathto('searchindex.js', 1) }}" defer></script>
  {{ super() }}
{% endblock %}
{% block body %}
  <h1 id="search-documentation">{{ _('Search') }}</h1>
  {% block scriptwarning %}
    <div id="fallback" class="admonition warning">
    <script>$('#fallback').hide();</script>
    <p>
      {% trans %}Please activate JavaScript to enable the search
      functionality.{% endtrans %}
    </p>
    </div>
  {% endblock %}
  {% block searchtext %}
    <p>
      {% trans %}Searching for multiple words only shows matches that contain
      all words.{% endtrans %}
    </p>
  {% endblock %}
  {% block searchbox %}
    <form
      action=""
      method="get"
      id="search-form"
      class=""
      >
      <div class="row">
        <div class="input-group col-xl-8 mb-2">
          <label for="q" class="sr-only">Search string
          </label>
          <input
          type="search" name="q" id="q"
          class="form-control"
          placeholder="{{ _(theme_search_bar_text) }}"
          aria-labelledby="{{ _(theme_search_bar_text) }}"
          value="" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"
          />
          <div class="input-group-append">
            <span class="input-group-text" id="shortcut-page">
              <kbd id="search-page-shortcut">⌘</kbd>&nbsp;<kbd>K</kbd>
            </span>
          </div>
          <div class="input-group-append">
            <button
            type="button"
            onclick="onReset()"
            class="btn btn-danger"
            ><i class="fas fa-times"></i></button>
          </div>
          <div class="input-group-append">
            <button type="submit" class="btn btn-primary"><i class="fas fa-search fa-lg" aria-hidden="true"></i></button>
          </div>
        </div>
      </div>

      <div class="form row mb-2">
        <label for="doc_section" class="col sr-only">Filter by section</label>
        <div class="col">
          <div class="form-check">
            <input class="form-check-input" type="radio" name="doc_section" id="doc_section_all" value="all" checked>
            <label class="form-check-label" for="doc_section_all">
              All Documentation
            </label>
          </div>
          {% for id, title in
            [
              ["technical_reference","Technical Reference"],
              ["user_guide","User Guide"],
            ] %}
            <div class="form-check">
              <input class="form-check-input" type="radio" name="doc_section" id="doc_section_{{id}}" value="{{id}}">
              <label class="form-check-label" for="doc_section_{{id}}">
                {{title}}
              </label>
            </div>
          {% endfor %}
        </div>
      </div>

      <span id="search-progress" style="padding-left: 10px"></span>
    </form>
  {% endblock %}

  {% block searchresults %}
    <div id="search-results">
    {% if search_results %}
      <ul>
      {% for href, caption, context in search_results %}
        <li><a href="{{ pathto(item.href) }}">{{ caption }}</a>
          <div class="context">{{ context|e }}</div>
        </li>
      {% endfor %}
      </ul>
    {% endif %}
    </div>
  {% endblock %}
{% endblock %}


{% block footer %}
    <script type="text/javascript">
        $(document).ready(function() {
            // Hide empty sub menu.
            if ($.trim($(".topbar-contents .bd-toc").html()) === "") {
                $(".topbar-contents .bd-toc").css("visibility", "hidden");
            }
        });
    </script>

{% endblock %}
</file>

<file path="docs/.well-known/.well-known/security.txt">
# OpenSPP security contacts and policy

# Our security contact channels
Contact: mailto:disclosure@openspp.org

# Link to our vulnerability disclosure policy
Policy: https://docs.openspp.org/security-report.html

# Languages that our team speaks and understands
Preferred-Languages: en-US, fr-FR
</file>

<file path="docs/community/code_of_conduct.md">
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our community a harassment-free
experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex
characteristics, gender identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy
community.

## Our Standards

Examples of behavior that contributes to a positive environment for our community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience
- Focusing on what is best not just for us as individuals, but for the overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email address, without their explicit
  permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will
take appropriate and fair corrective action in response to any behavior that they deem inappropriate,
threatening, offensive, or harmful.

Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki
edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate
reasons for moderation decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when an individual is officially
representing the community in public spaces. Examples of representing our community include using an official
e-mail address, posting via an official social media account, or acting as an appointed representative at an
online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders
responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining the consequences for any action
they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in
the community.

**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the
violation and an explanation of why the behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of actions.

**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved,
including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time.
This includes avoiding interactions in community spaces as well as external channels like social media.
Violating these terms may lead to a temporary or permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a
specified period of time. No public or private interaction with the people involved, including unsolicited
interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may
lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained
inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of
individuals.

**Consequence**: A permanent ban from any sort of public interaction within the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][mozilla coc].

For answers to common questions about this code of conduct, see the FAQ at
[https://www.contributor-covenant.org/faq][faq]. Translations are available at
[https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[mozilla coc]: https://github.com/mozilla/diversity
[faq]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations
</file>

<file path="docs/community/contributing.md">
# Contributing

Thank you for considering contributing to the OpenSPP project! We welcome and appreciate contributions from
the community, and are grateful for the time and effort that people put into improving the project.

## Code of Conduct

We expect all contributors to the OpenSPP project to adhere to our [Code of Conduct](code_of_conduct.md).
This document outlines the standards of behavior that we expect from all members of the community, and
provides guidance on how to report any incidents of misconduct.

## **Did you find a bug?**

- **Do not open up a GitHub issue if the bug is a security vulnerability in OpenSPP**, and instead follow the
  [security disclosure policy](security_report).

- **Ensure the bug was not already reported** by searching on GitHub under
  [Issues](https://github.com/openspp/documentation/issues).

- If you're unable to find an open issue addressing the problem,
  [open a new one](https://github.com/openspp/documentation/issues/new). Be sure to include a **title and
  clear description**, as much relevant information as possible demonstrating the expected behavior that is
  not occurring.

## Contributing to the code

### Getting Started

Before you start working on a new feature or bug fix, it's a good idea to check the project's issue tracker to
see if someone else is already working on it. If you find an open issue that you'd like to work on, you can
comment on the issue to let people know that you're planning to take it on.

If you don't see any open issues that match your area of expertise, feel free to open a new issue to propose a
new feature or report a bug. Make sure to include as much detail as possible, and to clearly describe the
problem or feature that you're proposing.

### Submitting a Pull Request

Once you have made your changes, you can submit a pull request (PR) to propose your changes for review and
inclusion in the project. Here are some tips for making a successful PR:

- Make sure that your PR is focused on a single issue or feature. Avoid bundling multiple unrelated changes in
  a single PR.
- Write clear and concise commit messages that explain the purpose of each change.
- Follow the project's coding style and conventions.
- Test your code thoroughly before submitting your PR. Make sure that all unit tests pass, and consider adding
  additional tests if necessary.
- Ensure that your code is well-documented using reStructuredText markup, with clear and concise comments
  explaining any non-obvious code.
- Make sure that your PR is reviewed by at least one other contributor before submitting.
- Address any feedback or issues raised during the review process in a timely manner.
- If your PR involves any significant changes or new features, consider writing documentation or updating the
  project's README to reflect these changes.
- Make sure that your PR is up to date with the latest version of the codebase before submitting.
- If your PR is large or complex, consider breaking it down into smaller, more manageable chunks that can be
  reviewed and merged more easily.

### Documentation Update

If your PR involves any significant changes or new features, it is important to update the project's
documentation to reflect these changes. This will help users and developers understand how to use and work
with the updated code.

To update the documentation, you should edit the relevant documentation and submit a separate PR with your
documentation changes to the [documentation](https://github.com/openspp/documentation) project.

When updating the documentation, make sure to:

- Clearly and concisely describe the changes that have been made.
- Provide examples or code snippets to illustrate how to use the new or updated features.
- Update any relevant reference documentation or API documentation.
- Test the documentation to ensure that it is accurate and up-to-date.

Updating the documentation is an important part of the PR process, and will help to ensure that the project is
easy to use and understand for all users and developers.

### Review Process

Once you have submitted your PR, it will be reviewed by one or more contributors to the project. The review
process is an opportunity for the project maintainers to provide feedback on your code, and for you to address
any issues or concerns that are raised.

During the review process, you may be asked to make changes to your code, or to provide additional information
or clarification. It's important to be responsive to these requests, as it will help to ensure that your PR is
accepted and merged in a timely manner.

Some things to keep in mind during the review process:

- Be open to feedback and suggestions. The review process is meant to help improve the quality and reliability
  of the project, and to ensure that all code meets the standards of the project.
- Address all issues and concerns raised during the review process. If you disagree with a suggestion or
  comment, feel free to engage in a constructive dialogue to reach a resolution.
- If you are asked to make changes to your code, try to make these changes as soon as possible. This will help
  to keep the review process moving forward and ensure that your PR is reviewed and merged in a timely manner.

Once all issues have been addressed and the code has been approved by the reviewers, your PR will be ready to
be merged into the project.

### Merging a Pull Request

Once your PR has been reviewed and all issues have been addressed, it can be merged into the project. In most
cases, PRs will be merged by the project maintainers, but in some cases, contributors may be granted the
ability to merge their own PRs.

Before merging a PR, it is important to double-check that all of the following conditions have been met:

- The PR has been reviewed and approved by at least one other contributor.
- All issues and concerns raised during the review process have been addressed.
- The code has been tested and is known to be in good working order.
- The PR is up to date with the latest version of the codebase.
- Once these conditions have been met, the PR can be safely merged into the project. This can usually be done
  with a single click using the "Merge" button in the GitHub interface.

After your PR has been merged, it will become part of the official project codebase, and will be included in
the next release of OpenSPP. Congratulations on your contribution!

## Contributing to the documentation

If you want to contribute to the [documentation](https://docs.openspp.org/), you can do so by following the
steps below:

- Fork the [documentation repository](https://github.com/OpenSPP/documentation).

- Fork the project's [documentation repository](https://github.com/OpenSPP/documentation)
- Make your changes in a new branch. It is recommended to name your branch something descriptive, such as
  "feature/new-section" or "bugfix/typo-correction".
- Before making any changes, ensure that you have the necessary dependencies installed and that you have a
  local version of the documentation set up. This can typically be done by installing Sphinx, and then running
  the command `make html` to build the documentation.
- Install pre-commit by running `pip install pre-commit` or `brew install pre-commit` depending on your
  system.
- Once you have made your changes, use the command `make html` again to rebuild the documentation and check
  that your changes display correctly.
- Configure pre-commit by running `pre-commit install`.
- Before committing any changes, make sure to run the project's pre-commit checks:
  `pre-commit run --all-files`. These checks will ensure that the code adheres to the project's style
  guidelines and that there are no obvious errors or issues.
- Commit your changes with a clear and descriptive commit message.
- Push your branch to your fork of the repository.
- Submit a pull request to the main repository for review.
- Make sure that you have explained in the pull request what changes you've made and why. And if there's any
  specific instructions or dependencies need to be followed.
- The project lead or maintainers will review the pull request and provide feedback. If any revisions are
  requested, make the necessary changes and push them to the same branch on your fork.
- Once your pull request is approved, it will be merged into the main repository.

### Building the documentation

It is recommended that you use a virtual environment to build the documentation. This will allow you to
install the required dependencies without affecting your system.

Python 3.10 should be used to build the documentation. You can install it using your package manager or by
following the instructions on the [pyenv GitHub page](https://github.com/pyenv/pyenv).

```bash
cd docs
pip install -r requirements.txt
make html
```


---

## Merged Content



### Content from docs/contributing/admins.md

---
myst:
  html_meta:
    "description": "Administrators' guide to writing OpenSPP Documentation. It covers automated deployments, hosting, automated testing, previewing, and importing external package documentation into OpenSPP Documentation."
    "property=og:description": "Administrators' guide to writing OpenSPP Documentation. It covers automated deployments, hosting, automated testing, previewing, and importing external package documentation into OpenSPP Documentation."
    "property=og:title": "Administrators Guide"
    "keywords": "OpenSPP, Documentation, automated deployments, hosting, automated testing, importing external packages"
---

(administrators-guide-label)=

# Administrators Guide

This guide is for administrators of OpenSPP Documentation.
It covers automated deployments, hosting, automated testing, previewing, and importing external package documentation into OpenSPP Documentation.


(administrators-import-docs-submodule-label)=

## Importing external docs with submodules

To add an external package to OpenSPP Documentation, we use git submodules.
Your package must be available under the OpenSPP GitHub organization.

Inside the repository `openspp/documentation`, add a git submodule that points to your project.

```shell
git submodule add git@github.com:openspp/my_package.git submodules/my_package
```

Add a target `docs/my_package` in `Makefile`, then add `docs/my_package` to the `deps` target, following `openspp_registry` as a pattern.
You might need to adjust the paths to your package's documentation after it is cloned.

To complete setup, generate a symlink to your project's docs, and build the docs, use a single command.

```shell
make html
```

To make it easier for other contributors to work with your project, update the following files, using `openspp_registry` as a model.
 
-   Add it to the documentation section {ref}`contributing-editing-external-package-documentation-label`.
-   Add the symlink `docs/my_package` to `.gitignore`.
-   Optionally set a branch to work on in `.gitmodules`.

Commit and push your changes to a remote, and submit a pull request against [`openspp/documentation`](https://github.com/openspp/documentation/compare).


### Content from docs/contributing/authors.md

---
myst:
  html_meta:
    "description": "Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors."
    "property=og:description": "Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors."
    "property=og:title": "Authors Guide"
    "keywords": "OpenSPP, Documentation, SEO, meta, Vale, spell, grammar, style, check, linkcheck, lexer"
---

(authors-guide-label)=

# Authors guide

This guide is for authors of OpenSPP Documentation.
It covers how to run a live preview of documentation while editing, build documentation, and perform quality checks.
For general markup syntax, see {doc}`myst-reference`.


## Synchronize the browser while editing

Use `sphinx-autobuild` to view changes in the browser while you edit documentation.

```shell
make livehtml
```

You can open a browser at http://127.0.0.1:8000/ to preview the documentation.


(authors-quality-checks-label)=

## Quality checks

We strive for high quality documentation, setting the following minimum standards.


(authors-markup-syntax-label)=

### Markup syntax must be valid

See both the specific markup syntax above and general markup in {doc}`myst-reference`.

To validate markup, run the following command.

```shell
make html
```

Open `/_build/html/index.html` in a web browser.


(authors-english-label)=

### American English spelling, grammar, and syntax, and style guide

Spellings are enforced through [`Vale`](https://vale.sh/).
OpenSPP uses American English.

Spelling is configured in {file}`Makefile`, {file}`.vale.ini`, and in files in `styles/Vocab/OpenSPP/`.

Authors should add new words and proper names using correct casing to {file}`styles/Vocab/OpenSPP/accept.txt`, sorted alphabetically and case-insensitive.

Vale also provides English grammar and syntax checking, as well as a Style Guide.
We follow the [Microsoft Writing Style Guide](https://learn.microsoft.com/en-us/style-guide/welcome/).

To perform all these checks, run the following command.

```shell
make vale
```

Because it is difficult to automate good American English grammar and syntax, we do not strictly enforce it.
We also understand that contributors might not be fluent in English.
We encourage contributors to make a reasonable effort, and to request a review of their pull request from community members who are fluent in English to fix grammar and syntax.
Please ask!


(authors-linkcheck-label)=

### All links must be valid

```{important}
Before you add a link, consider whether you really need it for the documentation.
Avoid linking to blog posts because they rapidly succumb to bitrot.
It is preferred to copy the content from the source and add a link to the source as a reference through a `seealso` admonition or footnote, than to merely link to the source.
```

Valid links are enforced automatically through Sphinx's `linkcheck` builder.

[Configuration of the `linkcheck` builder](https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-the-linkcheck-builder) is in {file}`Makefile` and {file}`docs/conf.py`.

`linkcheck_ignore` supports regular expression syntax.

When authors add a link to the documentation, it must be a valid public URL without requiring authentication.

If it is not a valid link, or is private or local, then you must exclude it from `linkcheck` by wrapping it in single backticks.

```md
Visit the URL `http://www.example.com` for an example.
```

This will render as follows.

> Visit the URL `http://www.example.com` for an example.

If a link has succumbed to bit rot, then try finding the most recently scraped version on the [Internet Archive Wayback Machine](https://web.archive.org/), and update the link.

To validate links, run the following command.

```shell
make linkcheck
```

Open `/_build/linkcheck/output.txt` for a list of broken links.

```{danger}
Please do not abuse `linkcheck_ignore`.

There is a special place in hell reserved for contributors who do not bother to update bad links, either dead ones or redirects, causing `linkcheck` to fail.
And there is a doubly punishing place for those who disable `linkcheck` because there are too many bad links.

Please do not be "that person".
```


(authors-syntax-highlighting-label)=

### Syntax highlighting

Pygments provides syntax highlighting in Sphinx.

When including code snippets, you should specify the language.
Authors must use a proper [Pygments lexer](https://pygments.org/docs/lexers/) and not generate warnings.

The snippet must be valid syntax for the language you specify, else it will not be highlighted properly.
Avoid adding comments to code snippets, unless you use valid comment syntax for that language.
For example, JSON does not allow comments.

Do not indicate elided or omitted code with ellipses (`...` or `…`).
These are almost never valid syntax and will cause syntax highlighting to fail for the code block.


#### Choosing a Lexer

Some lexers are less than perfect.
If your code block does not highlight well, then consider specifying a less ambitious lexer, such as `text`.

Use `shell` for commands to be issued in a terminal session.
Do not include shell prompts.
This will make commands easy to copy and paste for readers.

Use `console` for output of a shell session.
If you have a mix of a shell command and its output, then use `console`.

If `xml` does not work well, then try `html`.

`jsx` has a complex syntax that is difficult to parse.
We have high hopes for the project [`jsx-lexer`](https://github.com/fcurella/jsx-lexer).
We include it in our `requirements.txt` file.
Please contribute to its further development.

The lexers `html+ng2`, `scss`, `http`, `less` are also suboptimal and particular.

If no other lexer works well, then fall back to `text`.
At least then the build will succeed without warnings, although syntax highlighting for such snippets will not appear.


#### Validate the lexer

Always build the page to validate syntax.
The change should not be merged if there are any Sphinx warnings.
The Sphinx console will display any warnings, such as the following.

```console
/OpenSPP/documentation/classic-ui/bodyclasses.md:10: WARNING: Could not lex literal_block as "python". Highlighting skipped.
```

The above warning indicates that the syntax is not valid.
Common mistakes include:

- Using `...` or `…` to indicate omitted code.
  It is preferable to never use ellipses.
  If you must do that, comment it out using the language's comment syntax.
- Using comments in JSON.
- A previous code block bleeds through to the next due to invalid MyST syntax.

To validate code block syntax, run the following command.

```shell
make html
```

An [online demo of all lexers that Pygments supports](https://pygments.org/demo/) may be helpful to test out your code blocks and snippets for syntax highlighting.
You can also use the [`pygmentize`](https://pygments.org/docs/cmdline/) binary.

When using the online lexer, if any red-bordered rectangles appear, then the lexer for Pygments interprets your snippet as not valid.
You can search the [Pygments issue tracker](https://github.com/pygments/pygments/search) for possible solutions, or submit a pull request to enhance the lexer.


(authors-html-meta-data-label)=

### HTML and Open Graph metadata

All documents must have a `myst` topmatter key with an `html_meta` directive at the top of every page.
When rendered to HTML, it inserts `<meta>` tags for improved search engine results and nicer social media posts.
Authors should include at least `description`, `property=og:description`, `property=og:title`, and `keywords` meta tags.

The following is an example of `html_meta`.
Note that the content of the two tags `description` and `property=og:description` should be identical.

```md
---
myst:
  html_meta:
    "description": "Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors."
    "property=og:description": "Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors."
    "property=og:title": "Authors Guide"
    "keywords": "OpenSPP, Documentation, SEO, meta, Vale, spell, grammar, style, check, linkcheck, lexer"
---
```

This renders in the HTML `<head>` section as follows.

```html
<meta content="Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors." name="description" />
<meta content="Authors' guide to writing OpenSPP Documentation. It covers configuring quality checks and syntax for writing markup that is of particular interest to authors." property="og:description" />
<meta content="Authors Guide" property="og:title" />
<meta content="OpenSPP, Documentation, SEO, meta, Vale, spell, grammar, style, check, linkcheck, lexer" name="keywords" />
```

Additional Open Graph metadata is implemented through the Sphinx extension [`sphinxext-opengraph`](https://github.com/wpilibsuite/sphinxext-opengraph) and the [MyST `html_meta` directive](https://myst-parser.readthedocs.io/en/latest/configuration.html#setting-html-metadata), which resolves to the [Docutils `meta` directive](https://docutils.sourceforge.io/docs/ref/rst/directives.html#metadata).
See the site-wide configuration in {file}`conf.py`.


## OpenSPP documentation styleguide

We follow [Microsoft Writing Style Guide](https://learn.microsoft.com/en-us/style-guide/welcome/).

Key concepts from that guide include the following.

-   Documentation should be informational, but friendly.
-   Address the reader by using "you" instead of "the user".
-   Headings should be Sentence cased, not Title Cased.

The OpenSPP Documentation Team adopted additional guidelines.

-   Use one sentence per line.
    Keep sentences short and understandable.
    This will greatly improve the editing and maintenance of your documentation.

-   Do not follow PEP8 maximum line length standard.
    Documentation is narrative text and images, not Python code.

-   Use dashes `-` in filenames and avoid underscores.

-   Images should be no wider than 740 pixels to fit within the documentation's main view port.
    This avoids scaling and reducing legibility of images.
    To make that work in Volto, set your browser width to 1180 pixels.
    You will notice that the drag and trash icons for each block move inside the block from outside.

-   In user documentation, provide screenshots of each step where the interface changes.
    It is painstaking, but worth the effort.
    Provide sufficient detail of what each option is and does.


## General documentation writing references

-   [Write the Docs - Documentation Guide](https://www.writethedocs.org/guide/)
-   [A Guide to Em Dashes, En Dashes, and Hyphens](https://www.merriam-webster.com/words-at-play/em-dash-en-dash-how-to-use)


### Content from docs/contributing/index.md

---
myst:
  html_meta:
    "description": "Contributing to OpenSPP Documentation"
    "property=og:description": "Contributing to OpenSPP Documentation"
    "property=og:title": "Contributing to OpenSPP Documentation"
    "keywords": "OpenSPP, OpenSPP Contributor Agreement, License, Code of Conduct"
---

(contributing-index-label)=

# Contributing to documentation

This document describes how to contribute to OpenSPP Documentation.

Contributions to the OpenSPP Documentation are welcome.

(contributing-quality-requirements-label)=

## Documentation quality requirements

We use GitHub Actions with every pull request to enforce OpenSPP Documentation quality.
We recommend that you build the documentation locally to catch errors and warnings early on.
See {doc}`setup-build` for instructions for how to set up and build the documentation and to run quality checks.


```{toctree}
---
caption: Contributing
maxdepth: 2
hidden: true
---

setup-build
authors
myst-reference
sphinx-extensions
redirects
admins
```


### Content from docs/contributing/myst-reference.md

---
myst:
  html_meta:
    "description": "MyST syntax reference with examples"
    "property=og:description": "MyST syntax reference with examples"
    "property=og:title": "MyST syntax reference with examples"
    "keywords": "Documentation, OpenSPP, Sphinx, MyST, reStructuredText, Markdown, syntax, examples"
---

(contributing-myst-reference)=

# MyST reference

This chapter provides information and examples for how to write proper MyST syntax—with references to Sphinx extensions for their specific directives—in OpenSPP Documentation.

## MyST, reStructuredText, and Markdown

We use [MyST, or Markedly Structured Text](https://myst-parser.readthedocs.io/en/latest/), a rich and extensible flavor of Markdown, for authoring training documentation.

MyST extends Markdown by incorporating all the features of reStructuredText and Sphinx and its extensions.
Contributors are welcome to use either Markdown or MyST syntax.

MyST may be more familiar to reStructuredText authors.
MyST allows the use of a fence and `{rst-eval}` to evaluate native reStructuredText.
This may be useful when Markdown does not provide sufficient flexibility, such as for `figure`.

## MyST syntax reference

The following are frequently used snippets and examples.

```{seealso}

Official MyST documentation

- [The MyST Syntax Guide](https://myst-parser.readthedocs.io/en/latest/syntax/syntax.html)
- [MyST Syntax Reference](https://myst-parser.readthedocs.io/en/latest/syntax/reference.html)
```

### Cross-references

```{seealso}
[The MyST Syntax Guide > Cross-references](https://myst-parser.readthedocs.io/en/latest/syntax/cross-referencing.html)
```

#### Link to a chapter or page

```md
Here is how to set up and build the documentation locally {doc}`/contributing/setup-build`.
```

Here is how to set up and build the documentation locally {doc}`/contributing/setup-build`.

(myst-reference-link-heading-label)=

#### Link to a heading

```md
(myst-reference-hello-heading-label)=

##### Hello heading

Read the section {ref}`myst-reference-link-heading-label`.
```

(myst-reference-hello-heading-label)=

##### Hello heading

Read the section {ref}`myst-reference-hello-heading-label`.

#### Link to an arbitrary location

```md
(example-target-label)=

I have an HTML anchor above me.

Click the link to visit {ref}`my text <example-target-label>`.
```

(example-target-label)=

I have an HTML anchor above me.

Click the link to visit {ref}`my text <example-target-label>`.

#### Link to external page

```md
Use [Shimmer](http://example.com) for cleaner whiter teeth.
```

Use [Shimmer](http://example.com) for cleaner whiter teeth.

### Images and figures

[Figures](https://docutils.sourceforge.io/docs/ref/rst/directives.html#figure) allow a caption and legend, whereas [images](https://docutils.sourceforge.io/docs/ref/rst/directives.html#images) do not.
However we can {ref}`enhance images with cards <enhance-images-label>` to add a caption and more features.

Use `image` for anything but diagrams.

Use `figure` for diagrams.

(static-assets-label)=

#### Static assets

When the documentation is in a submodule, paths to static assets—including, images, figures, and videos—must resolve in both the main documentation and the submodule's documentation.

Inside the `docs` directory, place static assets in the `/_static/` directory, and preferably inside a subdirectory named after the part or page of the documentation.
For example, in the `volto` submodule, inside its `src/docs` directory, place an image at `/_static/user-manual/block-left-add-icon.png`.
In your markup, use that same `docs`-root-relative path for the target, such as `/_static/user-manual/block-left-add-icon.png`.
Don't use file-relative paths.

Configuration in the `conf.py` files for the main documentation and its submodules handle the resolution of `docs`-root-relative paths for you.

#### Width of media

The main content area of a page in the documentation is 743 pixels wide.
When taking screenshots or videos, resize your browser window, or try to limit the width of your media to 740 pixels.
This will preserve legibility of images.

(enhance-images-label)=

#### Enhance images

We use cards from the Sphinx extension [`sphinx-design`](https://sphinx-design.readthedocs.io/en/latest/cards.html) to enhance the display and functionality of images.

Cards allow the display of a caption, create a link to the source image to display when it is too large to fit within the documentation page without scaling, and add a border to demarcate the image from the page's white background.

The following MyST example will display as shown below.

`````md
````{card}
```{image} /_static/caching/caching-disabled.png
:alt: Caching Control Panel
:target: /_static/caching/caching-disabled.png
```
+++
_Caching Control Panel_
````
`````

````{card}
```{image} /_static/caching/caching-disabled.png
:alt: Caching Control Panel
:target: /_static/caching/caching-disabled.png
```
+++
_Caching Control Panel_
````

#### Accessibility with `alt` text

From [Web Accessibility In Mind (WebAIM)](https://webaim.org/techniques/alttext/):

> Alternative text serves several functions:
>
> - It is read by screen readers in place of images allowing the content and function of the image to be accessible to those with visual or certain cognitive disabilities.
> - It is displayed in place of the image in browsers if the image file is not loaded or when the user has chosen not to view images.
> - It provides a semantic meaning and description to images which can be read by search engines or be used to later determine the content of the image from page context alone.

The following MyST example will display as shown below.

````md
```{image} /_static/standards.png
:alt: XKCD "Standards" comic strip
```
````

```{image} /_static/standards.png
:alt: XKCD "Standards" comic strip
```

#### Inline images

For inline images, we use the MyST extension [`html_image`](https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#html-images).
Example syntax is shown below.

```html
You can copy
<img alt="Copy icon" src="../../_images/copy.svg" class="inline" /> blocks.
```

Note that the HTML attribute `class` must be set to `inline` to render the image inline at `1rem`.

The above syntax renders as shown below.

> You can copy <img alt="Copy icon" src="/_static/copy.svg" class="inline"> blocks.

Images and figures should always include `alt` text.

The following MyST example will display as shown below.

````md
```{eval-rst}
.. figure:: /_static/voting_flowchart.png
    :alt: Voting flowchart

    This is a caption in a single paragraph.

    This is a legend, which consists of all elements after the caption.
    It can include a table.

    ======  =======
    Symbol  Meaning
    ======  =======
    ⃞       Object
    ⬭       View
    ➞       Flow
    ======  =======
```
````

```{eval-rst}
.. figure:: /_static/voting_flowchart.png
    :alt: Voting flowchart

    This is a caption in a single paragraph.

    This is a legend, which consists of all elements after the caption.
    It can include a table.

    ======  =======
    Symbol  Meaning
    ======  =======
    ⃞       Object
    ⬭       View
    ➞       Flow
    ======  =======
```

### Video

To embed local videos, such as recordings of demonstrating the user interface, we require that the videos be saved as `.mp4` for greatest compatibility, usability, accessibility, and reduced file size.

Avoid animated GIFs because they do not allow control of playback.

Audio is not required, but may be helpful.
If you include audio, it is helpful to include closed captions or a transcript.

It is helpful to include overlays of key strokes, and mouse and other input gestures, to describe how to interact with the user interface.

Paths to videos must resolve in both the main documentation and the submodule's documentation, if present.
See {ref}`static-assets-label` for details.

Example MyST syntax is shown below.

````md
```{video} /_static/user-manual/blocks/block-copy-cut.mp4
    :width: 100%
```
````

Note that the path must be absolute to support both submodules and the main documentation.
Don't use file-relative paths.
The above MyST markup renders as shown below.

```{video} /_static/user-manual/blocks/block-copy-cut.mp4
    :width: 100%
```

### Diagrams and graphs with Graphviz

We use [Graphviz](https://graphviz.org/download/) and its Sphinx extension [`sphinx.ext.graphviz`](https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html) to render diagrams and graph visualizations.

The following MyST example will display as shown below.

````markdown
```{eval-rst}
.. graphviz::
    :align: center

    digraph viewstructure {
      {
        node [margin=5,shape=box]
      }
      ZCML -> {Python, Template};
    }
```
````

```{eval-rst}
.. graphviz::
    :align: center

    digraph viewstructure {
      {
        node [margin=5,shape=box]
      }
      ZCML -> {Python, Template};
    }
```

### Code block

A Python code snippet without reStructuredText options, using a simple fence.

````md
```python
a = 2
print("my 1st line")
print(f"my {a}nd line")
```
````

```python
a = 2
print("my 1st line")
print(f"my {a}nd line")
```

A Python code snippet with reStructuredText options, using a fence with the parsed reStructuredText directive `code-block`.

````md
```{code-block} python
:linenos:
:emphasize-lines: 1, 3

a = 2
print("my 1st line")
print(f"my {a}nd line")
```
````

```{code-block} python
:linenos:
:emphasize-lines: 1, 3

a = 2
print("my 1st line")
print(f"my {a}nd line")
```

### Escape literal backticks inline

```md
This is MyST syntax for term `React `
```

This is MyST syntax for term `React `

### Glossary terms

Add a term to the {ref}`glossary-label`, located at {file}`/glossary.md`.

```md
React
[React](https://reactjs.org/) is a JavaScript library for building user interfaces.
```

Reference a term in the {ref}`glossary-label`.

```md
Using React makes frontends fun again!
```

Using React makes frontends fun again!

### Nesting directives

You can [nest directives](https://myst-parser.readthedocs.io/en/latest/syntax/roles-and-directives.html#nesting-directives), such as [admonitions](https://myst-parser.readthedocs.io/en/latest/syntax/admonitions.html) and code blocks, by ensuring that the backtick-lines corresponding to the outermost directive are longer than the backtick-lines for the inner directives.

`````
````{tip}
To use formatted string literals ("f-strings"), begin a string with `f` or `F` before the opening quotation mark or triple quotation mark.
Inside this string, you can write a Python expression between `{` and `}` characters that can refer to variables or literal values.

```{code-block} python
:linenos:
:emphasize-lines: 1, 3

a = 2
print("my 1st line")
print(f"my {a}nd line")
```
````
`````

This would be rendered as:

````{tip}
To use formatted string literals ("f-strings"), begin a string with `f` or `F` before the opening quotation mark or triple quotation mark.
Inside this string, you can write a Python expression between `{` and `}` characters that can refer to variables or literal values.

```{code-block} python
:linenos:
:emphasize-lines: 1, 3

a = 2
print("my 1st line")
print(f"my {a}nd line")
```
````


### Content from docs/contributing/setup-build.md

---
myst:
  html_meta:
    "description": "How to set up the OpenSPP Documentation locally"
    "property=og:description": "How to set up the OpenSPP Documentation locally"
    "property=og:title": "Building and Checking the Quality of Documentation"
    "keywords": "setup, build, documentation, quality, development, Vale, spell, grammar, style, check, linkcheck"
---

(setup-build-label)=

# Building and checking the quality of documentation

This document covers how to build the OpenSPP Documentation and check it for quality.


(setup-build-installation-label)=

## Installation

Installation of OpenSPP Documentation includes pre-requisites and the repository itself.


(setup-build-installation-python-label)=

### Python

Python 3.8 or later is required.
A more recent Python is preferred.
Use your system's package manager or [pyenv](https://github.com/pyenv/pyenv) to install an appropriate version of Python.


(setup-build-installation-vale-label)=

### Vale

Vale is a linter for narrative text.
It checks spelling, English grammar, and style guides.
OpenSPP documentation uses a custom spelling dictionary, with accepted and rejected spellings in `styles/Vocab/OpenSPP`.

Use your operating system's package manager to [install Vale](https://vale.sh/docs/vale-cli/installation/).

Vale also has [integrations](https://vale.sh/docs/integrations/guide/) with various IDEs.

-   [JetBrains](https://vale.sh/docs/integrations/jetbrains/)
-   [Vim](https://github.com/dense-analysis/ale)
-   [VS Code](https://github.com/errata-ai/vale-vscode)

OpenSPP documentation uses a file located at the root of the repository, `.vale.ini`, to configure Vale.
This file allows overriding rules or changing their severity.

The OpenSPP Documentation Team selected the [Microsoft Writing Style Guide](https://learn.microsoft.com/en-us/style-guide/welcome/) for its ease of use—especially for non-native English readers and writers—and attention to non-technical audiences. 

```{note}
More corrections to spellings and Vale's configuration are welcome by submitting a pull request.
This is an easy way to become a contributor to OpenSPP.
```


(setup-build-installation-graphviz-label)=

### Graphviz

Install [Graphviz](https://graphviz.org/download/) for graph visualization.

`````{tab-set}
````{tab-item} macOS
```shell
brew install graphviz
```
````

````{tab-item} Ubuntu
```shell
sudo apt-get install graphviz
```
````
`````


(setup-build-installation-clone-OpenSPP-documentation-label)=

### Clone `OpenSPP/documentation`

Clone the OpenSPP Documentation repository, and change your working directory into the cloned project.
Then with a single command using `Makefile`, create a Python virtual environment, install project dependencies, pull in Volto documentation as a git submodule, build the docs, and view the results in a web browser by opening `/_build/html/index.html`.

```shell
git clone https://github.com/OpenSPP/documentation.git
cd documentation
make html
```

(setup-build-available-documentation-builds-label)=

## Available documentation builds

All build and check documentation commands use the file `Makefile`.

To see the most frequently used builds, use the following command.

```shell
make help
```

Else you can open `Makefile` to see other build formats, including PDF.


### `html`

`html` is the HTML version of the documentation.

```shell
make html
```

Open `/_build/html/index.html` in a web browser.


### `livehtml`

`livehtml` rebuilds Sphinx documentation on changes, with live-reload in the browser.

```shell
make livehtml
```

Open http://0.0.0.0:8000/ in a web browser.


### `linkcheck`

`linkcheck` checks all links.
See {ref}`authors-linkcheck-label` for configuration.

```shell
make linkcheck
```

Open `/_build/linkcheck/output.txt` for a list of broken links.


### `vale`

`vale` checks for American English spelling, grammar, syntax, and the Microsoft Developer Style Guide.
See {ref}`authors-english-label` for configuration.

```shell
make vale
```

See the output on the console for suggestions.


### `html_meta`

`html_meta` adds a meta data section to each chapter if missing.
See {ref}`authors-html-meta-data-label` for more info.

```shell
make html_meta
```


### Content from docs/contributing/sphinx-extensions.md

---
myst:
  html_meta:
    "description": "Sphinx extensions"
    "property=og:description": "Sphinx extensions"
    "property=og:title": "Sphinx extensions"
    "keywords": "Documentation, OpenSPP, Sphinx, reStructuredText, extensions"
---

(contributing-sphinx-extensions)=

# Sphinx extensions

We use several Sphinx extensions to enhance the presentation of OpenSPP documentation.

-   [`sphinx.ext.graphviz`](https://www.sphinx-doc.org/en/master/usage/extensions/graphviz.html) allows you to embed [Graphviz](https://graphviz.org/download/) graphs in your documents.
-   [`sphinx.ext.intersphinx`](https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html) provides linking between separate projects that use Sphinx for documentation.
-   [`sphinx.ext.todo`](https://www.sphinx-doc.org/en/master/usage/extensions/todo.html) adds support for todo items.
-   [`sphinx_copybutton`](https://sphinx-copybutton.readthedocs.io/en/latest/index.html)  adds a little "copy" button to the right of code blocks.
-   [`sphinx-design`](https://sphinx-design.readthedocs.io/en/latest/) adds grids, cards, icons, badges, buttons, tabs, and dropdowns.
-   [`sphinx_sitemap`](https://pypi.org/project/sphinx-sitemap/) generates multiversion and multilanguage [sitemaps.org](https://www.sitemaps.org/protocol.html) compliant sitemaps.
-   [`sphinxcontrib.httpdomain`](https://sphinxcontrib-httpdomain.readthedocs.io/en/stable/) provides a Sphinx domain for describing HTTP APIs.
-   [`sphinxcontrib.httpexample`](https://sphinxcontrib-httpexample.readthedocs.io/en/latest/) enhances `sphinxcontrib-httpdomain` by generating RESTful HTTP API call examples for different tools from a single HTTP request example.
    Supported tools include [curl](https://curl.se/), [wget](https://www.gnu.org/software/wget/), [httpie](https://httpie.io/), and [python-requests](https://requests.readthedocs.io/en/latest/).
-   [`sphinxcontrib.video`](https://pypi.org/project/sphinxcontrib-video/) allows you to embed local videos as defined by the HTML5 standard.
-   [`sphinxext.opengraph`](https://pypi.org/project/sphinxext-opengraph/) generates [OpenGraph metadata](https://ogp.me/).
-   [`sphinx.ext.viewcode`](https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html) generates pages of source code modules and links between the source and the description.
-   [`sphinx.ext.autosummary`](https://www.sphinx-doc.org/en/master/usage/extensions/autosummary.html) generates function/method/attribute summary lists.


### Content from docs/howto/translation.md

# Translation
</file>

<file path="docs/community/index.md">
# Community

This section contains information about the OpenSPP project, community interaction, contribution processes, and legal information.

```{toctree}
:maxdepth: 2
:caption: Contents

contributing
code_of_conduct
license
security_reporting
support
release_management
module_lifecycle_development_status
module_lifecycle_maintainer_role
```
</file>

<file path="docs/community/license.md">
# Licensing

OpenSPP is licensed as LGPL 3.0 and builds on top of other software with the following licensing:

- OpenG2P: GNU Lesser General Public License v3 (LPGLv3)
- Odoo: GNU Lesser General Public License v3 (LPGLv3)
</file>

<file path="docs/community/module_lifecycle_development_status.rst">
*****************************************************
Modules Maturity Levels and Development Status Policy
*****************************************************

Introduction
============
The requirements to merge code into OpenSPP projects depend on the module's
maturity level.

The OpenSPP uses the following maturity levels for the modules stored in the
Github repository and published in PyPi platform:

-  **Alpha:** Unstable, for development or testing purpose

-  **Beta:** Pre-production quality but with potential instability

-  **Production/Stable:** suitable for production environment

-  **Mature:** In Production level since more than one version and
   actively maintained.

This is consistent with the terminology used on PyPi, and the allowed
values are the same as the ones used by PyPi.

A module maturity level is stored in the **development\_status** key of
the standard manifest of the module (\_\_manifest\_\_.py).

For better visibility of the development level, it is highlighted in the
module README file. Thanks to automated documentation script (using a
DESCRIPTION.rst and other companion documentation files), the maturity
level badge is automatically added by a nightly script, that compiles
all the separate RST fragments into a single README.rst file.

Modules in all development status are hosted in the same repositories
and branches. You will find Beta modules alongside Stable ones: for this
reason, you have to make sure to check the README or manifest before
deciding to use a module in production environment.

A module’s development\_status can be different for different versions.
A “mature” or “stable” module in a version can start as “stable” or
“beta” in the next branch, as a step towards maturity.

All modules, regardless of their development status, will be published
on PyPi.

Next we describe in detail what each 'development status' means, what
can be expected by users, and what are the requirements for modules to
be assigned each maturity level.

When no development\_status is set in the manifest, Beta is assumed.

**Alpha and Beta modules**
==========================

Alpha and Beta modules allow for the incubation of OpenSPP Stable modules.
They enable the work to be split into several smaller pull requests,
that are easier to review and make it easier to divide the work between
several people.

Each pull request is an iteration providing a correct set of features.
The corresponding code should always pass TravisCI checks and should
have at least one peer review.

Since these modules are a work in progress toward a “stable” module,
they are not suitable for use in production. The design and
implementation may change without notice in incompatible ways, the
development work may halt, and it is even possible that it may be
abandoned and deleted from the repository.

The suggested module incubation workflow looks like this:

#. Create a “WIP” Issue for the module, used to coordinate the work and
   different PRs related to it. It should state the final goal and
   describe the next work units to be done.

#. Create the PRs implementing the work units described in the WIP
   Issue. They must pass CI tests and peer review.

#. Once contributors feel that the module is complete, promotion to
   “stable” status can be proposed through a PR changing the
   **development\_status** manifest key.

This workflow can also be extended to support a functional design stage,
prior to the implementation:

-  Before the “WIP” Issue, an “RFC” issue (complemented by a Google Doc
   or similar, if necessary) can be created for an initial
   discussion of the scope, desired features and the implementation
   design outline.

-  Once a “WIP” Issue is created, a first PR can create the skeleton of
   the new module, including the basic DESCRIPTION.rst, and a
   SPECS.rst file for the specifications and technical design.

The Alpha stage is not required, but it may be useful to signal that the
module is not expected to work as planned yet (or at all). It is in the
early stages of design and construction

Changing the development status to Beta is a way to signal reviewers and
functional testers that the module should be usable enough to be tested.

As a summary, alpha and beta modules:

-  Must at all times follow the OpenSPP coding standards and ensure
   green builds.

-  Must be correctly installed by the OpenSPP build, without conflicting
   with other installed modules, allowing people to try them

-  Are recommended to have a “WIP” Issue to list the pending tasks and
   coordinate the work around them.

-  Are recommended to have at least one peer review before merging PRs.

**Stable modules**
==================

Stable modules are adequate for production use, and meet all the
original OpenSPP quality requirements: green CI build passing all current
mandatory checks, and peer reviewed by at least another person.

They have an “API stable” policy similar to the Odoo policy for stable
branches, ensuring that extensions won't break, but more permissive,
allowing for feature additions and improvements.

As a summary, “stable” modules:

-  Must at all times follow the OpenSPP coding standards and ensure
   green builds.

-  Must be correctly installed by the OpenSPP build, without conflicting
   with other installed modules, allowing people to try them.

-  Must have some tests (no minimum coverage percentage required).

-  Must depend only on Stable and Mature modules..

-  One peer review at least before being merged.

-  Must have code formatted

**Mature modules**
==================

Mature modules not only meet the stable criteria, but are also known to
be actively maintained. Usually these are modules in use in several
deployments, and maintained by more than one party. They typically
survived major version changes, having version ports, and there is a
reasonable expectation for this to happen in future major versions.

Mature modules:

-  Must meet all "Stable" module criteria.

-  Are recommended to also exists for at least one previous Odoo
   version.

-  Must have tests with good code coverage.

-  Must not have lint beta message warnings.

-  Must have user documentation.

-  Must be stable across Odoo versions: in case that significant changes
   are made to the data model, automatic migration OpenUpgrade
   scripts are provided. API breakages must be documented clearly,
   and be accompanied with a change in the major version number.

-  Must have at least 2 independent contributors.

-  Must have at least one declared maintainer.

-  Must depend only on Mature modules.

-  Must not have relevant overlap with existing Mature modules (unless a
   good justification is given, evaluated by the relevant PSC).

   .. note::
      This document is based on the OCA module maturity levels https://github.com/OCA/odoo-community.org/blob/master/website/Contribution/oca_module_lifecycle_development_status.rst
</file>

<file path="docs/community/module_lifecycle_maintainer_role.rst">
*****************************************
Module Lifecycle - Maintainer Role Policy
*****************************************


Introduction
============
A Maintainer is responsible to ensure the coordination of specific addon
modules in order to ensure the quality and consistency of the
contributions. For a particular repository, this could be one, a few, or
even all the modules in that repository.

Typically, the maintainer role for OpenSPP repositories is expected to be
done by the Project Steering Committee (PSC) members.  Their main role is
project oversight, and one PSC can be responsible for one or more project
repositories.

In large repositories it is sometimes difficult to identify who are the
active maintainers of a given addon. This creates the following
problems:

-  the maintainer does not easily notice PR and Issues concerning
   his/her addons;

-  when addons have no active maintainers, PSC members must take care of
   it, but they may be too busy or may not feel concerned by all
   addons in their repositories;

-  it is difficult for contributors to detect addons which have no
   active maintainer.

In small, focused repositories this issue does not arise since
the repo maintainers and addons maintainers are the same.

In larger repos it happens that some or all PSC members are not
interested in all addons and the repo suffers of the above drawbacks,
therefore giving a negative impression on the whole repo.

Splitting large repositories so they all become focused with a
homogeneous content seems to be impractical, due to the difficulty to
manage a large amount of repositories.

The maintainer role has been introduced to alleviate the above issues.

Being the maintainer of an addon module bears some responsibilities
towards the community. This document aims at clarifying those.

Maintainer role and responsibilities
====================================

-  Maintainers main role is to foster efficient community collaboration
   on the addons they are responsible for. This includes

   -  **Communication:** Ensuring that discussions and reviews don’t
      stall, intervening to ping the people involved, or ask for
      next steps whenever communication stops.

   -  **Control:** Doing final checks and merging approved pull
      requests.

   -  **Versioning:**

      -  Bumping version numbers during merge or immediately after.

   -  **Support:** Handling support requests and questions.

   -  **Documentation:** Documenting and managing the roadmap (future
      improvement ideas, known issues).

   -  **Guidance:** Keeping an eye on contributions in related areas to
      help ensure functional consistency in OpenSPP. This may include
      helping to merge new feature in the addons they maintain, or
      guiding contributors towards the creation of new extension
      modules. This must not preclude the creation of addons
      providing a competing approach, fostering innovation.

-  Declared maintainers are given write access to the repository. If
   they are not PSC member they are trusted not to do write
   operations (eg merging pull requests) that have impact on other
   addons than the one they maintain.

-  Maintainers may proceed to some maintenance operation with relaxed
   code review rules (eg performing simple, low risk, forward and
   backports, maintaining documentation, applying cosmetic
   improvements to the code such as linting). Maintainers are
   expected to follow the highest quality standard when performing
   such operations.

-  If there is more than one declared maintainer, they must ensure good
   coordination between them (for instance, ensure no task are left
   unattended on the assumption that another maintainer will do it).

-  PSC members should not merge PR concerning modules with declared
   maintainers, unless the maintainer is unreactive.

-  Addons with no declared maintainers are managed by the PSC.

Adding, removing maintainers
============================

-  The maintainers of an addon are declared in the **maintainers** key
   of the manifest. This key is a list of github logins. The list of
   declared maintainers is expected to be short (one or two in
   general).

-  New candidate maintainers can propose themselves by adding their
   github login in the manifest, with a PR, to be approved by the
   PSC.

-  Maintainers who do not wish to continue maintaining a module must
   remove themselves from the list through a PR, and announce it on
   the contributors mailing list, calling for volunteers.

-  PSC may remove maintainers who do not follow OpenSPP rules or fail to
   their maintenance duties. Such action must be taken in
   coordination with the board.

-  Current maintainers are displayed (using their avatar) in the addon
   README.rst.

.. note::
   This document is based on the OCA Module Lifecycle - Maintainer Role Policy  https://odoo-community.org/page/maintainer-role.
</file>

<file path="docs/community/release_management.md">
# Release Management

## Agile Release Planning and Scheduling

OpenSPP's development process operates through the scrum methodology, a framework widely used in Agile software development. This involves two-week sprints, at the end of which a new version of the solution is released. The use of scrum methodology fosters iterative progress, rapid feedback, and efficient resolution of issues.

In terms of release frequency, internal releases are planned every two/three weeks in alignment with the sprint durations. Public releases, incorporating more extensive changes or new features. This schedule strikes a balance between introducing new functionalities and maintaining system stability.

## Risk Management and Release Safeguards

Risk management is a crucial aspect of OpenSPP's development process. The platform is equipped with mechanisms to manage the risk of releases, such as rollback plans. These include automated deployment pipelines, a continuous integration process, and automated testing and validation of code changes.

OpenSPP uses these features to ensure that every new release is stable and reliable. In the event of a failed deployment or the emergence of other issues, a rollback feature allows users to restore a previous version of their code. This safeguard ensures that system functionality can be quickly recovered, minimizing disruption to users.

## Automated Testing and Continuous Integration

The platform's engineering rigor includes the application of automated testing and Continuous Integration/Continuous Delivery (CI/CD). This ensures a consistent delivery of high-quality software, faster problem detection, and more productive development cycles. However, it should be noted that while the solution supports automated deployment, it currently does not provide an automatic rollback mechanism.

OpenSPP also supports blackbox testing, a method wherein the functionality of an application is tested without knowledge of its internal structures or workings. This helps identify discrepancies in the system's behavior against expected outcomes. Along with this, the solution ensures high test coverage, guaranteeing that all aspects of the software have been thoroughly tested.

## Deployment Models and Scalability

OpenSPP is equipped to handle various deployment models, including containers and virtual machines. The platform's versatility allows it to adapt to various infrastructure needs, thereby offering more options to organizations in terms of how they wish to run the solution.

The solution is designed with scalability at its core, making it an ideal choice for growing organizations. It can scale up and down with ease to accommodate varying requirements while maintaining the same level of reliability. OpenSPP supports deployment across multiple platforms, such as cloud, on-premise, and hybrid deployments. Moreover, it can manage multiple deployments from a single interface, simplifying the process and increasing efficiency. It also provides tools for monitoring and managing performance across all deployments, ensuring consistent and reliable service levels.

## Integration with CI/CD Tools

OpenSPP integrates seamlessly with popular CI/CD tools through Github Actions. This empowers developers to automate their workflows, making the software development process more efficient. Github Actions facilitates a range of tasks, including building, testing, and deploying software, directly from Github.
</file>

<file path="docs/community/security_reporting.md">
# OpenSPP Vulnerability Disclosure Policy

## Introduction

OpenSPP welcomes feedback from security researchers and the general public to help improve our security. If
you believe you have discovered a vulnerability, privacy issue, exposed data, or other security issues in any
of our assets, we want to hear from you. This policy outlines steps for reporting vulnerabilities to us, what
we expect, what you can expect from us.

## Systems in Scope

This policy applies to any digital assets owned, operated, or maintained by OpenSPP.

## Out of Scope

- Assets or other equipment not owned by parties participating in this policy.

Vulnerabilities discovered or suspected in out-of-scope systems should be reported to the appropriate vendor
or applicable authority.

## Our Commitments

When working with us, according to this policy, you can expect us to:

- Respond to your report promptly, and work with you to understand and validate your report;
- Strive to keep you informed about the progress of a vulnerability as it is processed;
- Work to remediate discovered vulnerabilities in a timely manner, within our operational constraints; and
- Extend Safe Harbor for your vulnerability research that is related to this policy.

## Our Expectations

In participating in our vulnerability disclosure program in good faith, we ask that you:

- Play by the rules, including following this policy and any other relevant agreements. If there is any
  inconsistency between this policy and any other applicable terms, the terms of this policy will prevail;
- Report any vulnerability you’ve discovered promptly;
- Avoid violating the privacy of others, disrupting our systems, destroying data, and/or harming user
  experience;
- Use only the Official Channels to discuss vulnerability information with us;
- Provide us a reasonable amount of time (at least 120 days from the initial report) to resolve the issue
  before you disclose it publicly;
- Perform testing only on in-scope systems, and respect systems and activities which are out-of-scope;
- If a vulnerability provides unintended access to data: Limit the amount of data you access to the minimum
  required for effectively demonstrating a Proof of Concept; and cease testing and submit a report immediately
  if you encounter any user data during testing, such as Personally Identifiable Information (PII), Personal
  Healthcare Information (PHI), credit card data, or proprietary information;
- You should only interact with test accounts you own or with explicit permission from the account holder; and
- Do not engage in extortion.

## Official Channels

Please report security issues via email: disclosure@openspp.org, providing all relevant information. The more
details you provide, the easier it will be for us to triage and fix the issue.

## Safe Harbor

When conducting vulnerability research, according to this policy, we consider this research conducted under
this policy to be:

- Authorized concerning any applicable anti-hacking laws, and we will not initiate or support legal action
  against you for accidental, good-faith violations of this policy;
- Authorized concerning any relevant anti-circumvention laws, and we will not bring a claim against you for
  circumvention of technology controls;
- Exempt from restrictions in our Terms of Service (TOS) and/or Acceptable Usage Policy (AUP) that would
  interfere with conducting security research, and we waive those restrictions on a limited basis; and
- Lawful, helpful to the overall security of the Internet, and conducted in good faith.

You are expected, as always, to comply with all applicable laws. If legal action is initiated by a third party
against you and you have complied with this policy, we will take steps to make it known that your actions were
conducted in compliance with this policy.

If at any time you have concerns or are uncertain whether your security research is consistent with this
policy, please submit a report through one of our Official Channels before going any further.

> Note that the Safe Harbor applies only to legal claims under the control of the organization participating
> in this policy, and that the policy does not bind independent third parties.

## Acknowledgements

We are dedicated to ensuring the security of OpenSPP and greatly appreciate the contributions of our community in this ongoing effort. A special thanks to the individuals below who have supported us.

- [Aviv Keller](https://www.linkedin.com/in/redyetidev)
</file>

<file path="docs/community/support.md">
# Support Model

A three-tier support model is offered for the product implementation: Level 1 (L1), Level 2 (L2), and Level 3 (L3). The responsibility for these levels of support is taken on by Newlogic, ensuring that the product performs at its optimal level and customer satisfaction is prioritized. In alignment with our strong commitment to the open-source community, L3 support is offered for issues that are raised directly on Github. This approach promotes transparency, encourages community-based problem solving, and reflects our strong commitment to the principles of open-source development. The aim is to ensure that the functionality and reliability of our product are upheld, and the vibrant open-source community that has played a significant role in our success is supported.

The SLA outlines the expected timeframes and processes for issue resolution, thus ensuring the system's users that any critical issues will be addressed promptly and effectively. These measures are a testament to the dedication and commitment to maintaining the operational efficiency and security of OpenSPP.
</file>

<file path="docs/developer_guide/api_usage/external_api_xmlrpc.md">
============
External API
============

OpenSPP is usually extended internally via modules, but many of its features and
all of its data are also available from the outside for external analysis or
integration with various tools. Part of the :ref:`reference/orm/model` API is
easily available over XML-RPC_ and accessible from a variety of languages.

.. seealso::
    Look at exemples from the Odoo documentation: :doc:`odoo:developer/howtos/web_services`


Connection
==========

Configuration
-------------

If you already have an OpenSPP server installed, you can just use its parameters.

.. important::

    While you can use your password to connect to the API, it is recommended to
    instead use an :ref:`api/external_api/keys` as they can be revoked easily.

.. tabs::

   .. code-tab:: python

       url = <insert server URL>
       db = <insert database name>
       username = 'admin'
       password = <insert password for your admin user (default: admin)>

   .. code-tab:: ruby

       url = <insert server URL>
       db = <insert database name>
       username = "admin"
       password = <insert password for your admin user (default: admin)>

   .. code-tab:: php

       $url = <insert server URL>;
       $db = <insert database name>;
       $username = "admin";
       $password = <insert password for your admin user (default: admin)>;

   .. code-tab:: java

       final String url = <insert server URL>,
                     db = <insert database name>,
               username = "admin",
               password = <insert password for your admin user (default: admin)>;

.. _api/external_api/keys:

API Keys
~~~~~~~~

OpenSPP has support for **api keys** and (depending on modules or settings) may
**require** these keys to perform webservice operations.

The way to use API Keys in your scripts is to simply replace your **password**
by the key. The login remains in-use. You should store the API Key as carefully
as the password as they essentially provide the same access to your user
account (although they can not be used to log-in via the interface).

.. important::
    As API keys give the same access as your password, it is recommended to
    create a dedicated user for the API, and to only give it the rights it
    needs to perform its tasks.

In order to add a key to your account, simply go to your
:guilabel:`Preferences` (or :guilabel:`My Profile`):

.. image:: external_api/1.png
   :align: center

then open the :guilabel:`Account Security` tab, and click
:guilabel:`New API Key`:

.. image:: external_api/2.png
   :align: center

Input a description for the key, **this description should be as clear and
complete as possible**: it is the only way you will have to identify your keys
later and know whether you should remove them or keep them around.

Click :guilabel:`Generate Key`, then copy the key provided. **Store this key
carefully**: it is equivalent to your password, and just like your password
the system will not be able to retrieve or show the key again later on. If you lose
this key, you will have to create a new one (and probably delete the one you
lost).

Once you have keys configured on your account, they will appear above the
:guilabel:`New API Key` button, and you will be able to delete them:

.. image:: external_api/3.png
   :align: center

**A deleted API key can not be undeleted or re-set**. You will have to generate
a new key and update all the places where you used the old one.

Test database
~~~~~~~~~~~~~

To make exploration simpler, you can also ask https://demo.openspp.org for a test
database:

.. tabs::

   .. code-tab:: python

      import xmlrpc.client
      info = xmlrpc.client.ServerProxy('https://demo.openspp.org/start').start()
      url, db, username, password = info['host'], info['database'], info['user'], info['password']

   .. code-tab:: ruby

      require "xmlrpc/client"
      info = XMLRPC::Client.new2('https://demo.openspp.org/start').call('start')
      url, db, username, password = info['host'], info['database'], info['user'], info['password']

   .. group-tab:: PHP

      .. code-block:: php

         require_once('ripcord.php');
         $info = ripcord::client('https://demo.openspp.org/start')->start();
         list($url, $db, $username, $password) = array($info['host'], $info['database'], $info['user'], $info['password']);

      .. note::
         These examples use the `Ripcord <https://code.google.com/p/ripcord/>`_
         library, which provides a simple XML-RPC API. Ripcord requires that
         `XML-RPC support be enabled
         <https://php.net/manual/en/xmlrpc.installation.php>`_ in your PHP
         installation.

         Since calls are performed over
         `HTTPS <https://en.wikipedia.org/wiki/HTTP_Secure>`_, it also requires that
         the `OpenSSL extension
         <https://php.net/manual/en/openssl.installation.php>`_ be enabled.

   .. group-tab:: Java

      .. code-block:: java

         final XmlRpcClient client = new XmlRpcClient();

         final XmlRpcClientConfigImpl start_config = new XmlRpcClientConfigImpl();
         start_config.setServerURL(new URL("https://demo.openspp.org/start"));
         final Map<String, String> info = (Map<String, String>)client.execute(
             start_config, "start", emptyList());

         final String url = info.get("host"),
                       db = info.get("database"),
                 username = info.get("user"),
                 password = info.get("password");

      .. note::
         These examples use the `Apache XML-RPC library <https://ws.apache.org/xmlrpc/>`_.

         The examples do not include imports as these imports couldn't be
         pasted in the code.

Logging in
----------

OpenSPP requires users of the API to be authenticated before they can query most
data.

The ``xmlrpc/2/common`` endpoint provides meta-calls which don't require
authentication, such as the authentication itself or fetching version
information. To verify if the connection information is correct before trying
to authenticate, the simplest call is to ask for the server's version. The
authentication itself is done through the ``authenticate`` function and
returns a user identifier (``uid``) used in authenticated calls instead of
the login.

.. tabs::

   .. code-tab:: python

      common = xmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))
      common.version()

   .. code-tab:: ruby

      common = XMLRPC::Client.new2("#{url}/xmlrpc/2/common")
      common.call('version')

   .. code-tab:: php

      $common = ripcord::client("$url/xmlrpc/2/common");
      $common->version();

   .. code-tab:: java

      final XmlRpcClientConfigImpl common_config = new XmlRpcClientConfigImpl();
      common_config.setServerURL(new URL(String.format("%s/xmlrpc/2/common", url)));
      client.execute(common_config, "version", emptyList());

Result:

.. code-block:: json

   {
       "server_version": "17.0",
       "server_version_info": [17, 0, 0, "final", 0],
       "server_serie": "17.0",
       "protocol_version": 1,
   }


.. tabs::

   .. code-tab:: python

      uid = common.authenticate(db, username, password, {})

   .. code-tab:: ruby

      uid = common.call('authenticate', db, username, password, {})

   .. code-tab:: php

      $uid = $common->authenticate($db, $username, $password, array());

   .. code-tab:: java

      int uid = (int)client.execute(common_config, "authenticate", asList(db, username, password, emptyMap()));

.. _api/external_api/calling_methods:

Calling methods
===============

The second endpoint is ``xmlrpc/2/object``. It is used to call methods of OpenSPP
models via the ``execute_kw`` RPC function.

Each call to ``execute_kw`` takes the following parameters:

* the database to use, a string
* the user id (retrieved through ``authenticate``), an integer
* the user's :term:`api key`, a string
* the model name, a string
* the method name, a string
* an array/list of parameters passed by position
* a mapping/dict of parameters to pass by keyword (optional)

.. note::

   For instance, to see if we can read the ``res.partner`` model, we can call
   ``check_access_rights`` with ``operation`` passed by position and
   ``raise_exception`` passed by keyword (in order to get a true/false result
   rather than true/error):

   .. tabs::

      .. code-tab:: python

         models = xmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))
         models.execute_kw(db, uid, password, 'res.partner', 'check_access_rights', ['read'], {'raise_exception': False})

      .. code-tab:: ruby

         models = XMLRPC::Client.new2("#{url}/xmlrpc/2/object").proxy
         models.execute_kw(db, uid, password, 'res.partner', 'check_access_rights', ['read'], {raise_exception: false})

      .. code-tab:: php

         $models = ripcord::client("$url/xmlrpc/2/object");
         $models->execute_kw($db, $uid, $password, 'res.partner', 'check_access_rights', array('read'), array('raise_exception' => false));

      .. code-tab:: java

         final XmlRpcClient models = new XmlRpcClient() {{
             setConfig(new XmlRpcClientConfigImpl() {{
                 setServerURL(new URL(String.format("%s/xmlrpc/2/object", url)));
             }});
         }};
         models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "check_access_rights",
             asList("read"),
             new HashMap() {{ put("raise_exception", false); }}
         ));

   Result:

   .. code-block:: json

      true

List records
------------

Records can be listed and filtered via :meth:`~odoo.models.Model.search`.

:meth:`~odoo.models.Model.search` takes a mandatory
:ref:`domain <reference/orm/domains>` filter (possibly empty), and returns the
database identifiers of all records matching the filter.

.. note::

   To list customer companies, for instance:

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]])

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]])

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))));

      .. code-tab:: java

         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "search",
             asList(asList(
                 asList("is_company", "=", true)))
         )));

   Result:

   .. code-block:: json

      [7, 18, 12, 14, 17, 19, 8, 31, 26, 16, 13, 20, 30, 22, 29, 15, 23, 28, 74]

Pagination
~~~~~~~~~~

By default a search will return the ids of all records matching the
condition, which may be a huge number. ``offset`` and ``limit`` parameters are
available to only retrieve a subset of all matched records.

.. note::

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]], {'offset': 10, 'limit': 5})

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]], {offset: 10, limit: 5})

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))), array('offset'=>10, 'limit'=>5));

      .. code-tab:: java

         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "search",
             asList(asList(
                 asList("is_company", "=", true))),
             new HashMap() {{ put("offset", 10); put("limit", 5); }}
         )));

   Result:

   .. code-block:: json

      [13, 20, 30, 22, 29]

Count records
-------------

Rather than retrieve a possibly gigantic list of records and count them,
:meth:`~odoo.models.Model.search_count` can be used to retrieve
only the number of records matching the query. It takes the same
:ref:`domain <reference/orm/domains>` filter as
:meth:`~odoo.models.Model.search` and no other parameter.

.. note::

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'search_count', [[['is_company', '=', True]]])

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'search_count', [[['is_company', '=', true]]])

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'search_count', array(array(array('is_company', '=', true))));

      .. code-tab:: java

         (Integer)models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "search_count",
             asList(asList(
                 asList("is_company", "=", true)))
         ));

   Result:

   .. code-block:: json

      19

.. note::
   Calling ``search`` then ``search_count`` (or the other way around) may not
   yield coherent results if other users are using the server: stored data
   could have changed between the calls.

Read records
------------

Record data are accessible via the :meth:`~odoo.models.Model.read` method,
which takes a list of ids (as returned by
:meth:`~odoo.models.Model.search`), and optionally a list of fields to
fetch. By default, it fetches all the fields the current user can read,
which tends to be a huge amount.

.. note::

   .. tabs::

      .. code-tab:: python

          ids = models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', True]]], {'limit': 1})
          [record] = models.execute_kw(db, uid, password, 'res.partner', 'read', [ids])
          # count the number of fields fetched by default
          len(record)

      .. code-tab:: ruby

          ids = models.execute_kw(db, uid, password, 'res.partner', 'search', [[['is_company', '=', true]]], {limit: 1})
          record = models.execute_kw(db, uid, password, 'res.partner', 'read', [ids]).first
          # count the number of fields fetched by default
          record.length

      .. code-tab:: php

          $ids = $models->execute_kw($db, $uid, $password, 'res.partner', 'search', array(array(array('is_company', '=', true))), array('limit'=>1));
          $records = $models->execute_kw($db, $uid, $password, 'res.partner', 'read', array($ids));
          // count the number of fields fetched by default
          count($records[0]);

      .. code-tab:: java

          final List ids = asList((Object[])models.execute(
              "execute_kw", asList(
                  db, uid, password,
                  "res.partner", "search",
                  asList(asList(
                      asList("is_company", "=", true))),
                  new HashMap() {{ put("limit", 1); }})));
          final Map record = (Map)((Object[])models.execute(
              "execute_kw", asList(
                  db, uid, password,
                  "res.partner", "read",
                  asList(ids)
              )
          ))[0];
          // count the number of fields fetched by default
          record.size();

   Result:

   .. code-block:: json

      121

   Conversely, picking only three fields deemed interesting.

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {'fields': ['name', 'country_id', 'comment']})

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'read', [ids], {fields: %w(name country_id comment)})

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'read', array($ids), array('fields'=>array('name', 'country_id', 'comment')));

      .. code-tab:: java

         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "read",
             asList(ids),
             new HashMap() {{
                 put("fields", asList("name", "country_id", "comment"));
             }}
         )));

   Result:

   .. code-block:: json

      [{"comment": false, "country_id": [21, "Belgium"], "id": 7, "name": "Agrolait"}]

.. note::
   Even if the ``id`` field is not requested, it is always returned.

List record fields
------------------

:meth:`~odoo.models.Model.fields_get` can be used to inspect
a model's fields and check which ones seem to be of interest.

Because it returns a large amount of meta-information (it is also used by client
programs) it should be filtered before printing, the most interesting items
for a human user are ``string`` (the field's label), ``help`` (a help text if
available) and ``type`` (to know which values to expect, or to send when
updating a record).

.. note::

   .. tabs::

       .. code-tab:: python

           models.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {'attributes': ['string', 'help', 'type']})

       .. code-tab:: ruby

           models.execute_kw(db, uid, password, 'res.partner', 'fields_get', [], {attributes: %w(string help type)})

       .. code-tab:: php

           $models->execute_kw($db, $uid, $password, 'res.partner', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')));

       .. code-tab:: java

           (Map<String, Map<String, Object>>)models.execute("execute_kw", asList(
               db, uid, password,
               "res.partner", "fields_get",
               emptyList(),
               new HashMap() {{
                   put("attributes", asList("string", "help", "type"));
               }}
           ));

   Result:

   .. code-block:: json

      {
          "ean13": {
              "type": "char",
              "help": "BarCode",
              "string": "EAN13"
          },
          "property_account_position_id": {
              "type": "many2one",
              "help": "The fiscal position will determine taxes and accounts used for the partner.",
              "string": "Fiscal Position"
          },
          "signup_valid": {
              "type": "boolean",
              "help": "",
              "string": "Signup Token is Valid"
          },
          "date_localization": {
              "type": "date",
              "help": "",
              "string": "Geo Localization Date"
          },
          "ref_company_ids": {
              "type": "one2many",
              "help": "",
              "string": "Companies that refers to partner"
          },
          "sale_order_count": {
              "type": "integer",
              "help": "",
              "string": "# of Sales Order"
          },
          "purchase_order_count": {
              "type": "integer",
              "help": "",
              "string": "# of Purchase Order"
          },

Search and read
---------------

Because it is a very common task, OpenSPP provides a
:meth:`~odoo.models.Model.search_read` shortcut which, as its name suggests, is
equivalent to a :meth:`~odoo.models.Model.search` followed by a
:meth:`~odoo.models.Model.read`, but avoids having to perform two requests
and keep ids around.

Its arguments are similar to :meth:`~odoo.models.Model.search`'s, but it
can also take a list of ``fields`` (like :meth:`~odoo.models.Model.read`,
if that list is not provided it will fetch all fields of matched records).

.. note::

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', True]]], {'fields': ['name', 'country_id', 'comment'], 'limit': 5})

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'search_read', [[['is_company', '=', true]]], {fields: %w(name country_id comment), limit: 5})

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'search_read', array(array(array('is_company', '=', true))), array('fields'=>array('name', 'country_id', 'comment'), 'limit'=>5));

      .. code-tab:: java

         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "search_read",
             asList(asList(
                 asList("is_company", "=", true))),
             new HashMap() {{
                 put("fields", asList("name", "country_id", "comment"));
                 put("limit", 5);
             }}
         )));

   Result:

   .. code-block:: json

      [
          {
              "comment": false,
              "country_id": [ 21, "Belgium" ],
              "id": 7,
              "name": "Agrolait"
          },
          {
              "comment": false,
              "country_id": [ 76, "France" ],
              "id": 18,
              "name": "Axelor"
          },
          {
              "comment": false,
              "country_id": [ 233, "United Kingdom" ],
              "id": 12,
              "name": "Bank Wealthy and sons"
          },
          {
              "comment": false,
              "country_id": [ 105, "India" ],
              "id": 14,
              "name": "Best Designers"
          },
          {
              "comment": false,
              "country_id": [ 76, "France" ],
              "id": 17,
              "name": "Camptocamp"
          }
      ]

Create records
--------------

Records of a model are created using :meth:`~odoo.models.Model.create`. The
method creates a single record and returns its database identifier.

:meth:`~odoo.models.Model.create` takes a mapping of fields to values, used
to initialize the record. For any field which has a default value and is not
set through the mapping argument, the default value will be used.

.. note::

   .. tabs::

      .. code-tab:: python

         id = models.execute_kw(db, uid, password, 'res.partner', 'create', [{'name': "New Partner"}])

      .. code-tab:: ruby

         id = models.execute_kw(db, uid, password, 'res.partner', 'create', [{name: "New Partner"}])

      .. code-tab:: php

         $id = $models->execute_kw($db, $uid, $password, 'res.partner', 'create', array(array('name'=>"New Partner")));

      .. code-tab:: java

         final Integer id = (Integer)models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "create",
             asList(new HashMap() {{ put("name", "New Partner"); }})
         ));

   Result:

   .. code-block:: json

      78

.. warning::
   While most value types are what would expect (integer for
   :class:`~odoo.fields.Integer`, string for :class:`~odoo.fields.Char`
   or :class:`~odoo.fields.Text`),

   - :class:`~odoo.fields.Date`, :class:`~odoo.fields.Datetime` and
     :class:`~odoo.fields.Binary` fields use string values
   - :class:`~odoo.fields.One2many` and :class:`~odoo.fields.Many2many`
     use a special command protocol detailed in :meth:`the documentation to
     the write method <odoo.models.Model.write>`.

Update records
--------------

Records can be updated using :meth:`~odoo.models.Model.write`. It takes
a list of records to update and a mapping of updated fields to values similar
to :meth:`~odoo.models.Model.create`.

Multiple records can be updated simultaneously, but they will all get the same
values for the fields being set. It is not possible to perform
"computed" updates (where the value being set depends on an existing value of
a record).

.. note::

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {'name': "Newer partner"}])
         # get record name after having changed it
         models.execute_kw(db, uid, password, 'res.partner', 'name_get', [[id]])

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'write', [[id], {name: "Newer partner"}])
         # get record name after having changed it
         models.execute_kw(db, uid, password, 'res.partner', 'name_get', [[id]])

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'write', array(array($id), array('name'=>"Newer partner")));
         // get record name after having changed it
         $models->execute_kw($db, $uid, $password,
             'res.partner', 'name_get', array(array($id)));

      .. code-tab:: java

         models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "write",
             asList(
                 asList(id),
                 new HashMap() {{ put("name", "Newer Partner"); }}
             )
         ));
         // get record name after having changed it
         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "name_get",
             asList(asList(id))
         )));

   Result:

   .. code-block:: json

      [[78, "Newer partner"]]

Delete records
--------------

Records can be deleted in bulk by providing their ids to
:meth:`~odoo.models.Model.unlink`.

.. note::

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])
         # check if the deleted record is still in the database
         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'res.partner', 'unlink', [[id]])
         # check if the deleted record is still in the database
         models.execute_kw(db, uid, password, 'res.partner', 'search', [[['id', '=', id]]])

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'res.partner', 'unlink', array(array($id)));
         // check if the deleted record is still in the database
         $models->execute_kw(
             $db, $uid, $password, 'res.partner', 'search', array(array(array('id', '=', $id)))
         );

      .. code-tab:: java

         models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "unlink",
             asList(asList(id))));
         // check if the deleted record is still in the database
         asList((Object[])models.execute("execute_kw", asList(
             db, uid, password,
             "res.partner", "search",
             asList(asList(asList("id", "=", 78)))
         )));

   Result:

   .. code-block:: json

      []

Inspection and introspection
----------------------------

While we previously used :meth:`~odoo.models.Model.fields_get` to query a
model and have been using an arbitrary model from the start, OpenSPP stores
most model metadata inside a few meta-models which allow both querying the
system and altering models and fields (with some limitations) on the fly over
XML-RPC.

.. _reference/webservice/inspection/models:

``ir.model``
~~~~~~~~~~~~

Provides information about OpenSPP models via its various fields.

``name``
    a human-readable description of the model
``model``
    the name of each model in the system
``state``
    whether the model was generated in Python code (``base``) or by creating
    an ``ir.model`` record (``manual``)
``field_id``
    list of the model's fields through a :class:`~odoo.fields.One2many` to
    :ref:`reference/webservice/inspection/fields`
``view_ids``
    :class:`~odoo.fields.One2many` to the :ref:`reference/views` defined
    for the model
``access_ids``
    :class:`~odoo.fields.One2many` relation to the
    :ref:`reference/security/acl` set on the model

``ir.model`` can be used to

- Query the system for installed models (as a precondition to operations
  on the model or to explore the system's content).
- Get information about a specific model (generally by listing the fields
  associated with it).
- Create new models dynamically over RPC.

.. important::
   * Custom model names must start with ``x_``.
   * The ``state`` must be provided and set to ``manual``, otherwise the model will
     not be loaded.
   * It is not possible to add new *methods* to a custom model, only fields.

.. note::

   A custom model will initially contain only the "built-in" fields available
   on all models:

   .. tabs::

      .. code-tab:: python

         models.execute_kw(db, uid, password, 'ir.model', 'create', [{
             'name': "Custom Model",
             'model': "x_custom_model",
             'state': 'manual',
         }])
         models.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {'attributes': ['string', 'help', 'type']})

      .. code-tab:: php

         $models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(
             'name' => "Custom Model",
             'model' => 'x_custom_model',
             'state' => 'manual'
         )));
         $models->execute_kw($db, $uid, $password, 'x_custom_model', 'fields_get', array(), array('attributes' => array('string', 'help', 'type')));

      .. code-tab:: ruby

         models.execute_kw(db, uid, password, 'ir.model', 'create', [{
             name: "Custom Model",
             model: 'x_custom_model',
             state: 'manual'
         }])
         fields = models.execute_kw(db, uid, password, 'x_custom_model', 'fields_get', [], {attributes: %w(string help type)})

      .. code-tab:: java

         models.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "ir.model", "create",
                 asList(new HashMap<String, Object>() {{
                     put("name", "Custom Model");
                     put("model", "x_custom_model");
                     put("state", "manual");
                 }})
         ));
         final Object fields = models.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "x_custom_model", "fields_get",
                 emptyList(),
                 new HashMap<String, Object> () {{
                     put("attributes", asList(
                             "string",
                             "help",
                             "type"));
                 }}
         ));

   Result:

   .. code-block:: json

      {
          "create_uid": {
              "type": "many2one",
              "string": "Created by"
          },
          "create_date": {
              "type": "datetime",
              "string": "Created on"
          },
          "__last_update": {
              "type": "datetime",
              "string": "Last Modified on"
          },
          "write_uid": {
              "type": "many2one",
              "string": "Last Updated by"
          },
          "write_date": {
              "type": "datetime",
              "string": "Last Updated on"
          },
          "display_name": {
              "type": "char",
              "string": "Display Name"
          },
          "id": {
              "type": "integer",
              "string": "Id"
          }
      }

.. _reference/webservice/inspection/fields:

``ir.model.fields``
~~~~~~~~~~~~~~~~~~~

Provides information about the fields of OpenSPP models and allows adding
custom fields without using Python code.

``model_id``
    :class:`~odoo.fields.Many2one` to
    :ref:`reference/webservice/inspection/models` to which the field belongs
``name``
    the field's technical name (used in ``read`` or ``write``)
``field_description``
    the field's user-readable label (e.g. ``string`` in ``fields_get``)
``ttype``
    the :ref:`type <reference/orm/fields>` of field to create
``state``
    whether the field was created via Python code (``base``) or via
    ``ir.model.fields`` (``manual``)
``required``, ``readonly``, ``translate``
    enables the corresponding flag on the field
``groups``
    :ref:`field-level access control <reference/security/fields>`, a
    :class:`~odoo.fields.Many2many` to ``res.groups``
``selection``, ``size``, ``on_delete``, ``relation``, ``relation_field``, ``domain``
    type-specific properties and customizations, see :ref:`the fields
    documentation <reference/orm/fields>` for details

.. important::
   - Like custom models, only new fields created with ``state="manual"`` are activated as actual
     fields on the model.
   - Computed fields can not be added via ``ir.model.fields``, some field meta-information
     (defaults, onchange) can not be set either.

.. note::

   .. tabs::

      .. code-tab:: python

         id = models.execute_kw(db, uid, password, 'ir.model', 'create', [{
             'name': "Custom Model",
             'model': "x_custom",
             'state': 'manual',
         }])
         models.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{
             'model_id': id,
             'name': 'x_name',
             'ttype': 'char',
             'state': 'manual',
             'required': True,
         }])
         record_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{'x_name': "test record"}])
         models.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])

      .. code-tab:: php

         $id = $models->execute_kw($db, $uid, $password, 'ir.model', 'create', array(array(
             'name' => "Custom Model",
             'model' => 'x_custom',
             'state' => 'manual'
         )));
         $models->execute_kw($db, $uid, $password, 'ir.model.fields', 'create', array(array(
             'model_id' => $id,
             'name' => 'x_name',
             'ttype' => 'char',
             'state' => 'manual',
             'required' => true
         )));
         $record_id = $models->execute_kw($db, $uid, $password, 'x_custom', 'create', array(array('x_name' => "test record")));
         $models->execute_kw($db, $uid, $password, 'x_custom', 'read', array(array($record_id)));

      .. code-tab:: ruby

         id = models.execute_kw(db, uid, password, 'ir.model', 'create', [{
             name: "Custom Model",
             model: "x_custom",
             state: 'manual'
         }])
         models.execute_kw(db, uid, password, 'ir.model.fields', 'create', [{
             model_id: id,
             name: "x_name",
             ttype: "char",
             state: "manual",
             required: true
         }])
         record_id = models.execute_kw(db, uid, password, 'x_custom', 'create', [{x_name: "test record"}])
         models.execute_kw(db, uid, password, 'x_custom', 'read', [[record_id]])

      .. code-tab:: java

         final Integer id = (Integer)models.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "ir.model", "create",
                 asList(new HashMap<String, Object>() {{
                     put("name", "Custom Model");
                     put("model", "x_custom");
                     put("state", "manual");
                 }})
         ));
         models.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "ir.model.fields", "create",
                 asList(new HashMap<String, Object>() {{
                     put("model_id", id);
                     put("name", "x_name");
                     put("ttype", "char");
                     put("state", "manual");
                     put("required", true);
                 }})
         ));
         final Integer record_id = (Integer)models.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "x_custom", "create",
                 asList(new HashMap<String, Object>() {{
                     put("x_name", "test record");
                 }})
         ));

         client.execute(
             "execute_kw", asList(
                 db, uid, password,
                 "x_custom", "read",
                 asList(asList(record_id))
         ));

   Result:

   .. code-block:: json

      [
          {
              "create_uid": [1, "Administrator"],
              "x_name": "test record",
              "__last_update": "2014-11-12 16:32:13",
              "write_uid": [1, "Administrator"],
              "write_date": "2014-11-12 16:32:13",
              "create_date": "2014-11-12 16:32:13",
              "id": 1,
              "display_name": "test record"
          }
      ]


.. note::
   This page is adapted from the Odoo documentation on :doc:`odoo:developer/reference/external_api`.




.. _PostgreSQL: https://www.postgresql.org
.. _XML-RPC: https://en.wikipedia.org/wiki/XML-RPC
.. _base64: https://en.wikipedia.org/wiki/Base64
</file>

<file path="docs/developer_guide/api_usage/index.md">
# API Usage

This section contains guides for using OpenSPP APIs.

```{toctree}
:maxdepth: 2
:caption: Contents

rest_api
external_api_xmlrpc
```
</file>

<file path="docs/developer_guide/api_usage/rest_api.md">
# Customize REST API

The following article guides the reader to understand how the REST API module will work in OpenSPP and how it can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html)

## If the REST API module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for “OpenSPP REST API: API Records” and initiate installation. This will also install the other modules required.

![](./rest_api/1.png)

## Customize REST API

In this hypothetical scenario, the REST API will be customized to add an GET endpoint to respond with Area data.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_api_records_custom).

The key steps in module development are as follows:

1. To customize REST API, a new module can be developed.
2. To initiate the development of a custom module for REST API customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
   "depends": [
       "spp_api_records",
   ],
```

3. To integrate new endpoint and the response data needed into the system, the following steps should be followed. Create a new file called `data/spp_api_path_data.xml` in the module and add the below code to the manifest file.

```python
   "data": [
       "data/spp_api_path_data.xml",
   ],
```

The following code can be added to the `spp_api_path_data.xml` file to create a new endpoint.

```xml
   <record id="area_path" model="spp_api.path">
       <field name="name">Area</field>
       <field name="model_id" ref="spp_area.model_spp_area" />
       <field name="namespace_id" ref="spp_api_records.spp_api_namespace" />
       <field name="description">GET Area</field>
       <field name="method">get</field>
       <field
           name="field_ids"
           eval="[(
           6, 0, [
               ref('spp_area.field_spp_area__parent_id'),
               ref('spp_area.field_spp_area__name'),
               ref('spp_area.field_spp_area__draft_name'),
               ref('spp_area.field_spp_area__code'),
           ]
       )]"
       />
   </record>
```

The above code will create a new record for the model `spp_api.path` with the information about the endpoint’s model, fields, and HTTP method.

4. Now install the new module.

The following screenshot shows the response data after sending the request using Postman. The URL used here is `http://localhost:8069/api/spp_api/1/Area?request_id=12345` but it may differ based on your configuration in your local development environment.

NOTE: `request_id` parameter is required and should be unique. Else the response will return an error.

Successful Response

![](./rest_api/2.png)

Error Response

![](./rest_api/3.png)
</file>

<file path="docs/developer_guide/customization/customizing_areas.md">
# Customize Areas

The following article guides the reader in understanding how the area module will work in OpenSPP and how it can be customized by providing a sample scenario and a working example. The area module is used to set up the administration areas in OpenSPP, which can be used in programs and other modules.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html).

## If the Area module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for “Area” and initiate installation. This will also install the other modules required.

![](custom_areas/1.png)

## Utilizing the Area Module

For more detailed guidance on utilizing the Area module in OpenSPP, please refer to the information available at the provided link which will be publish soon.

## Customize Area

In a hypothetical scenario, customizing the areas module to include the population of the created areas serves as a practical example. This could involve recording the population of an area such as province or district, providing valuable insights for reporting and dashboard analysis.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_custom_area).

The key steps in module development are as follows:

1. To customize areas, a new module can be developed.
2. To initiate the development of a custom module for area customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
 "depends": [
       "spp_area",
   ],
")
```

3. To add the new field in the new module, develop a Python file named `area.py` that extends `spp.area` and incorporate this file into `models/init.py`. The definition of the population fields should be implemented as demonstrated below.

```python
class SPPArea(models.Model):
   _inherit = "spp.area"

   population = fields.Integer()

```

The code mentioned above will introduce a new field to the spp_area table for storing the province name of an area. To understand further, refer to the following documentation [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/13_other_module.html), [Link 3](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html)

4. To integrate new fields into the UI, the following steps should be followed.

   - Create a new file called `views/custom_area_view.xml` in the module
   - Add the below code to the manifest file.

   ```python
   "data": [
       "views/custom_area_view.xml",
   ],

   ```

   - The following code can be added to the custom_area_view.xml file to show the province name in the UI.

     ```xml
     <record id="spp_area_view_form_inherit" model="ir.ui.view">
       <field name="name">spp.area.view.form.inherit</field>
       <field name="model">spp.area</field>
       <field name="inherit_id" ref="spp_area.view_spparea_form" />
       <field name="arch" type="xml">
           <xpath expr="//field[@name='kind']" position="after">
               <field name="population" />
           </xpath>
       </field>
     </record>
     ```

   Further references [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/06_basicviews.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/reference/user_interface/view_records.html)

5. Install the module to include the new changes, then apply these updates through the backend App by selecting 'Update' in the Area module.

The following screenshot shows the added field population in the newly developed module.

![](custom_areas/2.png)
</file>

<file path="docs/developer_guide/customization/customizing_audit.md">
# Customize Audit Logs

The following article guides the reader in understanding how the existing audit module can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html).

## If the Audit module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search and initiate installation of the following modules, this process will also install all of their associated modules:

   - SPP Audit Config
   - SPP Audit Log
   - SPP Audit Post

![](custom_audit/0.png)

## Utilising the Audit Log Module

1. Click on the “Audit Log” main menu to see the audit rules. You will see that the audit rules are already in place. They are created when installing the module “SPP Audit Config”.

2. If you want to add a new rule, you can click the "Create" button to add new rules.

3. To test the audit rule, go to Individual or Group Registry.

4. Create or Update a record from the Registry.

5. You will see that an audit log will show in the bottom part of the page indicating the fields that were changed and their corresponding old and new values as shown below.

   ![](./custom_audit/1.png)

6. Further, all audit logs can be viewed by accessing the "Audit Log" main menu, followed by the Audit -> Log menu item. This page displays audit logs from every model indicated in the audit rules.

   ![](custom_audit/2.png)

7. Audit logs for specific records can be accessed by selecting a record from the Individual or Group Registry, clicking "Action," and then choosing "View Logs."

   ![](./custom_audit/3.png)

Note that when you add an audit rule to a model, it effectively patches a specialized function into the model's key events - create, write, and unlink. This function operates as a gatekeeper, first verifying if an audit rule is set for the specific model, then determining which events to log and fields to display in the audit log.

## Customise Audit Log Module

In this hypothetical scenario, we are customizing the audit module to include the active field of a rule serves as a practical example.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_audit_log_custom).

The key steps in module development are as follows:

1. To customize audit module, a new module can be developed.

2. To initiate the development of a custom module for audit module customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
"depends": [
    "spp_audit_log",
],
```

3. To add the new field in the new module, develop a Python file named `spp_audit_rule.py` that extends `spp.audit.rule` and incorporate this file into `models/init.py`. The definition of the active field should be implemented as demonstrated below.

```python
from odoo import api, fields, models

class CustomAuditRule(models.Model):
   _inherit = "spp.audit.rule"

   active = fields.Boolean(default=True)
```

The code mentioned above will introduce a new field to the `spp_audit_rule` table for storing the state of a rule. To understand further, refer to the following documentation [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/13_other_module.html), [Link 3](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html)

4. To integrate new fields into the UI, the following steps should be followed. Create a new file called `views/spp_audit_rule_views.xml` in the module. Add the below code to the manifest file.

```python
"data": [
    "views/spp_audit_rule_views.xml",
],
```

5. The following code can be added to the `spp_audit_rule_views.xml` file to show the active checkbox in the UI.

```xml
 <record id="view_custom_audit_log_form" model="ir.ui.view">
   <field name="name">view_custom_audit_log_form</field>
   <field name="model">spp.audit.rule</field>
   <field name="inherit_id" ref="spp_audit_log.spp_audit_rule_form" />
   <field name="arch" type="xml">
     <xpath expr="//field[@name='name']" position="before">
       <field name="active" />
     </xpath>
   </field>
 </record>
```

6. Install the module to include the new changes.

The following screenshot shows the added field population in the newly developed module.

![](custom_audit/4.png)
</file>

<file path="docs/developer_guide/customization/customizing_change_requests.md">
# Customize Change Request

The following article guides the reader in understanding how the change request module will work in OpenSPP and how it can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html)

## If the Change Request module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for “OpenSPP Change Request” and initiate installation.

![](custom_cr/change_request_module_in_apps.png)

## Utilizing the Area Module

For more detailed guidance on utilizing the Change Request module in OpenSPP, please refer to the information available at the provided link which will be publish soon.

## Customise Change Request

1. If a new Change Request is required to be added, Select “Change Request” menu.
2. Click on the Create button to add a new Change Request, ensuring all required fields are completed.
3. At this point, the Request Type dropdown field does not have any values yet since there is still no new module for the request type.

![](custom_cr/blank_request_type.png)

4. To customize change requests, a new module can be developed.
5. To initiate the development of a custom module for change request customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
 "depends": [
       "spp_change_request",
   ],
")
```

6. To add a value to the Request Type dropdown field, create a new model with the file name `models/change_request_add_children.py` for the request type and inherit the mixins `spp.change.request.source.mixin` and `spp.change.request.validation.sequence.mixin`.

```python
class ChangeRequestAddChildren(models.Model):
   _name = "spp.change.request.add.children"
   _inherit = [
       "spp.change.request.source.mixin",
       "spp.change.request.validation.sequence.mixin",
   ]
   _description = "Add Child/Member Change Request Type"
   _order = "id desc"
```

7. This is an example of request type to add a child in a family
8. In the same model, the following code can be added to add fields and functions to the newly created model that corresponds to the requirements of that particular request type.

```python
class ChangeRequestAddChildren(models.Model):
   _name = "spp.change.request.add.children"
   ...

   full_name = fields.Char(compute="_compute_full_name", readonly=True)
   family_name = fields.Char()
   given_name = fields.Char()
   addl_name = fields.Char("Additional Name")

   @api.depends("given_name", "addl_name", "family_name")
   def _compute_full_name(self):
       for rec in self:
           full_name = (
               f"{rec.family_name or ''}, {rec.given_name or ''}"
               f" {rec.addl_name or ''}"
           )
           rec.full_name = full_name.title()

```

9. In the same file, Inherit model `spp.change.request` then extend the function `_selection_request_type_ref_id` to add the newly created request type model to the Request Type dropdown field.

```python
class ChangeRequestTypeCustomAddChildren(models.Model):
   _inherit = "spp.change.request"

   @api.model
   def _selection_request_type_ref_id(self):
       selection = super()._selection_request_type_ref_id()
       new_request_type = ("spp.change.request.add.children", "Add Child/Member")
       if new_request_type not in selection:
           selection.append(new_request_type)
       return selection

```

10. Make sure that the python file where the newly created model and the inherited model is already added in the `models/__init__.py`. To understand more about these. Refer to the following links [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html)

11. In the view, create a file `views/change_request_add_children_view.xml` and add the following views.

- Tree View - shows the list of change request records
- Form View - form view of a particular change request type record where information will be added
- Validation Form View - form view where the validator can see and validate the change request
- Pending Validation Tree View - shows the list of change request that is in pending validation state

Refer to the `change_request_add_children_view.xml` to understand how the views are created

- the record id “view_change_request_add_children_tree” is the Tree View
- the record id “view_change_request_add_children_form” is the Form View
- the record id “view_change_request_add_children_validation_form” is the Validation Form View
- the record id “action_change_request_add_children_pending” is the Pending Validation Tree View

12. Add the below code to the manifest file.

```python
   "data": [
       "views/change_request_add_children_view.xml",
   ],
```

13. Navigate to the “Apps” Menu from the dashboard to manage OpenSPP modules. Choose “Update Apps List” to refresh the module list. Search for the newly created module and initiate installation.

14. Navigate again to the Change Request page and a new value to the Request Type dropdown field is now added.

![](custom_cr/with_request_type.png)

15. After filling-up the fields, click the Create button to create the change request record.

![](custom_cr/request_form_view.png)

A working sample module for the described above can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_change_request_add_children) which is a comprehensive module with addional functionalities.
</file>

<file path="docs/developer_guide/customization/customizing_cycles.md">
# Customize Cycle

This guide provides a structured approach for implementing and customising the cycle in OpenSPP through the development of a custom module.

## Prerequisites

- Knowledge in Python, Odoo, OOP, HTML, XML, Xpaths.
- A functional OpenSPP installation.
- Administrative access to the OpenSPP backend.

## Odoo Setup from Docker using doodba

- Existence of openg2p_program folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: g2p_programs.
- Existence of openg2p_registry folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- vailability of modules: g2p_registry_base, g2p_registry_individual, g2p_registry_group, g2p_registry_membership, g2p_bank.
- Existence of queue folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: queue_job
- Existence of web folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: web, web_domain_field.

## Odoo Setup from source

- Existence of openg2p-program folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, clone the repository from [here](https://github.com/OpenG2P/openg2p-program.git) into odoo/custom, navigate to the openg2p-program folder, and switch to the specified branch.
- Availability of modules: g2p_programs.
- Existence of openg2p-registry folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, clone the repository from [here](https://github.com/OpenG2P/openg2p-registry.git) into odoo/custom, navigate to the openg2p-program folder, and switch to the specified branch.
- Availability of modules: g2p_registry_base, g2p_registry_individual, g2p_registry_group, g2p_registry_membership, g2p_bank.
- Existence of queue folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, clone the repository from [here](https://github.com/OCA/queue.git) into odoo/custom, navigate to the queue, and switch to the specified branch.
- Availability of modules: queue_job.
- Existence of web folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, clone the repository from [here](https://github.com/OCA/web.git) into odoo/custom, navigate to the web, and switch to the specified branch.
- Availability of modules: web, web_domain_field

## Installation

- Log into OpenSPP with administrative rights.
- Access the “Apps” menu from the dashboard to manage OpenSPP modules.
- Choose “Update Apps List” to refresh the module list.
- Search for “OpenG2P Programs” and initiate installation. This process will also install associated modules: G2P Registry: Groups, G2P Registry: Individual, G2P Registry: Base.

## Utilising the Cycle Module

- If a new Cycle is required to be added, enter one of the Programs.
- Click “Create New Cycle” in the top corner of the page.
- A cycle will be created and added to the table inside the Cycles tab.
- A program can create multiple cycles.
- Click on the green button beside the cycle name of a cycle.
- Upon clicking the green button, the system will be redirected to the cycle page where the information of the cycle can be seen.
- Several buttons can be seen in the top corner of the cycle page.
- “Copy Beneficiaries from Program” button will copy all of the enrolled registry from the program to the cycle.
- “Verify Eligibility” button will verify all of the enrolled registry in the cycle if they are still eligible for this cycle and program.
- “To Approve” button will change the state of the cycle from “Draft” to “To approve”.
- Once the cycle’s state is in “To Approve”, only the “Approve” and “Reset to Draft” button will be visible in the top corner of the page.
- “Approve” button will change the state of the cycle from “To approve” to “Approve”.
- “Reset to Draft” button will revert back the state of the cycle from “To approve” to “Draft”.
- Once the cycle’s state is in “Approve”, only the “Validate Entitlements” button will be visible in the top corner of the page.
- “Validate Entitlements” button changes the status of entitlements from “Draft” to “Pending Validation”.
- Start date and End date of a cycle depends on the Recurrence settings that were setup in Cycle Manager.

## Customise Cycle

- To introduce new fields or functions in a new module, develop a Python file extending the model “g2p.cycle” and integrate this file into `models/__init__.py`.
- Upgrade the module incorporating the new Python file.
- To integrate new fields into the UI, developers should familiarise themselves with view, view inheritance and the use of xpath in Odoo.

## Additional References

- Below are some Odoo references that may help in adding the field both in models and in UI. For further guidance on model creation, inheritance, and UI integration, the following Odoo documentation may be useful:
  - [Views](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)
  - [Chapter 4: Models And Basic Fields](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/04_basicmodel.html)
  - [Chapter 7: Basic Views](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/07_basicviews.html#chapter-7-basic-views)
  - [Chapter 13: Inheritance](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/13_inheritance.html)
  - [Chapter 14: Interact With Other Modules](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/14_other_module.html)
</file>

<file path="docs/developer_guide/customization/customizing_entitlements.md">
# Customize Entitlement

The following article guides the reader in understanding how the entitlement can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html).

## If the Programs module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for “Programs” and initiate installation. This will also install the other modules required.

![](custom_entitlement/1.png)

## Utilising the Entitlement

For more detailed guidance on utilizing the Entitlement module in OpenSPP, please refer to the information available at the provided link which will be published soon.

## Customize Entitlement

The duration of the validity of the entitlement is not shown currently in OpenSPP. Let’s look at a step by step guide on how the duration can be shown within an entitlement.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_entitlement_custom).

The key steps in module development are as follows:

1. To customize entitlement, a new module can be developed.
2. To initiate the development of a custom module for entitlement customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
 "depends": [
       "spp_programs",
   ],
```

3. To add the new field in the new module, develop a Python file named `entitlement.py` that extends `g2p.entitlement` and incorporate this file into `models/init.py`. The definition of the fields should be implemented as demonstrated below.

```python
from odoo import api, fields, models

class G2PEntitlementCustom(models.Model):
   _inherit = "g2p.entitlement"

   day_duration = fields.Integer("Valid Duration (Days)", compute="_compute_day_duration")

   @api.depends("valid_from", "valid_until")
   def _compute_day_duration(self):
       for rec in self:
           valid_from = rec.valid_from or fields.Date.today()
           delta = rec.valid_until - valid_from
           rec.day_duration = delta.days
```

The code mentioned above will introduce a new field to the `g2p_entitlement` table for storing the duration of an entitlement. To understand further, refer to the following documentation [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/13_other_module.html), [Link 3](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html)

Here the values of `valid_until`, `valid_from` fields are derived from the values of cycle’s start date and end date fields. The mentioned fields are from the table `g2p.cycle`.

4. To integrate new fields into the UI, the following steps should be followed. Create a new file called `views/entitlement_view.xml` in the module. Add the below code to the manifest file.

```python
"data": [
    "views/entitlement_view.xml",
],
```

5. The following code can be added to the `entitlement_view.xml` file to show the duration in the UI.

```xml
 <record id="view_custom_entitlement_form" model="ir.ui.view">
   <field name="name">view_custom_entitlement_form</field>
   <field name="model">g2p.entitlement</field>
   <field name="inherit_id" ref="g2p_programs.view_entitlement_form" />
   <field name="priority">1000</field>
   <field name="arch" type="xml">
     <xpath expr="//field[@name='valid_until']" position="after">
       <field name="day_duration" />
     </xpath>
   </field>
 </record>
```

6. Install the module to include the new changes. The following screenshot shows the added field duration in the newly developed module.

![](custom_entitlement/2.png)
</file>

<file path="docs/developer_guide/customization/customizing_fields.md">
# Adding New Fields and Indicators

Custom fields allow the system to capture additional information that may be crucial for various social protection programs. Indicator fields are predefined fields within the system used to capture specific, standard metrics or key performance indicators (KPIs) that are essential for monitoring and evaluating the performance of social protection programs. Customizing groups and individuals with new fields and indicators enhances the system's ability to manage and analyze registrant data effectively.

## Prerequisites

- Knowledge of Python, Odoo, XML.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html).

## Objective

After following this guide, developers will be able to customize indicators in OpenSPP.

## Step-by-step

In OpenSPP, both groups and individuals are based on the **res.partner** model. They are differentiated by the is_group field:

- is_group = True for groups.
- is_group = False for individuals.

These entities are linked through the **G2PGroupMembership** model, which connects individuals to their respective groups.

### Naming conventions for custom fields

Custom fields in OpenSPP follow a specific naming convention:

- **z\_** prefix for custom fields (x\_ when created from the UI).
- **ind** for indicator fields.
- **grp** for group-related fields.
- **cst** for custom fields.
- **indv** for individual-related fields.

#### Example naming conventions

1. Indicator field for group

```python
z_ind_grp_num_children
```

**z\_**: prefix.
**ind**: Indicator.
**grp**: Group-related.
**num_children**: Descriptive name indicating the number of children

2. Custom field for individual

```python
z_cst_indv_disability_level
```

**z\_**: prefix.
**cst**: Custom field.
**indv**: Individual-related.
**disability_level**: Descriptive name indicating the disability level.

### Adding custom fields to groups

#### Example 1: Adding an indicator to track the number of children

To add a custom field to a group, follow these steps:

1. Define the field:

```python
class G2PGroup(models.Model):
    _inherit = "res.partner"

    z_ind_grp_num_children = fields.Integer(
        "Number of Children",
        compute="_compute_ind_grp_num_children",
        help="Number of children in the group",
        store=True,
        allow_filter=True,
    )
```

2. Implement the compute method:

```python
def _compute_ind_grp_num_children(self):
    now = datetime.datetime.now()
    children = now - relativedelta(years=CHILDREN_AGE_LIMIT)
    domain = [("birthdate", ">=", children)]
    self.compute_count_and_set_indicator("z_ind_grp_num_children", None, domain)
```

**compute_count_and_set_indicator** is a helper function in the OpenSPP API that simplifies computing indicators. You provide the field name, any specific relationship kinds, and the domain criteria to filter the relevant records.

#### Example 2: Without compute_count_and_set_indicator

To compute an indicator without using compute_count_and_set_indicator, directly implement the compute logic within the method.

1. Define the field:

```python
class G2PGroup(models.Model):
    _inherit = "res.partner"

    z_ind_grp_is_single_head_hh = fields.Boolean(
        "Is Single-Headed Household",
        compute="_compute_ind_grp_is_single_head_hh",
        help="Indicates if the household is single-headed",
        store=True,
        allow_filter=True,
    )
```

2. Implement the compute method:

```python
def _compute_ind_grp_is_single_head_hh(self):
    for record in self:
        adult_count = record.group_membership_ids.filtered(
            lambda member: member.individual.birthdate <= (datetime.datetime.now() - relativedelta(years=18))
        ).mapped('individual')
        record.z_ind_grp_is_single_head_hh = len(adult_count) == 1
```

Do not use **@api.depends** when you want to compute indicators based on individual information, it will be very inefficient. we have another mechanism to recompute when needed.

### Adding custom fields to individuals

#### Example: Adding a custom field for disability level

To add a custom field to an individual it is only necessary to define the field:

```python
class G2PIndividual(models.Model):
    _inherit = "res.partner"
    z_cst_indv_disability_level = fields.Integer("Disability Level")
```

### Integrating custom fields into the UI

To ensure custom fields are accessible in the user interface for filtering and reporting, modify the XML views in OpenSPP. Below is a list of views that can be extended, followed by examples of how to add custom fields to these views.

#### OpenSPP views that can be extended

**Individuals views**

- Tree view
  -- Identifier: g2p_registry_individual.view_individuals_list_tree
- Form view
  -- Identifier: g2p_registry_individual.view_individuals_form

**Groups views**

- Tree view
  -- Identifier: g2p_registry_group.view_groups_list_tree
- Form view
  -- Identifier: g2p_registry_group.view_groups_form

By extending these views, you can ensure that custom fields are visible and manageable within the OpenSPP interface. Here are examples of how to extend these views to add your custom fields.

#### Adding custom fields to individual views

**Tree view**

```xml
<odoo>
    <record id="view_individuals_list_tree_custom" model="ir.ui.view">
        <field name="name">view_individuals_list_tree_custom</field>
        <field name="model">res.partner</field>
        <field name="inherit_id" ref="g2p_registry_individual.view_individuals_list_tree" />
        <field name="arch" type="xml">
            <xpath expr="//field[@name='address']" position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>
            <xpath expr="//field[@name='address']" position="after">
                <field name="z_cst_indv_disability_level" string="Disability Level" />
            </xpath>
        </field>
    </record>
</odoo>
```

**Form view**

```xml
<odoo>
    <record id="view_individuals_form_custom" model="ir.ui.view">
        <field name="name">view_individuals_form_custom</field>
        <field name="model">res.partner</field>
        <field name="inherit_id" ref="g2p_registry_individual.view_individuals_form" />
        <field name="arch" type="xml">
            <xpath expr="//page[@name='basic_info']/group/group[1]" position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>
            <xpath expr="//page[@name='basic_info']/group/group[1]" position="after">
                <group colspan="2">
                    <field name="z_cst_indv_disability_level"/>
                </group>
            </xpath>
        </field>
    </record>
</odoo>
```

#### Adding custom fields to group views

**Tree view**

```xml
<odoo>
    <record id="view_individuals_list_tree_custom" model="ir.ui.view">
        <field name="name">view_individuals_list_tree_custom</field>
        <field name="model">res.partner</field>
        <field name="inherit_id" ref="g2p_registry_individual.view_individuals_list_tree" />
        <field name="arch" type="xml">
            <xpath expr="//field[@name='address']" position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>
            <xpath expr="//field[@name='address']" position="after">
                <field name="z_cst_indv_disability_level" string="Disability Level" />
            </xpath>
        </field>
    </record>
</odoo>
```

**Form view**

```xml
<odoo>
    <record id="view_individuals_form_custom" model="ir.ui.view">
        <field name="name">view_individuals_form_custom</field>
        <field name="model">res.partner</field>
        <field name="inherit_id" ref="g2p_registry_individual.view_individuals_form" />
        <field name="arch" type="xml">
            <xpath expr="//page[@name='basic_info']/group/group[1]" position="attributes">
                <attribute name="invisible">1</attribute>
            </xpath>
            <xpath expr="//page[@name='basic_info']/group/group[1]" position="after">
                <group colspan="2">
                    <field name="z_cst_indv_disability_level"/>
                </group>
            </xpath>
        </field>
    </record>
</odoo>
```

By integrating these fields into the appropriate views, you ensure that the custom data is visible and manageable within the OpenSPP interface, enhancing the system's usability and functionality.

### Testing and validation

Testing customizations is essential to ensure they work as expected. Validate your changes by writing tests with sample data and scenarios.

#### Example test case

To validate your custom fields and computed indicators, create a test class.

```python
import datetime
import logging

from dateutil.relativedelta import relativedelta
from odoo.tests import tagged
from odoo.tests.common import TransactionCase

_logger = logging.getLogger(__name__)

@tagged("post_install", "-at_install")
class ComputeIndicatorFieldsTest(TransactionCase):
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.env = cls.env(
            context=dict(
                cls.env.context,
                test_queue_job_no_delay=True,
            )
        )

        # Initial Setup of Variables
        cls.registrant_1 = cls.env["res.partner"].create(
            {
                "name": "Heidi Jaddranka",
                "is_group": False,
                "is_registrant": True,
                "gender": "Female",
                "birthdate": datetime.datetime.now(),
                "z_cst_indv_disability_level": 5,
            }
        )
        cls.registrant_2 = cls.env["res.partner"].create

        (
            {
                "name": "Angus Kleitos",
                "is_group": False,
                "is_registrant": True,
                "gender": "Male",
                "birthdate": datetime.datetime.now(),
                "z_cst_indv_disability_level": 10,
            }
        )
        cls.group_1 = cls.env["res.partner"].create(
            {
                "name": "Group 1",
                "is_group": True,
                "is_registrant": True,
            }
        )
        members1 = [
            {"individual": cls.registrant_1.id},
            {"individual": cls.registrant_2.id}
        ]
        group1_members = [[0, 0, val] for val in members1]
        cls.group_1.write({"group_membership_ids": group1_members})

    def test_01_num_children(self):
        self.group_1._compute_ind_grp_num_children()
        self.assertEqual(
            self.group_1.z_ind_grp_num_children,
            2,
        )

    def test_02_num_elderly(self):
        now = datetime.datetime.now()
        birthdate = now - relativedelta(years=66)
        self.registrant_1.write({"birthdate": birthdate})
        self.group_1._compute_ind_grp_num_elderly()
        self.assertEqual(
            self.group_1.z_ind_grp_num_elderly,
            1,
        )

    def test_03_num_adults_female_not_elderly(self):
        now = datetime.datetime.now()
        birthdate = now - relativedelta(years=30)
        self.registrant_1.write({"birthdate": birthdate})
        self.group_1._compute_ind_grp_num_adults_female_not_elderly()
        self.assertEqual(
            self.group_1.z_ind_grp_num_adults_female_not_elderly,
            1,
        )

    def test_04_num_adults_male_not_elderly(self):
        now = datetime.datetime.now()
        birthdate = now - relativedelta(years=30)
        self.registrant_2.write({"birthdate": birthdate})
        self.group_1._compute_ind_grp_num_adults_male_not_elderly()
        self.assertEqual(
            self.group_1.z_ind_grp_num_adults_male_not_elderly,
            1,
        )
```

By writing and running these tests, you can ensure that your custom fields and indicators work correctly within OpenSPP. This approach helps maintain the system's integrity and reliability as you implement customizations.
</file>

<file path="docs/developer_guide/customization/customizing_indicators.md">
# Indicators

The indicators in OpenSPP are built using computed fields. The computed fields in Odoo are dynamic fields whose values are calculated in real time rather than being directly stored in the database. These fields are essential for scenarios where the field value results from a computation involving other field values.

## 1. Creating a Computed Field

To define a computed field, you must establish your field and assign a computation method to its compute attribute. This method calculates the field's value for every record.

```python
class SampleModel(models.Model):
   _name = "sample.model"

   total = fields.Float(compute="_compute_total")
   amount = fields.Float()

   def _compute_total(self):
       for record in self:
           record.total = 2.0 * record.amount
```

Key Points

- The computation method, conventionally named with a `_compute` prefix, is responsible for setting the field's value.
- Within this method, the `self` represents a record set and should be iterable.
- Computed fields are executed only when accessed, and their values are not stored in the database by default.

In this example, the value of the computed field is based on the value of the `amount` field, but it will only execute if the `total` field is called. In this case, the value of the `total` field will not update even after changing the value of the `amount` field. To solve this problem, add dependencies to the method.

```python
class SampleModel(models.Model):
   _name = "sample.model"

   total = fields.Float(compute="_compute_total")
   amount = fields.Float()

   @api.depends("amount")
   def _compute_total(self):
       for record in self:
           record.total = 2.0 * record.amount
```

The method has a decorator `api.depends` with an argument `amount`, which corresponds to the `amount` field; it declares that this method depends on the value of the `amount` field and this method will execute if `amount` field's value is change thus `total` field will be updated.

## 2. Create a Stored Computed Field

While a regular computed field's value is calculated on the fly, a stored computed field allows its computed value to be stored in the database. Add the `store=True` parameter to your field declaration to create a stored computed field field.

```python
class SampleModel(models.Model):
   _name = "sample.model"

   total = fields.Float(compute="_compute_total", store=True)
   amount = fields.Float()

   @api.depends("amount")
   def _compute_total(self):
       for record in self:
           record.total = 2.0 * record.amount
```

This approach ensures that the value of the total is persisted in the database, reducing computation needs for repeated access.

This overview covers the basics of computed fields in Odoo. For a more in-depth understanding, including advanced techniques and best practices, refer to the official Odoo [documentation](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/08_compute_onchange.html) on computed fields.

## 3. Sample Use-case 1

In a real-life scenario, most form applications have a birth date field and no age field since the age of a person can be determined by using the birth date. To apply this scenario in Odoo, we need to use a computed field.

```python
from datetime import date

class ResPartner(models.Model):
   _inherit = "res.partner"

   birthdate = fields.Date("Date of Birth")
   age = fields.Int(compute="_compute_age")

   @api.depends("birthdate")
   def _compute_age(self):
       today = date.today()
       for rec in self:
           rec.age = today.year - rec.birthdate.year - ((today.month, today.day) < (rec.birthdate.month, rec.birthdate.day))
```

In this example, a birthdate field and a computed age field that depends on the `birthdate` field using the function `_compute_age` are created, `age` is computed by getting and using the current date and the date in the `birthdate` field. `age` field will be automatically updated every time the `birthdate` field is updated since the compute method have a dependencies to the `birthdate` field.

## 4. Sample Use-case 2

In a hypothetical scenario, If a group/family should know the number of individuals that are under five years old, we can to use a computed field.

```python
from odoo import api, fields, models

class G2PGroup(models.Model):
   _inherit = "res.partner"

   z_ind_grp_num_children_below_5 = fields.Integer(
       "Number of children below 5 years old",
       compute="_compute_ind_ind_grp_num_children_below_5",
       help="Number of children below 5 years old",
       store=True,
       allow_filter=True,
   )

   @api.depends("group_membership_ids", "group_membership_ids.birthdate")
   def _compute_ind_ind_grp_num_children_below_5(self):
       for rec in self:
           total = 0
           for membership in rec.group_membership_ids:
               try:
                   age = int(membership.individual.age)
               except Exception:
                   age = None

               if age and age < 5:
                   total += 1
           rec.z_ind_grp_num_children_below_5 = total
```

In this example, a computed field with a computed function that is based on the member's birth date is created. A parameter `store=True` is added in the computed field to save this field in the database where it can be queried in the model.

Further, using the `z_ind_grp` will allow you to add the indicator at the group level as shown in the above example.

```python
self.env["res.partner"].search(["z_ind_grp_num_children_below_5", "=", 1])
```

The above query will only retrieve records with one child under five years old.
</file>

<file path="docs/developer_guide/customization/customizing_programs.md">
# Customize Program

This guide provides a structured approach for implementing and customising the program in OpenSPP through the development of a custom module.

## Prerequisites

- Knowledge in Python, Odoo, OOP, HTML, XML, Xpaths.
- A functional OpenSPP installation.
- Administrative access to the OpenSPP backend.

## Odoo Setup from Docker using doodba

- Existence of openg2p_program folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: g2p_programs.
- Existence of openg2p_registry folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: g2p_registry_base, g2p_registry_individual, g2p_registry_group, g2p_registry_membership, g2p_bank.
- Existence of openspp_registry folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.1.1-mono-repo, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: spp_programs, spp_programs_sp, g2p_entitlement_cash, spp_entitlement_inkind, spp_eligibility_sql, spp_eligibility_tags.
- Existence of queue folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: queue_job
- Existence of web folder in odoo/custom/src. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, notify OpenSPP docker admins to add the missing repo to repos.yaml and addons.yaml.
- Availability of modules: web, web_domain_field.

## Odoo Setup from source

- Existence of openg2p-program folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, clone the repository from [here](https://github.com/OpenG2P/openg2p-program.git) into odoo/custom, navigate to the openg2p-program folder, and switch to the specified branch.
- Availability of modules: g2p_programs.
- Existence of openg2p-registry folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0-1.0-develop, and update the branch. If absent, clone the repository from [here](https://github.com/OpenG2P/openg2p-registry.git) into odoo/custom, navigate to the openg2p-program folder, and switch to the specified branch.
- Availability of modules: g2p_registry_base, g2p_registry_individual, g2p_registry_group, g2p_registry_membership, g2p_bank.
- Existence of openspp-registry folder in odoo/custom. If present, navigate to this folder, switch to branch 15.1.1-mono-repo, and update the branch. If absent, clone the repository from [here](https://github.com/OpenSPP/openspp-registry.git) into odoo/custom, navigate to the openspp-registry folder, and switch to the specified branch.
- Availability of modules: spp_programs, spp_programs_sp, g2p_entitlement_cash, spp_entitlement_inkind, spp_eligibility_sql, spp_eligibility_tags, spp_area, spp_service_point.
- Existence of queue folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, clone the repository from [here](https://github.com/OCA/queue.git) into odoo/custom, navigate to the queue, and switch to the specified branch.
- Availability of modules: queue_job.
- Existence of web folder in odoo/custom. If present, navigate to this folder, switch to branch 15.0, and update the branch. If absent, clone the repository from [here](https://github.com/OCA/web.git) into odoo/custom, navigate to the web, and switch to the specified branch.
- Availability of modules: web, web_domain_field

## Installation

- Log into OpenSPP with administrative rights.
- Access the “Apps” menu from the dashboard to manage OpenSPP modules.
- Choose “Update Apps List” to refresh the module list.
- Search and initiate installation of the following modules, this process will also install all of their associated modules:
  - OpenSPP Program Entitlement (In-Kind)
  - SPP Program Entitlement (Cash)
  - OpenSPP Tag Based Eligibility Manager
  - OpenSPP SQL Query Eligibility Manager

## Utilising the Program Module

- If a new Program is required to be added, Select “Program” menu.
- Select the “Create Program” button and a modal to set the program settings will appear.
- Fill-up name field.
- Select a Target Type: Group is for Group Registry while Individual is for Individual Registry.
- In the “Configure the Default Eligibility Criteria” will set who are the individuals or groups that are eligible for this program.
- There are 3 Eligibility Managers that can be selected namely “Default”, “SQL-base Eligibility”, and “Tag-based Eligibility”
- In “Default”, a registry will be determined based on the filter that is setup on the domain. To set up the domain, Click the “Add filter” button.
- Upon clicking the button, 3 fields will appear. First field is the name of the model’s field, Second field is the operator, while the 3rd field is the value.
- Based on the filter that is setup is what will be the eligible registrant for this program
- In “SQL-base Eligibility”, a registry will be determined based on the SQL Query that will be input in the SQL Query field
- Upon inputting the SQL Query, click the “Validate Query” button to validate the query if it is a valid sql query
- The result if its valid or invalid will show and the registry record count if its valid.
- In “Tag-based Eligibility”, a registry will be determined based on the Tags and Area provided.
- In the “Configure the Cycle Manager” tab will set the recurrence, approvers, etc., of the program’s cycle.
- Check the One-time Distribution to only create one cycle and no recurrence to a program.
- In the “Configure the Entitlement Manager” tab will set the entitlements that the registry will receive.
- There are 3 Entitlement Managers that can be selected namely “Default”, “Cash”, and “In-kind”
- Upon setting up all of the managers of the program, click the Next button, model will redirect to the “Import Registrant” page
- In this page will set if the program will import the registrants after creating or not. Select “Yes” to import registrant, otherwise select “No”.
- Click Create button to create the Program.
- Inside the Program, there are many buttons in the top part of the page.
- “Import Eligible Registrants” button is to import all registrants based on the eligible criteria. This registrants is still not enrolled in the Program.
- “Enroll Eligible Registrants” button will enroll all imported registrants.
- “Verify eligibility” button will verify if all enrolled registrants is still eligible for the program. If they are not eligible anymore then they will be removed from the program.
- “Create New Cycle” will create a cycle and the cycle that was created will be added in the Cycles Tab.
- To modify the managers of the Program, go to the Configurations tab.
- In this tab will show all of the managers of the program, click the green button to modify the managers.
- Click the green button on Eligibility Managers to modify the eligibility criteria of the program.
- Click the green button on Cycle Managers to modify the settings of the program’s cycle.
- Click the green button on Entitlement Managers to modify the settings of the entitlements.

## Customise Program

- To introduce new fields or functions in a new module, develop a Python file extending the following models:
  - “g2p.program” for Program.
  - “g2p.program.create.wizard” for the creation of a Program.
  - “g2p.program_membership.manager.default” for the default eligibility criteria.
  - “g2p.program_membership.manager.tags” for the tag-based eligibility criteria.
  - “g2p.program_membership.manager.sql” for the sql-base eligibility criteria.
  - “g2p.cycle.manager.default” for the cycle manager.
  - “g2p.program.entitlement.manager.default” for the default entitlement manager.
  - “g2p.program.entitlement.manager.cash” for the cash entitlement manager.
  - “g2p.program.entitlement.manager.inkind” for the in-kind entitlement manager.
- Integrate this file into `models/__init__.py`.
- Upgrade the module incorporating the new Python file.
- To integrate new fields into the UI, developers should familiar themselves with the view, view inheritance, and the use of xpath in Odoo.

## Additional References

- Below are some Odoo references that may help in adding the field both in models and in UI. For further guidance on model creation, inheritance, and UI integration, the following Odoo documentation may be useful:
  - [Views](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)
  - [Chapter 4: Models And Basic Fields](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/04_basicmodel.html)
  - [Chapter 7: Basic Views](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/07_basicviews.html#chapter-7-basic-views)
  - [Chapter 13: Inheritance](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/13_inheritance.html)
  - [Chapter 14: Interact With Other Modules](https://www.odoo.com/documentation/15.0/developer/tutorials/getting_started/14_other_module.html)
</file>

<file path="docs/developer_guide/customization/customizing_registry.md">
# Customize Registry

The following article guides the reader in understanding how the registry module will work in OpenSPP and how it can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html)

## If the Registry module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for the following modules that are required to be installed such as G2P Registry: Groups, G2P Registry: Individual and G2P Registry: Membership.

![](custom_registry/1.png)

## Utilizing the Registry Module

For more detailed guidance on utilizing the Registry module in OpenSPP, please refer to the information available at the provided link, which will be published soon.

## Customise Registry

In this hypothetical scenario, we will look at the following customizations

- Storing a new field salary of an individual to be used as a indicator
- Adding an indicator in the group of the registry
- To show the salary of every individual in the group member view.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_registry_custom).

The key steps in module development are as follows:

1. To do the above customizations, a new module can be developed.

2. To initiate the development of the custom module for registry customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's important to define the dependencies of the new module as outlined below.

```python
  "depends": [
       "g2p_registry_group",
       "g2p_registry_individual",
       "g2p_registry_membership",
   ],
```

3. To add the new field for salary in the registry, develop a Python file named `individual.py` that extends `res.partner` and incorporate this file into `models/init.py`. The definition of the salary and currency fields should be implemented as demonstrated below.

```python
from odoo import fields, models

class OpenSPPIndividualCustom(models.Model):
   _inherit = "res.partner"

   ind_currency_id = fields.Many2one(
       "res.currency",
       "Currency",
       default=lambda self: self.env.user.company_id.currency_id or None,
   )
   ind_salary = fields.Monetary("Salary", currency_field="ind_currency_id", default=0.0)
```

Note that when adding fields that are specific for individual It should have the prefix `ind_`

4. To add the new column in the Members table in the groups, develop a Python file named `group_membership.py` that extends `g2p.group.membership` and incorporate this file into `models/__init__.py`. The definition of the salary and currency fields should be implemented as demonstrated below.

```python
from odoo import fields, models

class OpenSPPMembershipCustom(models.Model):
   _inherit = "g2p.group.membership"

   currency_id = fields.Many2one(
       "res.currency",
       related="individual.ind_currency_id",
   )

   salary = fields.Monetary(
       "Salary",
       currency_field="currency_id",
       related="individual.ind_salary",
   )

```

5. To add the salary as an indicator in the group-level, develop a Python file named `group.py` that extends `res.partner` and incorporate this file into `models/init.py`. The definition of the number of individuals with a salary below 100 USD should be implemented as demonstrated below.

```python
from odoo import api, fields, models

class OpenSPPGroupCustom(models.Model):
   _inherit = "res.partner"

   z_ind_grp_count_below_salary = fields.Integer(
       "Number of members with below 100 salary",
       compute="_compute_count_below_salary",
   )

   @api.depends("group_membership_ids", "group_membership_ids.salary")
   def _compute_count_below_salary(self):
       for rec in self:
           below_salary_count = 0
           for membership in rec.group_membership_ids:
               if membership.salary < 100:
                   below_salary_count += 1


           rec.z_ind_grp_count_below_salary = below_salary_count

```

To understand further, refer to the following documentation [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/13_other_module.html), [Link 3](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html)

6. The following steps should be followed to integrate the new fields into the UI. Create new files named `views/individual_views.xml` and `views/group_membership_views.xml` in the module. Add the below code to the manifest file.

```python
   "data": [
       "views/group_membership_views.xml",
       "views/individual_views.xml",
   ],

```

7. The following code can be added to the `individual_views.xml` file to show the currency and salary in the UI.

```xml
   <record id="view_individuals_salary_detail" model="ir.ui.view">
       <field name="name">view_individuals_salary_detail</field>
       <field name="model">res.partner</field>
       <field name="inherit_id" ref="g2p_registry_individual.view_individuals_form" />
       <field name="arch" type="xml">
           <xpath expr="//field[@name='email']" position="after">
               <field name="ind_currency_id" />
               <field name="ind_salary" />
           </xpath>
       </field>
   </record>
```

8. The following code can be added to the `group_membership_views.xml` to show the salary of every member of the group.

```xml
   <record id="view_group_membership_salary_indicator" model="ir.ui.view">
       <field name="name">view_group_membership_salary_indicator</field>
       <field name="model">res.partner</field>
       <field name="inherit_id" ref="g2p_registry_group.view_groups_form" />
       <field name="arch" type="xml">
           <xpath expr="//field[@name='group_membership_ids']/tree/field[@name='ended_date']" position="after">
               <field name="salary" />
           </xpath>
       </field>
   </record>
```

9. Install the module to include the new changes.

10. The following screenshot shows the added field in the newly developed module.

See the following for the Individual view.
![](custom_registry/2.png)

See the following for the Members table in Groups.
![](custom_registry/3.png)

See the following for the Indicators in Groups
![](custom_registry/4.png)


---

## Merged Content



### Content from docs/howto/developer_guides/custom_registry_tab_fields.md

# Customize Registry's Tabs/Fields

The following article guides the reader in understanding how the registry’s tabs and fields can be customized. In this article, we will look at how to add and remove the tabs and fields in the registry module.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html)
- Refer [Customize Registry](https://docs.openspp.org/howto/developer_guides/custom_registry.html) for basic customizations of Registry module

## Adding a new tab and a field

To add a new tab and a new field in Group or/and in Individual Page, use xpath and view inheritance. Check the code samples below.

1. Example 1

The file name is `group_views.xml`.

```xml
<record id="view_custom_groups_form" model="ir.ui.view">
    <field name="name">view_custom_groups_form</field>
    <field name="model">res.partner</field>
    <field name="inherit_id" ref="g2p_registry_group.view_groups_form" />
    <field name="arch" type="xml">
        <xpath expr="//page[@name='basic_info']" position="after">
            <page string="Disability information" name="disability_info">
                <group col="4" colspan="4">
                    <field name="grp_with_disability_individual" />
                </group>
            </page>
        </xpath>
    </field>
</record>
```

This code snippet adds a new tab titled "Disability Information" to the Group form in OpenSPP, featuring a field for disability-related data.

2. Example 2

The file name is `individual_views.xml`.

```xml
<record id="view_individuals_salary_detail" model="ir.ui.view">
    <field name="name">view_individuals_salary_detail</field>
    <field name="model">res.partner</field>
    <field name="inherit_id" ref="g2p_registry_individual.view_individuals_form" />
    <field name="arch" type="xml">
        <!-- Adding a new tab and adding a new field in a tab -->
        <xpath expr="//page[@name='basic_info']" position="after">
            <page string="Disability information" name="disability_info">
                <group col="4" colspan="4">
                    <field name="ind_disability_type" />
                    <field name="ind_special_notes" />
                </group>
            </page>
        </xpath>
    </field>
</record>
```

This code introduces a new tab called "Disability Information" to the Individual form in OpenSPP, containing fields for the type of disability and special notes.

## Removing an existing tab and a field

In removing an existing tab or existing field, use xpath with a position `attributes` and add `invisible` attribute to the tab or field you want to remove. Check the code samples below.

1. Example 1

The file name is `group_views.xml`.

```xml
<record id="view_custom_groups_form" model="ir.ui.view">
    <field name="name">view_custom_groups_form</field>
    <field name="model">res.partner</field>
    <field name="inherit_id" ref="g2p_registry_group.view_groups_form" />
    <field name="arch" type="xml">
        <!-- removing a tab -->
        <xpath expr="//page[@name='other']" position="attributes">
            <attribute name="invisible">1</attribute>
        </xpath>

        <!-- removing a field -->
        <xpath expr="//field[@name='phone_number_ids']" position="attributes">
            <attribute name="invisible">1</attribute>
        </xpath>
    </field>
</record>
```

This code hides an existing tab named `other` and a field `phone_number_ids` in the Group form, making them invisible in the user interface.

2. Example 2

The file name is `individual_views.xml`.

```xml
<record id="view_individuals_salary_detail" model="ir.ui.view">
    <field name="name">view_individuals_salary_detail</field>
    <field name="model">res.partner</field>
    <field name="inherit_id" ref="g2p_registry_individual.view_individuals_form" />
    <field name="arch" type="xml">
        <!-- removing a tab -->
        <xpath expr="//page[@name='other']" position="attributes">
            <attribute name="invisible">1</attribute>
        </xpath>

        <!-- removing a field -->
        <xpath expr="//field[@name='birth_place']" position="attributes">
            <attribute name="invisible">1</attribute>
        </xpath>
    </field>
</record>
```

This snippet is used to make an existing tab named `other` and a field `birth_place` invisible in the Individual form interface.
</file>

<file path="docs/developer_guide/customization/customizing_service_points.md">
# Customize Service Points

The following article guides the reader in understanding how the service point module will work in OpenSPP and how it can be customized by providing a sample scenario and a working example.

## Prerequisites

- Knowledge of Python, Odoo, XML, Xpaths.
- To set up OpenSPP for development, please refer to the [Developer Guide](https://docs.openspp.org/howto/developer_guides/development_setup.html)

# If the Service Points module is not installed

1. Log into OpenSPP with administrative rights.

2. Access the “Apps” menu from the dashboard to manage OpenSPP modules.

3. Choose “Update Apps List” to refresh the module list.

4. Search for “OpenSPP Service Points” and initiate installation. This will also install the other modules required

![](custom_service_points/1.png)

## Utilising the Service Points Module

For more detailed guidance on utilizing the Service Point module in OpenSPP, please refer to the information available at the provided link, which will be published soon.

## Customize Service Points

In this hypothetical scenario, we will add the dropdown service point type and service point operating hours, which can be shown to the beneficiaries so they can redeem their entitlements by knowing the operation hours and service point type.

A working sample module for the described scenario can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/customizations/spp_service_point_custom).

The key steps in module development are as follows:

1. To customize service point, a new module can be developed.
2. To initiate the development of a custom module for service point customization, begin by creating a manifest file. This file should include fields like name, category, and version. Additionally, it's crucial to define the dependencies of the new module as outlined below.

```python
   "depends": [
       "spp_service_points",
   ],

```

3. To add the new field in the new module, develop a Python file named `service_point.py` that extends `spp.service.point` and incorporate this file into `models/init.py`. The definition of the fields should be implemented as demonstrated below.

```python
from odoo import fields, models

class OpenSPPServicePoint(models.Model):
   _inherit = "spp.service.point"

   weekday_time_start = fields.Float(string='Start Time')
   weekday_time_end = fields.Float(string='End Time')

   weekend_time_start = fields.Float(string='Start Time')
   weekend_time_end = fields.Float(string='End Time')

```

The code mentioned above will introduce the new fields to the `spp_service_point` table for storing the operating hours for weekdays and weekends. To understand further, refer to the following documentation [Link 1](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html), [Link 2](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/13_other_module.html), [Link 3](https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/12_inheritance.html)

4. To integrate new fields into the UI, the following steps should be followed. Create a new file called `views/service_point_views.xml` in the module. Add the below code to the manifest file.

```python
   "data": [
       "views/service_point_views.xml",
   ],
```

The following code can be added to the `service_point_views.xml` file to show the fields in the UI.

```xml
<?xml version="1.0" encoding="utf-8" ?>
<odoo>
   <record id="view_service_points_custom" model="ir.ui.view">
       <field name="name">view_service_points_custom</field>
       <field name="model">spp.service.point</field>
       <field name="inherit_id" ref="spp_service_points.view_service_points_form" />
       <field name="arch" type="xml">
           <xpath expr="//field[@name='disabled_reason']" position="after">
               <div >
                   <h2>Weekdays</h2>
               </div>
               <field name="weekday_time_start" widget="float_time" colspan="4" />
               <field name="weekday_time_end" widget="float_time" colspan="4" />
               <div>
                   <h2>Weekends</h2>
               </div>
               <field name="weekend_time_start" widget="float_time" colspan="4" />
               <field name="weekend_time_end" widget="float_time" colspan="4" />
           </xpath>
       </field>
   </record>
</odoo>
```

5. To add the service types in the service type dropdown field, the following steps should be followed. Create a new file called `data/service_type_data.xml` in the module and add the below code to the manifest file.

```python
   "data": [
       "data/service_type_data.xml",
       "views/service_point_views.xml",
   ],
```

The following code can be added to the `service_type_data.xml` file to add the service types.

```xml
<?xml version="1.0" encoding="utf-8" ?>
<odoo>
   <record id="voucher_redemption_center" model="spp.service.type">
       <field name="name">Voucher Redemption Center</field>
   </record>


   <record id="in_kind_goods_distribution" model="spp.service.type">
       <field name="name">In-Kind Goods Distribution</field>
   </record>


   <record id="information_desk" model="spp.service.type">
       <field name="name">Information Desk</field>
   </record>
</odoo>
```

6. Install the module to include the new changes.

The following screenshot shows the newly added fields in the above developed module.

![](custom_service_points/2.png)
</file>

<file path="docs/developer_guide/customization/implementing_pmt.md">
# PMT using Module Development

This tutorial guides you through installing and implementing the Proxy Means Testing (PMT) module in OpenSPP with the help of custom module development. By following these steps, you will be able to extend the functionality of the OpenSPP with PMT features.

## Prerequisites

- A working OpenSPP installation.
- Administrator access to install and configure new modules.
- Download and deploy the spp_pmt module from the Github repository[Link] into “custom/src/openspp_registry” folder in “odoo” in your OpenSPP installation.

## 1. Installation of the PMT Module

1.1. Start by logging into your OpenSPP instance with administrative privileges.

1.2. Navigate to the "Apps" menu from the dashboard. Here, modules are managed for your OpenSPP environment.

1.3. In the "Apps" menu, select "Update Apps List" to ensure all recently added modules are visible.

1.4. In the search bar, type "Proxy Means Testing" and press enter. Locate the module from the list that appears.

1.5. Click on the "Install" button next to the PMT module. The system will automatically handle the installation, managing any dependencies as declared in the module's manifest file.

## 2. Understanding Module Structure

2.1 **init**.py: This file indicates that its containing directory, `spp_pmt`, is a Odoo module. It imports the `models` package, suggesting the main business logic resides there.

2.2 **manifest**.py: The manifest file defines essential metadata about the module. Key points include:

- The module's name is "Proxy Means Testing".
- It belongs to the "OpenSPP" category.
- Current version is "15.0.0.0.0".
- The module is still in "Beta" development status.
- Dependencies include "base", "g2p_registry_base", and "g2p_registry_group".

  2.3. `models/__init__.py`: This file signifies that the `models` directory is a Python package and imports `pmt.py`, where the PMT model is defined.

  2.4. models/pmt.py: This file defines the PMT feature's business logic. It extends the `res.partner` model (standard in Odoo). It also computes a PMT score based on these fields.

## 3. Using the PMT Features

3.1. Navigate to the “Individual” under "Registry" menu.

3.2. Select a entry. With the PMT module installed, under “Additional Details”, an individual data fields related to PMT calculation can be modified.

3.4. Save the entry. The PMT score should be calculated and shown under the “Indicators” menu in the “Groups” where the individual is part of the group.

3.5. Utilize the PMT score as needed within your OpenSPP operations, noting that it's calculated using the specific logic defined within the PMT module.

By following this tutorial, the Proxy Means Testing module should now be fully integrated into your OpenSPP instance, providing additional functionality to your social protection operations.
</file>

<file path="docs/developer_guide/customization/index.md">
# Customization

This section contains guides for customizing OpenSPP functionality.

```{toctree}
:maxdepth: 2
:caption: Contents

customizing_areas
customizing_audit
customizing_change_requests
customizing_cycles
customizing_entitlements
customizing_fields
customizing_programs
customizing_registry
customizing_service_points
customizing_indicators
implementing_pmt
```
</file>

<file path="docs/developer_guide/integrations/dci.md">
# Implementation of DCI Specification

In the rapidly evolving landscape of digital public infrastructure (DPI), the principle of interoperability stands as an important for building efficient, inclusive, and sustainable systems in a country. This article delves into how OpenSPP implemented APIs outlined in the [DCI Interface Standards v1.0](https://standards.spdci.org/standards/standards-for-interoperability-interfaces/structure-and-versioning-of-the-standards) under Registry to enable interoperability with other systems such as CRVS.

The implementation can be categorized into two sections where OpenSPP operates as the client and OpenSPP operates as the server. Note that currently OpenSPP has only completed the sync implementation.

## 1. Server Implementation

This section focuses on utilizing OpenSPP as the source of truth for beneficiary information where OpenSPP acts as the server. Such integration allows OpenSPP to seamlessly interact with other critical systems by providing data, thereby enhancing data exchange and operational {term}`efficiency`. The following steps elaborate how the module can be configured.

### 1.1 Deployment and Installation

1. Deploy [this branch](https://github.com/OpenSPP/openspp-api/tree/spp_dci_api_server) on a server

2. Generate RSA Private and Public key.

3. Save the RSA private key to spp_dci_api_server/tools/private_key.pem.

4. Save the RSA public key to spp_dci_api_server/tools/public_key.pub

5. Login to OpenSPP, Go to Apps, Search “OpenSPP API: DCI Server” and Install.

### 1.2 How to use

1. Login to OpenSPP

2. Navigate to Settings -> DCI API Client Credentials

3. Click Create button and fill-up the Client Name field then click Save.

4. “Show” button will appear.

5. Click the “Show” button to reveal the Client ID and Client Secret.

6. Make sure to copy the Client ID and Client Secret.

7. Upon closing the modal, “Show” button will not appear anymore and will not be able to reveal the Client ID and Client Secret.

8. Client ID and Client Secret will be used to retrieve Access Token.

9. Access Token will be used to authenticate in the search Registry API.

10. To retrieve Access Token, Send a POST request to the url `<domain>/oauth2/client/token` with a body client_id, client_secret, and grant_type=’client_credentials’

11. Copy the access_token in the response.

12. To retrieve registry data, Send a POST request to the url `<domain>/registry/sync/search`.

13. Header should have a key “Authorization” with a value “Bearer <access_token>”

14. Refer the DCI API spec for the request and response structure

## 2. Client Implementation

This section focuses on utilizing another registry as the source for truth to get beneficiary information. The following steps elaborate how the module can be configured to fetch data where OpenSPP acts as the client.

### 2.1 Deployment and Installation

1. Deploy these two branches([1](https://github.com/OpenSPP/openspp-api/tree/spp_crvs_import),[2](https://github.com/OpenSPP/openspp-base/tree/spp_data_source)) on a server

2. Get client_id and client_secret from CRVS(or from server).

3. Login to OpenSPP

4. Navigate to the Apps page, Search “OpenSPP Import: DCI API” and Install it.

5. Upon installing “OpenSPP Import: DCI API”, a data source is automatically created.

6. Navigate to Settings -> Data Source to view the created data source.

7. Input the credentials in the client_id, client_secret, and grant_type field inside the Data Source record.

8. The only supported grant_type for now is “client_credentials”.

### 2.2 How to use

1. Navigate to Programs -> Import From Registry

2. Create Search Criteria, Enter Search Criteria Name, Location, and Birthdate Range

3. Click Fetch Button.

4. Individual records will be imported from OpenCRVS Lab to OpenSPP.

5. Fetch Button is now {term}`disabled` but it can be enabled by clicking the “Enable Fetching”.

6. Once an individual record is already fetched, They are now created and visible to the Registry page.

7. Navigate to Registry -> Individual to check the individuals and Navigate to Registry -> Group to check the groups.

8. Refer the DCI API spec for the request and response structure

_NOTE: This documentation/implementation should be considered as an alpha release of the implementation of the DCI Interface Standards v1.0._
</file>

<file path="docs/developer_guide/integrations/esignet.md">
# eSignate Integration

## Introduction

The integration of OpenSPP with eSignet aims to utilize [MOSIP eSignet](https://docs.mosip.io/1.2.0/integrations/e-signet) as the identity server for login into the OpenSPP platform. This provides a seamless user experience and enhances security by leveraging the OAuth protocol and allowing OpenSPP users to access the platform without the need for additional login credentials.

## Prerequisites

To be able to start the integration, ensure the following:

- The key exchange is completed as per the requirements of MOSIP.
- Access to the eSignet account (Client ID) and Authorization URL, UserInfo URL, Token URL, and JWKS URL is received from MOSIP.
- Need to have administrative privileges within OpenSPP to install modules.
- The developer mode is activated in OpenSPP.

## Objective

Upon completing this guide, the developer can successfully integrate eSignet with OpenSPP for login authentication.

## Step-by-step

1. Set up your development environment as per the given guide [here](https://docs.openspp.org/howto/developer_guides/development_setup.html).

2. Access the root folder of the OpenSPP project. Then, go to the `odoo/custom/src` directory.

3. Modify the repos.yaml file in this directory and add the following configuration for the openg2p-auth to setup eSignet.

```yaml
openg2p-auth:
  defaults:
    depth: $DEPTH_DEFAULT
  remotes:
    openg2p: https://github.com/OpenG2P/openg2p-auth.git
  target: openg2p 17.0-develop
  merges:
    - openg2p 17.0-develop
```

4. Make the following changes in the server-auth section of the `repos.yaml` file to support the eSignet module.

```yaml
server-auth:
  defaults:
    depth: $DEPTH_DEFAULT
  remotes:
    openg2p: https://github.com/OpenG2P/server-auth.git
  target: openg2p 17.0
  merges:
    - openg2p
```

5. In the `addons.yaml` file, include the following two lines to add the openg2p-auth.

```yaml
openg2p-auth:
  - "*"
```

6. Modify the server-auth also as below in the same file.

```yaml
server-auth:
  - "*"
```

7. Now restart your development server to make the above changes effective.

8. Log in to OpenSPP with an account that has admin rights and ensure developer mode is activated.

9. Click the four-square icon on the top-left corner to bring up the menu, then select **Apps**.

10. Search for OIDC and install the **G2P Auth: OIDC - Reg ID** module. After the successful installation, it should appear below.

![](esignet/1.png)

11. Next, from the OpenSPP main menu, select **Settings**, then navigate to **Users & Companies**, and finally, choose **OAuth Providers** to proceed with the configuration.

12. Click **Create** to set up a new OAuth client to be used in eSignet, fill out the configurations as below, and **Save**.

- Provider name: eSignet
- Auth Flow: OpenID Connect (authorization code flow)
- Token Map: sub:user_id
- Client ID: ID given by MOSIP
- Client Authentication Method: Private Key JWT
- Private Key: Upload the private key
- Assertion Type: JWT Bearer
- Allowed: Checked
- Login button label: Sign in with MOSIP
- Authorization URL: `https://esignet.collab.mosip.net/authorize`
- Scope: openid profile email
- UserInfo URL: `https://esignet.collab.mosip.net/v1/esignet/oidc/userinfo`
- Token UR: `https://esignet.collab.mosip.net/v1/esignet/oauth/v2/token`
- JWKS URL: `https://esignet.collab.mosip.net/v1/esignet/oauth/.well-known/jwks.json`
- Extra Authorise Params:

```json
{
  "acr_values": "mosip:idp:acr:generated-code mosip:idp:acr:biometrics mosip:idp:acr:linked-wallet",
  "claims": "{\"userinfo\":{\"name\":{\"essential\":true},\"phone_number\":{\"essential\":false},\"email\":{\"essential\":true},\"gender\":{\"essential\":true},\"birthdate\":{\"essential\":true}},\"id_token\":{}}"
}
```

- Use G2P Reg ID: checked
- Partner Creation Call Validation Url: checked
- Default Group User Creation: User types / Internal User

After successful configuration, it should look like as below.

![](esignet/2.png)

13. Once configured successfully, the eSignet login should appear on the login screen as below.

![](esignet/3.png)
</file>

<file path="docs/developer_guide/integrations/index.md">
# Integrations

This section contains guides for integrating OpenSPP with external systems.

```{toctree}
:maxdepth: 2
:caption: Contents

dci
esignet
oidc
keycloak_beneficiary_portal
g2p-connect
```
</file>

<file path="docs/developer_guide/integrations/keycloak_beneficiary_portal.md">
# Beneficiary portal authentication

In this article, the steps will be given on how to add a single sign-on to a beneficiary portal which improves user experience. This guide helps us to create a front-end application where a beneficiary registered in OpenSPP and can log in using Keycloak.

## Prerequisites

- There is an existing [Keycloak Server](https://docs.openspp.org/howto/developer_guides/oidc.html).
- A realm, client, users, groups, and client scope are available in Keycloak.
- Node.js (version 14 or higher) and npm (version 7 or higher) are available on your local machine.
- You are familiar with Javascript and React (version 17 or higher).
- Beneficiaries are in OpenSPP and Keycloak.

## Objective

After completing this guide, developer can create a front-end app using React and can log in to the front-end application using Keycloak.

## Step-by-step

A working sample application can be accessed at the provided [link](https://github.com/OpenSPP/documentation_code/tree/main/howto/developer_guides/integrations/kc-react-application).

1. Create a new React application.

```bash
npx create-react-app kc-react-app
cd kc-react-app
```

2. Install the Keycloak adapter for React. Using `npm` as the package manager, we install the `keycloak-js`, the adapter for client-side applications.

```bash
npm install keycloak-js
```

3. Download client adapter settings from your Keycloak server. The JSON data contains the client settings we need to add to our application’s Keycloak configuration.

- Log in to your Keycloak server. Select the `realm` and click the `Client` in the side menu.
  ![](beneficiary_keycloak/3.1.png)
- Click the `client` you are using with your front-end application. You will be redirected to the `client` page.
- Click the `Actions` button on the upper right. Click the `Download adapter config`. A dialog will appear with the adapter configuration settings. Click the `Download` button. A file is downloaded to your Downloads folder.
  ![](beneficiary_keycloak/3.3.png)
- Copy the downloaded file to your `public` folder.
  ![](beneficiary_keycloak/3.4.png)

4. Integrate Keycloak with the front-end application.

- Create a new file, `keycloak.js` in your `src` folder with the following code. Substitute the values from the downloaded configuration settings. The `url` is the value of the `auth-server-url` key. The `clientId` is the resource.

```js
import Keycloak from "keycloak-js";

const keycloak = new Keycloak({
  url: "http://localhost:8080/", //auth-server-url
  realm: "OpenSPP", //realm
  clientId: "user-portal", // resource
  redirectUri: "http://localhost:3000", // local development redirect uri
});

export default keycloak;
```

- Go to your `index.js` file and initialize Keycloak.

```js
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import keycloak from "./keycloak";
const root = ReactDOM.createRoot(document.getElementById("root"));

keycloak
  .init({
    onLoad: "check-sso",
  })
  .then((auth) => {
    if (auth) {
      console.log(auth);
      console.log("User is logged in");
    } else {
      console.log("User is not logged in");
    }
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  })
  .catch((error) => {
    console.error("Keycloak failed:", error);
  });

reportWebVitals();
```

5. Update your components to use Keycloak.

- Update your `src/App.js` file and add the following code. If the user is successfully authenticated, a logout button is displayed otherwise the login button is visible. Clicking the login button redirects the user to the Keycloak login page.

```js
import "./App.css";
import keycloak from "./keycloak";
function App() {
  const login = () => {
    keycloak.login();
  };
  const logout = () => {
    keycloak.logout();
  };
  return (
    <div className="App">
      {keycloak.authenticated ? (
        <button onClick={logout}>Logout </button>
      ) : (
        <button onClick={login}>Login </button>
      )}
    </div>
  );
}

export default App;
```

6. Run your application

- Run the following in your command line or terminal.

```bash
npm start
```

- You will be redirected to the browser. Click the `login` button, and the Keycloak login page will appear.

![](beneficiary_keycloak/6.2.png)
</file>

<file path="docs/developer_guide/integrations/oidc.md">
# Configuring Keycloak for OAuth

We recommend using Keycloak as the {term}`authentication` provider for OpenSPP. This allows for a single sign-on
experience for users and ensures that the authentication mechanism can evolve independently of the systems
using it, thus ensuring that the authentication mechanism can be secured and act as a shield in front of the
systems.

Although other OIDC-compliant providers can be used, we have only tested Keycloak.

## Configuration

If you are using OpenSPP's [docker-compose setup](https://github.com/openspp/openspp-docker), you already have
the `auth_oidc` from [OCA](https://github.com/OCA/server-auth) installed, otherwise you will need to install
it.

### Configure Keycloak

1. Go to the admin console of your keycloak instance
2. Create a new realm (if needed), in our example we use `odoo`.
3. Create a new client, in our example we use `odoo`.
4. Enable `standard flow` and save.
5. Set the `Valid redirect URIs` to be "&lt;url of your server&gt;/auth_oauth/signin".
6. Enable `Client authentication`.
7. Go to the "Credentials" tab and copy the `Client secret` to be used later.

### Configure Odoo

1. Install `Authentication OpenID Connect` from the Apps menu.
2. Go to `Settings > General Settings > Integrations > oAuth Authentication > oAuth Providers` and configure
   it as following:

   - **Provider name**: Keycloak (or any name you like that identify your keycloak provider)
   - **Auth Flow**: OpenID Connect (authorization code flow)
   - **Client ID**: the same Client ID you entered when configuring the client in Keycloak
   - **Client Secret**: found in keycloak on the client Credentials tab
   - **Allowed**: yes
   - **Body**: the link text to appear on the login page, such as Login with Keycloak
   - **Scope**: openid email
   - **Authentication URL**: The "authorization_endpoint" URL found in the OpenID Endpoint Configuration of
     your Keycloak realm
   - **Token URL**: The "token_endpoint" URL found in the OpenID Endpoint Configuration of your Keycloak realm
   - **JWKS URL**: The "jwks_uri" URL found in the OpenID Endpoint Configuration of your Keycloak realm

**For example:**

![](images/openspp_oidc_configuration.png)

### Customizing the login page (Optional)

To align with corporate branding, you can customize the login page by adding a custom logo and a custom
background image.

- **Enable Developer Settings**: "Settings" > "Activate The Developer Mode"

- **Edit The Login Template**: "Settings" > "Technical" > "User Interface > Views" > Search for "Login"

## Using

### Existing users

For users that already existed before the OIDC-integration was configured, there is a need for them to go
through the reset password process. This is because the password is not stored in Odoo, but in Keycloak.
Depending on the configuration, the user may have to perform 2FA setup.

### New users

For new users, create their user account in OpenSPP/Odoo with the same email address used in `Keycloak` and
they will be able to login. Note that in order to be able to get past the self-service user management page,
permissions need to be set for the user.
</file>

<file path="docs/developer_guide/architecture.md">
# Architecture

## Principles

- OpenSPP must follow **platform based approach** so that all common features can be configured or the
  functionality can be extended by other parties.
- OpenSPP must **not use proprietary** or commercial license frameworks. Where deemed essential, such
  components must be encapsulated to enable their replacement if necessary (to avoid vendor lock-in)
- OpenSPP must use **open standards** whenever possible to expose its functionality (to avoid technology
  lock-in)
- OpenSPP must use **commodity computing** hardware & software to build the platform
- OpenSPP must be **simple to deploy and use**
- OpenSPP must be able to **work for small projects** with few thousand {term}`beneficiaries` up to large ones with
  tens of millions of beneficiaries
- Data must be **encrypted** in-flight and at-rest. All requests must be authenticated and authorized. Privacy
  of Identity Data is an absolute must in OpenSPP
- OpenSPP must follow the following manageability principles:
  - **Auditability & monitor ability** of every action in the system
  - **Testability** of every feature of the platform
  - **Easy upgrade** ability of the platform
- OpenSPP should **work with different locales** so that that {term}`social protection` systems can be localized for
  languages and cultures easily
- The key sub-systems of OpenSPP should be designed for **extensibility**. For example, if an external system
  has to be integrated for entitlement determination, it should be easy to do so

### Ecosystem approach

The OpenSPP platform can work as a standalone system or as a part of a larger ecosystem. It needs to be
interoperable with other government systems.

Every piece of information stored in the platform must have a corresponding API to access it, so that it can
be used by other systems. For example, if you want to integrate OpenSPP with mobile money, you can leverage
[Payment Hub EE](https://mifos.gitbook.io/docs/payment-hub-ee/business-overview). Through a well-defined set
of standard interfaces OpenSPP allows for integration of such components and offers choice of providers for
the same.

So, key parameters are:

- All public/external facing interfaces of OpenSPP must be standards-based for interoperability whenever
  possible.
- 3rd party components should be integrated via well-defined interfaces and be easily installable.

### Configurability

OpenSPP should be flexible for countries/organizations to configure the base platform according to their
specific requirements. Some of the examples of configurability are:

- Be able to choose the features required.
- Be able to configure the attributes of the beneficiaries.
- Be able to define the criteria used to determine the beneficiaries.
- Be able to define how entitlement is calculated

### Extensibility

OpenSPP should be flexible to extend functionality on top of the basic platform. Some of the examples of
extensibility are:

- Ability to add a {term}`grievance` system
- Ability to use third party solutions such as [MOSIP](https://mosip.io/) to store part of the information of
  registrants
- Ability to Integrate data from other systems

### Modularity

All components of OpenSPP should be extensible and their features exposed via interfaces such that the
implementation behind the interface can be changed without affecting other modules. Some examples of
modularity are:

- Determination of {term}`eligibility` to a program
- Calculation of entitlement
- {term}`deduplication` of beneficiaries

## High-level Functional Reference Architecture

![](images/highlevel_architecture.jpg)

The OpenSPP functional architecture diagram above presents an overview of the components and layers of a typical OpenSPP implementation.

**Data Layer**

The Data Layer is responsible for storing and managing the data generated by and used within the OpenSPP system. It consists of the following:

- **Database:** The database stores structured data, such as program information, {term}`beneficiary` records, and transaction data. It uses a relational database management system (RDBMS) such as PostgreSQL.
- **Object Storage:** Object Storage is a component that stores unstructured data, such as images, documents, or other multimedia files. Currently, file storage has been used.

**Data Access Layer/Odoo ORM**

The layer simplifies data interaction through object-oriented constructs and offers CRUD operations, querying, and filtering.

**Odoo Core Functions**

Oddo is an existing, open-source ERP (Enterprise Resource Planning) system that is used as the foundational layer to build Open G2P and OpenSPP platforms.

**Open G2P Core Functions**

The Open G2P (Government-to-Person) Core Functions represent the central components of the OpenSPP system which are used to build OpenSPP functions.

**Functional Layer**

The Functional Layer of OpenSPP consists of various modules that implement the functionality which is required in a social protection program. These modules can be tailored to specific program requirements, and additional features can be added based on the requirements identified.

**User Engagement Layer**

The User Engagement Layer contains the user interfaces (UI) for interacting with the OpenSPP platform. This layer includes web applications and mobile applications.

**Stakeholders Layer**

Stakeholders are the various parties involved in implementing, operating, and evaluating social protection programs. They include government agencies, non-governmental organizations, private sector partners, and the beneficiaries themselves.

**Integration Layer**

The Integration Layer connects the OpenSPP system with external systems, such as national {term}`identification` systems like MOSIP, payments like Mojaloop, and other data sources/systems. This layer allows the platform to exchange information and interoperate with other relevant systems.

**Non-functional requirements**

Non-functional requirements are the characteristics of the OpenSPP platform that are not directly related to its functionality but enable the platform to be reliable and robust. These include security, privacy, audibility, monitoring, performance, scalability, availability, and maintainability. Only a couple of non-functional requirements are shown in the diagram.

## High-level Deployment Reference Architecture

The on-premises deployment of OpenSPP encompasses a suite of interconnected components, each playing a vital role in delivering secure, robust, and highly efficient service. This document is intended to provide an high-level understanding of the OpenSPP on-premises deployment architecture and its key components.

![](images/deployment_architecture_onprem.jpg)

### A. The components description

**Firewall**

Serving as the entry point, the Firewall regulates the inbound and outbound network traffic based on predetermined security rules. It protects the system’s integrity by preventing unauthorized access and mitigating potential security threats.

**Application Load Balancer**

The Load Balancer optimizes the performance of OpenSPP application servers by evenly distributing the incoming network traffic across multiple servers. This not only enhances resource utilization and throughput but also prevents server overload. The presence of active and passive nodes ensures failover protection and high availability.

**Identity Server**

The Identity Server effectively manages user identities and controls access to resources. It employs advanced features such as single sign-on, access delegation, and identity federation to ensure secure and compliant access to system resources.

**API Manager**

The API Manager in OpenSPP manages and secures APIs, controls access, and collects usage analytics. Acting as a gateway, it validates and routes API calls, manages request rates, and supports API versioning. It's instrumental in enhancing system security and optimizing service quality.

**OpenSPP Application Servers**

These servers form the nucleus of the OpenSPP system. They execute the OpenSPP application and coordinate with databases and the API Gateway. The use of active and passive nodes guarantees continuous service and failover protection.

**Database Load Balancer**

The Database Load Balancer facilitates the efficient distribution of database queries across various instances. This ensures optimal resource usage and high availability of database {term}`services`.

**Databases**

Databases serve as the data storage centers of the system. They interact directly with the application servers and are crucial for OpenSPP's functioning. Given the large volume of data handled by OpenSPP, a scalable and highly available database system is indispensable.

**Caching Databases**

Caching Databases enhances system performance by temporarily storing frequently accessed data. This reduces the strain on primary databases and expedites data retrieval processes.

**Object Storage**

This component caters to storing unstructured data such as files. Its high scalability makes it an ideal solution for storing large data volumes.

**File Storage**

File Storage manages the storage of structured data in a hierarchical file system. It handles files such as documents and spreadsheets.

**Email Gateway**

The Email Gateway is tasked with managing email communications in a secure and efficient manner. It plays a pivotal role in sending and receiving emails within the system.

**SMS Gateway**

The SMS Gateway allows the system to send and receive SMS messages, ensuring a seamless channel for alerts, notifications, and two-factor {term}`authentication`.

**Monitoring and Alerting System**

This component vigilantly monitors the health and performance of the system. It promptly issues alerts for any detected anomalies or performance issues, ensuring rapid response and resolution.

**Log Aggregation**

The Log Aggregation component centralizes log data collection from all system components. It is a critical tool for analyzing system behavior, aiding in diagnosing and troubleshooting issues.

Understanding the OpenSPP on-premises deployment architecture and its components is essential for effective system management and maintenance. This architecture, focusing on performance, scalability, and fault tolerance, provides a comprehensive solution for the on-premises deployment of OpenSPP.

### B. The specification of the components

Below are the recommended server specifications for each OpenSPP on-premises deployment architecture component. Please note that these specifications might need adjustments based on the specific needs of the deployment of the country/organization, such as the number of users, the amount of data, and the desired performance.

| Component                             | Recommended Technology                 | Specifications                                                                           |
| ------------------------------------- | -------------------------------------- | ---------------------------------------------------------------------------------------- |
| Firewall                              | Preferred Hardware Firewall or pfSense | CPU: 4 cores<br> RAM: 8 GB<br> Storage: 100 GB                                           |
| Load Balancer for Application Servers | Nginx, HAProxy, Keepavalied            | CPU: 4 cores<br> RAM: 4 GB<br> Storage: 100 GB                                           |
| Identity Server                       | Keyclock                               | CPU: 4 cores<br> RAM: 6 GB<br> Storage: 50 GB                                            |
| API Manager                           | Apache APISIX                          | CPU: 4 cores<br> RAM: 8 GB<br> Storage: 100 GB                                           |
| OpenSPP Application Servers           | -                                      | CPU: 16 cores<br> RAM: 32 GB<br> Storage: 100 GB                                         |
| Connection Pooler for Database        | PgBouncer                              | CPU: 2 cores<br> RAM: 4 GB<br> Storage: 50 GB                                            |
| Databases                             | PostgreSQL                             | CPU: 16 cores<br> RAM: 32 GB<br> Storage: 250 GB (or more, depending on the data volume) |
| Caching Databases                     | Redis                                  | CPU: 2 cores<br> RAM: 4 GB<br> Storage: 50 GB                                            |
| Object Storage                        | Min.io, S3 compatible                  | Based on the deployment & replication                                                    |
| File Storage                          | -                                      | Based on the deployment & replication                                                    |
| Monitoring & Alerts                   | Zabbix                                 | CPU: 4 cores<br> RAM: 4 GB<br> Storage: 100 GB                                           |
| Log Aggregation                       | Grafana Loki                           | Based on the deployment & replication                                                    |

These specifications are just a starting point. The platform needs to scale up or down depending on the specific use case and performance requirements.

In configuring your OpenSPP deployment, there are three principal infrastructure alternatives.

- The 'On-Premise' model involves setting up the system within the private data center or facility, offering the utmost control over infrastructure, {term}`data privacy`, and security.
- The 'Cloud' model leverages the vast capabilities of cloud computing platforms, ensuring scalability and flexibility while reducing the overhead of infrastructure management.
- The 'Hybrid' model is a blend of on-premises and cloud deployments, combining the scalability of cloud services with the increased control of on-premises systems.

The selection among these options should align with the organization's/countries’s specific requirements, budget constraints, and overarching IT strategy.

### C. The single-node deployment

The single-node deployment refers to installing and configuring OpenSPP on a single VM, typically for testing or small-scale production purposes. This deployment type involves setting up all the required OpenSPP modules on a single physical or virtual machine, ensuring simplified management and a reduced resource footprint.

![](images/deployment_architecture_on_prem_single_node.jpg)

The specifications required for a single-node deployment of OpenSPP largely depend on the intended use case of the system. The requirements may be relatively minimal for a testing or development setting, entailing a multi-core processor, adequate RAM, and sufficient storage capacity. However, for small-scale production environments, the requirements can escalate significantly, mandating top-tier multicore processors, substantial amounts of RAM, and high-performance, capacity-rich storage. The network interface should be correspondingly high-speed. These recommendations should be adapted based on the specific computational load and throughput anticipated for the system. For instance, systems expected to handle high traffic volumes will necessitate more robust hardware and expanded network capabilities to ensure seamless operation.

A thorough assessment of your system usage should be carried out to determine hardware specifications for deployment.

## Modular architecture

OpenSPP is designed to be used standalone with just the core functionalities or with other components.

The previous diagram shows the core components of OpenSPP. Those components provide APIs that allow you to
replace the default implementation with your own.

For example, the eligibility calculation can be delegated to a third-party service that has access to other
data and just return the eligibility result to OpenSPP.

![](images/openspp_modular_architecture.png)

- [Eligibility Manager](programs/eligibility_manager.rst)
- [Entitlement Manager](programs/entitlement_manager.rst)
- [Deduplication Manager](programs/deduplication_manager.md)
- [Notification Manager](programs/notification_manager.rst)
- [Program Manager](programs/program_manager.rst)
- [Cycle Manager](programs/cycle_manager.rst)

Furthermore, as OpenSPP is based on the ERP Odoo and use the standard models provided by Odoo, you have access
to the thousands of applications available in the [Odoo App Store](https://apps.odoo.com/apps) or build your
[own](https://www.odoo.com/documentation/17.0/developer.html).

### Example components for a mid-size project

![](images/architecture_ecosystem_1.png)

### Example components for a large project

![](images/openspp_architecture_large_project.png)


---

## Merged Content



### Content from docs/technical_reference/programs/concepts.md

# Manager Overview

![OpenSPP Overview](images/openspp_overview.png)

## Programs

Programs, sometimes also called a campaign, define a social program. A program is defining when, what and how
{term}`beneficiaries` receive {term}`entitlements`. In itself, a program does not do much. The power comes through the use of
"managers", which define the journey of beneficiaries in a program.

Currently, few types of programs are supported:

- Cash transfer
- Mobile money
- Voucher
- Voucher for restricted cash

## Cycle

Cycles represent a distribution cycle.

## beneficiary

A beneficiary is a {term}`registrant` that is part of a program/cycle.

## Managers

There are different types of managers that define how programs and cycles work. Each manager type has a
defined programming API that needs to be implemented in order to define how the system will work.

For all the managers, a default implementation is designed to support the most common use cases. You can
easily add your managers if those do not fit your needs.

The available managers are:

- [Eligibility Manager](eligibility_manager.rst)
- [Entitlement Manager](entitlement_manager.rst)
- [Deduplication Manager](deduplication_manager.md)
- [Notification Manager](notification_manager.rst)
- [Program Manager](program_manager.rst)
- [Cycle Manager](cycle_manager.rst)

## Type of payment instruments

### Cash Transfer

**STATUS**: Work In Progress.

OpenSPP can generate payment lists that can be shared with a bank to verify or execute transfers.

### Mobile money

TBD

### Voucher program

OpenSPP can generate nominative vouchers in batches ready to be printed.

The design of the vouchers can be customized by updating the voucher template.

::::{important}

If you plan to accept vouchers and do not plan to verify them with the server at the time of accepting then
you should think about what security features you need to implement to avoid having them being duplicated.

We recommend the use of online verification when the voucher is received or the use of secure paper.

::::

### Voucher for restricted cash programs

Vouchers can be used in conjunction with Odoo POS to provide restricted cash solutions. A merchant can use the
Odoo POS to record what is distributed against a given voucher.
</file>

<file path="docs/developer_guide/best_practices.md">
# Best Practices

- Data collection and validation
- Security and privacy considerations
- Platform feature usage
- Common challenges and solutions
- Use cases and examples
- Scaling the platform
- Deployment and hosting options
- Customizing and developing new modules
- Troubleshooting and debugging
- Contributing to the project


---

## Merged Content



### Content from docs/technical_reference/code.md

# Code & Repository Management

## Open Source and Collaborative Development

The source code of OpenSPP is hosted publicly on GitHub. This facilitates collaborative development, where anyone can access the codebase, suggest modifications, and contribute improvements. By maintaining transparency in its operations and development processes, OpenSPP embodies the ethos of open-source.

OpenSPP operates under a governance model to secure and manage community contributions. This model empowers contributors based on the value of their work, fostering a culture of respect, collaboration, and collective effort. Guided by defined rules and guidelines, this governance model ensures that the repository is managed and maintained effectively, creating an environment where all contributions are appreciated and rewarded.

## Upholding Code Quality

OpenSPP adheres to code quality and code coverage best practices to maintain its robust and reliable software architecture. Every code commit undergoes a rigorous scanning process via SonarQube, a powerful tool for continuously inspecting code quality. This process identifies and fixes bugs, code smells, and security vulnerabilities. Furthermore, the solution includes peer reviews, where fellow developers can review code changes to spot potential issues and discuss improvements, ensuring the overall quality and integrity of the code.

## Code Repository Management

The solution's code repository management features, offered through GitHub, enhance collaborative work and version control. OpenSPP offers metrics and analytics for tracking code repository activity and usage. These insightful data provide a comprehensive overview of the repository’s activity, including commits, contributors, and the frequency of updates. This level of transparency encourages active participation from the community and aids in ongoing project management.

## Seamless Integration with Development Tools

OpenSPP’s design recognizes the importance of collaborating with established development tools, ensuring the development process is as efficient and effective as possible. To manage the codebase and foster a collaborative environment, the platform integrates seamlessly with GitHub. Through GitHub, developers can perform version control, track changes, manage branches, and handle pull requests in a shared space that promotes collective efforts.

For issue tracking and project management, OpenSPP employs Github itself. It allows developers to maintain a clear overview of project progress, prioritize tasks efficiently, and promptly resolve issues.

## Flexible Configuration Management

A solution's adaptability is crucial when managing different projects and environments. OpenSPP supports the management of multiple configuration profiles, enabling the storage and management of different settings and parameters for various projects and environments. This functionality allows developers to optimize the system's behavior according to the specific requirements of each project or environment.

For instance, developers can set up configuration profiles tailored for development, testing, and production environments. Each profile can have distinct parameters such as database settings, API keys, or environment variables. Switching between these profiles ensures the system functions optimally in each scenario, and misconfigurations can be avoided when moving from one environment to another.
</file>

<file path="docs/developer_guide/developer_mode.md">
(developer-mode)=

# Developer mode (debug mode)

The developer mode (or debug mode) unlocks access to extra and advanced tools in OpenSPP. There are several ways to activate the developer mode: through the Settings or the URL.

## Activate through the settings

To activate the debug mode, open the OpenSPP database settings, go to **Settings → General Settings → Developer Tools** and click **Activate the developer mode**. Make sure that you have installed at least one app to see the **Developer Tools** section in the **Settings** module.

![Overview of the debug options under settings in Odoo.](developer_mode/1.png "Overview of the debug options under settings in Odoo.")

```{note}
*Activate the developer mode (with assets)* is used by developers; *Activate the developer mode (with tests assets)* is used by developers and testers.
```

Once activated, the _Deactivate the developer mode_ option becomes available.

## Activate through the URL

You can activate the debug mode by adding an extra query string to the database's URL. To activate, add `?debug=1` or `?debug=true` after `/web` in the URL. To deactivate, change the value to `?debug=0` instead.

![Overview of a URL with the debug mode command added.](developer_mode/2.png "Overview of a URL with the debug mode command added.")

```{tip}
Additional modes are available for developers: `?debug=assets` enables the [assets mode](#frontendframeworkassets_debug_mode), and `?debug=tests` enables the [tests mode](#frontendframeworktests_debug_mode).
```

## Locate the developer mode tools

---

The user can access the developer mode tools by clicking on the _Open Developer Tools_ button or the bug icon located in the OpenSPP header, after activating developer mode.

![OpenSPP displays the console page and the debug icon.](developer_mode/3.png "Overview of a console page and the debug icon being shown in Odoo.")

This menu has extra tools that are useful to understand or edit technical data, such as the views or actions of a page. On a page that has filters, actions, and view options, the developer mode tools contain some useful menu items such as:

- _Edit Action_
- _Manage Filters_
- Edit the current view (for example, Kanban, List, Graph, etc.)
- See the _Fields View Get_

```{note}
This page is adapted from the Odoo documentation on {ref}`odoo:developer-mode`.
```
</file>

<file path="docs/developer_guide/i18n_l10n.md">
---
myst:
  html_meta:
    "description": "Internationalization (i18n) and localization (l10n) in OpenSPP 6"
    "property=og:description": "Internationalization (i18n) and localization (l10n) in OpenSPP 6"
    "property=og:title": "Internationalization (i18n) and localization (l10n) in OpenSPP 6"
    "keywords": "OpenSPP, Internationalization, i18n, language, translation, localization"
---

(i18n-l10n-label)=

# Internationalization and Localization

{term}`Internationalization` is the process of preparing an application for displaying content in languages and formats specifically to the audience.
Developers and template authors usually internationalize the application.
"i18n" is shorthand for "internationalization" (the letter "I", a run of 18 letters, the letter "N").

{term}`Localization` is the process of writing the translations of text and local formats for an application that has already been internationalized.
Formats include dates, times, numbers, time zones, units of measure, and currency.
Translators usually localize the application.
"l10n" is shorthand for "localization" (the letter "L", a run of 10 letters, the letter "N").

OpenSPP fully supports internationalization and localization.

```{seealso}
Wikipedia article [Internationalization and localization](https://en.wikipedia.org/wiki/Internationalization_and_localization)
```

(i18n-l10n-common-concepts-label)=

## Common concepts

When you internationalize and localize a OpenSPP application, there are some common concepts used throughout these processes.

(i18n-l10n-terms-label)=

### Terms

The following terms are used in this documentation.

locale
: A locale is an identifier, such as a language tag, for a specific set of cultural preferences for some country, together with all associated translations targeted to the same native language.

language tag
: A language tag is a string used as an identifier for a language.
A language tag may have one or more subtags.
The basic form of a language tag is `LANGUAGE-[SUBTAG]`.

    ```{seealso}
    -   W3C article [Language tags in HTML and XML](https://www.w3.org/International/articles/language-tags/)
    -   W3C Working Draft [Language Tags and Locale Identifiers for the World Wide Web](https://www.w3.org/TR/ltli/)
    ```

`.po`
: Portable Object (PO) file.
The message file format used by the gettext translation system.
See https://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/PO-Files.html.

`.pot`
: Portable Object (PO) template file, not yet oriented towards any particular language.

`.mo`
: Machine Object file.
The binary message file compiled from the .po message file.

(i18n-l10n-locale-and-language-tag-conventions-label)=

### Locale and language tag conventions

OpenSPP uses certain conventions for its locales and language tags.

- When identifying a language only, use two lowercase letters.
  Examples: `en`, `de`.
- When identifying a language and a country, use two lowercase letters, an underscore (`_`), and two uppercase letters.
  Examples: `en_GB`, `pt_BR`.

(i18n-l10n-general-procedure-label)=

### General procedure

TODO
</file>

<file path="docs/developer_guide/index.md">
# Developer Guide

This section provides technical information and instructions for developers who need to customize, extend, integrate with, or contribute to OpenSPP.

```{toctree}
:maxdepth: 2
:caption: Contents

setup
architecture
module_development
best_practices
troubleshooting
developer_mode
i18n_l10n
customization/index
integrations/index
api_usage/index
```
</file>

<file path="docs/developer_guide/module_development.md">
# Module Development

Module development is a crucial aspect of extending the functionality of OpenSPP. When developing a module for OpenSPP, it's important to adhere to certain principles and guidelines to ensure compatibility and performance.

## Understanding OpenSPP Architecture

Before diving into module development, familiarize yourself with the [OpenSPP architecture](https://docs.openspp.org/technical_reference/architecture.html). OpenSPP is structured to support modular additions, allowing for seamless integration of new features or enhancements.

Key Steps in Module Development

1. Understand the specific functionality that your module will provide.

2. Outline the functionality, user interfaces, data interactions, and how your module will integrate with the existing OpenSPP modules.

3. Use the OpenSPP SDK and follow the guidelines provided in the OpenSPP documentation to set up your development environment.

4. Write the code, adhering to OpenSPP's coding standards. Focus on creating clean, maintainable, and efficient code.

5. Rigorously test your module for functionality, performance, and compatibility with different parts of the OpenSPP system.

6. Write clear and comprehensive documentation for your module. This should include setup instructions, usage guidelines, and troubleshooting tips.

7. Ensure your module complies with security standards and does not compromise the integrity of the OpenSPP platform.

8. Have your code reviewed by peers or other OpenSPP developers. This can help identify potential issues and areas for improvement.

9. Once your module is ready and tested, you can proceed with the production use of your module.

10. Regularly update your module for new OpenSPP versions and address any bugs or security issues.

For detailed guidelines, coding standards, and API references, visit the OpenSPP documentation at [docs.openspp.org](https://docs.openspp.org/technical_reference/external_api.html).
</file>

<file path="docs/developer_guide/setup.md">
# Development Setup

Setting up a local OpenSPP environment can be accomplished through two distinct methodologies.

## 1. OpenSPP Docker Setup Using Doodba

This technique utilizes Docker, simplifying the installation of Odoo and its dependencies, with the added benefits offered by Doodba.

### Prerequisites

- Basic understanding of Git, Docker, Docker Compose, Git-aggregator, Invoke, Odoo, and Python
- Terminal access
- Visual Studio Code (VSCode)

### Setup

1. Begin by cloning the OpenSPP Docker repository from [here](https://github.com/OpenSPP/openspp-docker.git)

2. Switch to the openspp-docker directory.

3. Execute the following commands:

- `invoke develop` - Sets up a VSCode development environment.
- `invoke img-pull` - Retrieves Docker images as per .yaml file specifications.
- `invoke img-build` - Constructs Docker images locally.
- `invoke img-build` --pull - Builds or pulls images from a remote repository as needed.
- `invoke resetdb` - Generates a new, demo-data-free database.
- `invoke resetdb` --demo - Creates a new database inclusive of demo data.
- `invoke start` - Activates Odoo.

4. Combine these commands for a single execution if desired.

- e.g. `invoke develop img-pull img-build git-aggregate resetdb start`

5. Browse the following in a preferred browser:

- Odoo: http://localhost:17069/
- Mailhog: http://localhost:17025/
- Wdb: http://localhost:17984/
- Pgweb: http://localhost:17081/

Refer to the Readme in the repository for more detailed instructions on Docker Odoo and Invoke commands.

## 2. OpenSPP Setup from PiPy

Refer the [link](https://docs.openspp.org/howto/developer_guides/setting_up_using_pypi.html).
</file>

<file path="docs/developer_guide/troubleshooting.md">
# Troubleshooting

This guide offers insights and solutions for common errors encountered in Odoo application development. Understanding these errors and knowing how to address them efficiently is crucial for maintaining a smooth development process.

1. Error: Field “x” does not exist in model “y”

   - Confirm the field's presence in the model.
   - Ensure the Python file is listed in `models/__init__.py`.
   - Verify the existence of from . import models in the `__init__.py` file.
   - Consider upgrading the module.
   - Double-check the field name for any spelling errors.

2. Error: Unable to install module “x” due to an unmet external dependency: Missing Python library “y”, “z”

   - Execute pip install -r requirements.txt to install the module's required Python libraries.
   - If specific libraries are mentioned in the error, install them individually using pip.

3. Error: Invalid field “x” on model “y”

   - Ensure the field exists within the model.
   - Restart the Odoo server and then upgrade the module.

4. Error: Some modules are not loaded, potentially due to missing dependencies or manifests: [“x”]

   - Check if the module is located in the custom/ or custom/src/ folder. If absent, add the module, restart the Odoo server, and attempt reinstallation.
   - Confirm the existence of the dependency module of the missing module in either the custom/ or custom/src/ folder.

5. Error: Inconsistent module states, possibly due to missing dependencies: [“x”]

   - This issue often arises when a dependency of the “x” module encounters an error.
   - Explore and rectify errors in other related modules.
</file>

<file path="docs/getting_started/installation_docker.md">
# Installation Guide

## Installing using Docker for development

### Quick start

You need to have Docker and docker-compose installed on your system. You also need to have Python installed
and pip packages `invoke` and `pre-commit`.

```bash
$ git clone git@github.com:openspp/openspp-docker.git
$ invoke develop img-pull img-build git-aggregate resetdb start
```

Then open `http://localhost:17069/` in your browser.

## Installing for production

### Using OpenSPP Cloud (Coming soon)

The easiest way to get a OpenSPP server is by using OpenSPP's Cloud.

OpenSPP Cloud provides fast OpenSPP servers with regular feature updates, automatic security patches, daily
backups, uptime management, enterprise security, and guaranteed support on any issues.

By choosing OpenSPP Cloud, you are also directly supporting future development on OpenSPP and helping make it
better for everyone.

[Contact us](https://openspp.org/contact/) if you want to get early access.
</file>

<file path="docs/getting_started/installation_pypi.md">
# Installation Guide

## Installing using Docker for development

### Quick start

You need to have Docker and docker-compose installed on your system. You also need to have Python installed
and pip packages `invoke` and `pre-commit`.

```bash
$ git clone git@github.com:openspp/openspp-docker.git
$ invoke develop img-pull img-build git-aggregate resetdb start
```

Then open `http://localhost:17069/` in your browser.

## Installing for production

### Using OpenSPP Cloud (Coming soon)

The easiest way to get a OpenSPP server is by using OpenSPP's Cloud.

OpenSPP Cloud provides fast OpenSPP servers with regular feature updates, automatic security patches, daily
backups, uptime management, enterprise security, and guaranteed support on any issues.

By choosing OpenSPP Cloud, you are also directly supporting future development on OpenSPP and helping make it
better for everyone.

[Contact us](https://openspp.org/contact/) if you want to get early access.
</file>

<file path="docs/overview/case_studies/index.md">
# Case Studies

This section contains examples of OpenSPP implementations and use cases.

```{toctree}
:maxdepth: 2
:caption: Contents

```
</file>

<file path="docs/overview/concepts/data_collection_validation.md">
# Data Collection and Validation

OpenSPP, with its comprehensive approach to data management, emphasizes the importance of data collection and rigorous validation procedures. This article delves into how OpenSPP approaches these critical aspects, ensuring data integrity and usefulness.

## Data Collection

1. Adhering to Data Minimization Principles
   OpenSPP is designed to adhere to the principle of data minimization. This means it only collects data that is essential for the intended purpose, avoiding any unnecessary accumulation of information. This approach is crucial for maintaining efficiency and reducing the risks associated with data storage and processing.

2. User-Centric Data Collection
   OpenSPP places significant emphasis on user consent and control. The platform incorporates mechanisms ensuring that user consent is obtained for data collection, aligning with privacy norms and regulations. This ensures compliance with global data protection standards.

3. Versatile Input Methods
   Recognizing the varied environments in which it operates, OpenSPP supports multiple data input methods. This versatility enables effective data collection in diverse scenarios by interacting with other data sources and applications allow data to be collected and pushed OpenSPP via APIs.

## Data Validation

1. Input Validation Protocols
   OpenSPP implements input validation protocols where data inputs are strongly typed, sanitized, and parameterized to ensure that they meet predefined criteria and formats. This process is crucial in preventing malicious data entry, which can lead to vulnerabilities or corrupt data sets.

2. Consistent Data Integrity Checks
   OpenSPP incorporates routine data integrity checks. These checks are designed to verify the accuracy and consistency of data over time, ensuring that it remains reliable and uncorrupted. This is particularly important in long-term operations where data integrity is paramount.

3. Automated and Manual Validation Processes
   OpenSPP utilizes a combination of automated and manual validation processes. While automated systems efficiently handle large volumes of data, manual checks are employed for complex or sensitive data sets where human oversight is essential.

The effectiveness of a social protection program heavily relies on its ability to accurately collect and validate data. By implementing a blend of data collection practices and validations, OpenSPP ensures that the data it handles is both reliable and respectful of user privacy.
</file>

<file path="docs/overview/concepts/data_protection.md">
# Data Protection

## Introduction

The protection of Personally Identifiable Information (PII) has become a fundamental requirement for governments when implementing digital public infrastructure. Data is constantly being collected, processed, and shared within a country as well as across borders, making it crucial to implement strong data protection measures. While regulations such as the General Data Protection Regulation (GDPR) provide legal frameworks (or similar frameworks specific to the country), the focus should remain on the principles of responsible data management to build trust and ensure long-term digital security.

Data protection is not just a legal obligation. It is essential for maintaining privacy, security, and trust when Digital Public Infrastructure is implemented. Governments that fail to implement adequate safeguards risk exposing sensitive information, leading to financial losses, reputational damage, and legal consequences. Individuals, too, must be aware of how their data is used and have control over their personal information.

## Key Principles of Data Protection

Effective data protection relies on several core principles, including:

1. **Lawfulness, fairness, and transparency** - Governments/organizations should collect and process personal data only for legitimate purposes. Transparency about data collection practices ensures that individuals understand how their information is used.
2. **Purpose limitation** - Data should only be collected for specified, explicit, and legitimate purposes. Once the purpose is fulfilled, unnecessary data should not be retained.
3. **Data minimization** - Governments/organizations should collect only the data that is strictly necessary for a given purpose. This reduces the risk of exposure and improves overall security.
4. **Accuracy** - Ensuring that data remains accurate and up to date is essential. Inaccurate data can lead to incorrect decisions and potential harm to individuals.
5. **Storage limitation** - Personal data should not be kept for longer than necessary. Governments/organizations should establish clear policies on data retention and secure deletion methods.
6. **Confidentiality and integrity** - Data security must be prioritized through encryption, access controls, and cybersecurity best practices. Unauthorized access or breaches can have serious consequences.
7. **Accountability and compliance** - Businesses and institutions must take responsibility for ensuring data protection. Regular audits, training, and clear policies help reinforce compliance.

## Implementing Strong Data Protection Measures

With the increasing importance of digital public infrastructure, Governments/organizations must take a proactive approach to protecting personal data. As an example, the General Data Protection Regulation (GDPR) establishes a framework that enforces strict standards for data collection, processing, and storage. Failure to comply with GDPR can lead to severe financial penalties, reputational damage, and loss of consumer trust. All stakeholders including governments, individuals all have a role in ensuring data is handled responsibly. By embedding security-by-design and privacy-by-design principles governments/organizations can minimize risks and uphold the rights of individuals.

Key measures include:

1. **Data protection by design and default** - Security should be embedded into systems and processes from the outset rather than being added later. Privacy-focused design principles help minimize risks.
2. **Employee awareness and training** - Human error is a leading cause of data breaches. Regular training ensures that employees understand data security protocols and how to handle sensitive information.
3. **Secure data transfers and encryption** - Data in transit and at rest should be encrypted to prevent unauthorized access. Secure communication channels and strict access controls are essential.
4. **Third-party risk management** - When working with vendors or service providers, organizations must ensure that they comply with data protection standards. Contracts should include clear security and compliance requirements.
5. **Regular risk assessments and audits** - Conducting frequent risk assessments helps identify potential vulnerabilities. Internal audits ensure that data protection policies remain effective and up to date.
6. **Data minimization and retention policies** – Collect only what’s necessary, store it securely, and delete it when it’s no longer needed. This limits exposure in case of a breach.
7. **Strong user authentication and authorization** – Implement robust credential management, multi-factor authentication, and least-privilege access to reduce unauthorized data exposure.
8. **Incident response and breach notification plan** – Have a clear roadmap for identifying, containing, and reporting security incidents. Quick response minimizes damage and demonstrates accountability.
9. **Transparency and user rights** – Clearly communicate data practices and respect individuals’ rights (e.g., access requests, consent withdrawal). This enables trust and complies with regulatory requirements.
10. **Dedicated data governance team** – Centralize oversight of data handling, ensuring policies are consistently applied and compliance is closely monitored.

The list above is a starting point but by no means exhaustive. Every government/organization has unique needs and risks, so these measures should be adapted and expanded based on context.

## Exceptions to the Right to Erasure

While individuals have the right to request the deletion of their personal data, certain situations require data to be retained for legal, public interest, or security reasons. These exceptions ensure that critical government functions, research, and legal obligations are not disrupted.

- Governments and organizations are required to retain certain types of data for compliance with legal obligations. This applies to government databases and social registries, which store identity records and beneficiary information. Additionally, auditing and fraud prevention measures often necessitate the preservation of data for verification and accountability purposes..

- Data retention is also allowed when necessary for public interest and research. This includes cases where information is needed for health and safety, such as tracking epidemics or maintaining medical records. Scientific, historical, or statistical research also relies on long-term data collection to generate valuable insights that benefit society.

- Another key exception is the protection of legal rights. Data cannot be erased when it is required for legal claims, including fraud investigations and social protection disputes. Additionally, preserving evidence is crucial to ensuring fairness in legal proceedings, making data retention a necessity in such cases.

- Certain public services, particularly those involving digital public infrastructure such as identity management, also rely on long-term data retention. National digital ID systems require records for identity verification, while welfare and social protection programs depend on accurate data to verify eligibility and ensure proper benefit distribution.

Finally, the right to erasure depends on whether data processing is based on consent or legal obligation. If data is collected solely based on consent, individuals can request its deletion unless an exemption applies. However, if data processing is mandated by law, organizations may be required to retain the data and deny erasure requests. Understanding these exceptions helps individuals and organizations balance privacy rights with broader societal and legal responsibilities.

## Conclusion

Data protection is a shared responsibility between governments/organizations and individuals. By adopting proper security practices and adhering to key principles, governments/organizations can enhance trust, improve compliance, and safeguard sensitive information.
</file>

<file path="docs/overview/concepts/digital_public_infrastructure.md">
# Digital Public Infrastructure

## Introduction to DPI

Just as railroads built with public money helped society grow in the past, today's digital systems, known as Digital Public Infrastructure (DPI), play a similar role in our modern world. DPI facilitates the movement of people, money, and information in the digital realm.

DPI is powerful as it spans various areas, leveraging universally accessible technology, adhering to clear and fair rules, and fostering innovation. This approach transcends technology, encompassing good governance and local environmental adaptation.

DPI enhances digital services in countries, aiding in achieving global objectives like the Sustainable Development Goals (SDGs). It enables transformative service delivery, prioritizing safety, inclusivity, and respect for individual rights and ideas. Nations including Brazil, India, and Singapore are employing DPI to realize significant advancements.

## Components of DPI

DPI integrates critical components for secure, efficient, and accessible digital services:

- **Digital Identity**: Reliable online {term}`identification` systems for individuals and businesses.
- **Registries**: Specialized systems, such as {term}`Civil Registration and Vital Statistics` (CRVS) and social registries, that maintain comprehensive and official records.
- **Payments**: Systems for straightforward monetary transactions among people, businesses, and governments.
- **Data Exchange**: Fluid data flows between government and private sector, with robust personal {term}`data protection` measures.

## DPI in social protection

DPI plays a pivotal role in social protection, especially in low-and-middle-income countries (LMICs). It facilitates a rights-based and inclusive digital transformation by intertwining technology, governance, and local digital ecosystems. Implementing DPI in social protection schemes ensures adaptability, {term}`efficiency`, and inclusivity, addressing diverse societal needs.

### Real-World Examples and Impact

India has seen transformative impacts from DPI, with digital IDs provided to over a billion people, enhancing government service accessibility. In Mauritius, DPI has led to the development of over 500 new electronic services for citizens and businesses through robust data exchange mechanisms.

### The COVID-19 Pandemic and DPI

During the COVID-19 pandemic, DPI was invaluable in scaling {term}`social assistance` rapidly. Countries with established digital infrastructures, like digital IDs and payment systems, effectively expanded social assistance, including to previously uncovered populations. This underscored DPI's role in agile crisis response and its potential in future social protection strategies ([World Bank](https://openknowledge.worldbank.org/handle/10986/34710)).

## Open Source

DPI often relies on open-source technologies, making its code available for public use, adaptation, and improvement. This fosters flexibility and customization for diverse social protection programs. Note that, like proprietary solutions, open-source technologies may require local adaptations.

## Architecture of DPI Technology

### Interoperability

Interoperability in DPI, particularly in social protection systems, enables efficient data exchange across diverse platforms. {term}`beneficiaries` can receive {term}`cash transfers` through preferred channels, be it mobile money or a bank.

**Approaches**:

- Adoption of open standards and specifications for various payment methods.
- Utilization of universally recognized protocols for financial transactions.

### Modularity and Extensibility

Systems designed with extensibility adapt to changing needs using modular components, integrating into various systems to introduce new functionalities.

**Approaches**:

- Standardized, flexible data collection formats.
- Development of minimalist, modular components.

### Scalability for Innovation and Inclusion

Scalable systems extend digital solution access to diverse service providers and users, fostering innovation.

**Approaches**:

- Implementation of open APIs.
- Use of digital signatures and QR codes for streamlined operations.
- Creation of reusable software development kits.

### Federation

A federated data architecture mitigates risks associated with centralized databases.

**Approaches**:

- Deployment of federated database systems.
- Digitization and integration of existing registries.
- Development of wrapper APIs for registry interconnections.

### Security and Privacy

A zero-trust architecture is essential to protect users from digital threats and vulnerabilities.

**Approaches**:

- Tokenization and data masking techniques.
- End-to-end data encryption.
- Granular electronic consent mechanisms.
- Digital signatures for {term}`authentication` and data integrity.

## OpenSPP and DPI

### OpenSPP Overview

OpenSPP is an open-source, scalable, and modular digital social protection information system with high interoperability. It includes essential building blocks for program implementation and delivery. The OpenSPP team contributes to standards in social protection, collaborating with [G2P-Connect](https://g2pconnect.cdpi.dev/g2p-connect/readme) and the [Social Protection Digital Convergence Initiative](https://spdci.org), aligning with global best practices.

### Alignment with DPIs

OpenSPP offers diverse DPI building blocks like Social, Farmer, and Disability Registries, and Scheme Management, enabling comprehensive data management and service delivery.

It integrates with Civil {term}`registration` and Vital Statistics (CRVS) systems for accurate {term}`beneficiary` data and national identity systems for secure verification and authentication. OpenSPP's link with digital payment systems facilitates efficient benefit disbursement, ensuring timely support and reduced operational complexities. The team's involvement in G2P-Connect and Social Protection Digital Convergence Initiatives ensures robust, secure, and user-centric integrations.

## References and Resources

- [Centre for Digital Public Infrastructure](https://docs.cdpi.dev)
- [UNDP on The DPI Approach: A Playbook](https://www.undp.org/publications/dpi-approach-playbook)
- [Social Protection Digital Convergence Initiative](https://spdci.org)
- [Gates Foundation on What is digital public infrastructure](https://www.gatesfoundation.org/ideas/articles/what-is-digital-public-infrastructure)
</file>

<file path="docs/overview/concepts/extensibility.md">
# Customisable, Configurable, and Extensible

OpenSPP is a highly adaptable digital social protection information system designed to improve the {term}`efficiency` and {term}`effectiveness` of social protection programs in low and middle-income countries. Thanks to its foundation on the widely used ERP platform, Odoo, OpenSPP offers unparalleled customizability, configurability, and extensibility. This page aims to give technical personnel a thorough understanding of these key features.

## Customisable

OpenSPP's customizability is deeply rooted in its underlying Odoo framework, an open-source ERP platform known for its modular architecture and flexibility. This section will delve into the details of how Odoo empowers the customizability of OpenSPP.

### Modular Architecture

Odoo's modular architecture enables developers to create, change, and extend functionalities by working with individual modules. Each module encapsulates specific features, making it easier to develop, support, and upgrade the system without disrupting its core functionality. In OpenSPP, this modular approach allows countries to implement custom solutions that address their unique social protection requirements.

### Inheritance and Overrides

Odoo provides a powerful inheritance mechanism, which lets new modules extend, change, or override existing functionalities without altering the original code. This allows OpenSPP to be adapted to specific needs while preserving the ability to receive updates and enhancements in the future.

For example, a developer can create a new module that inherits from an existing module, extending its features or modifying its behavior to meet custom requirements. This can include adding new fields to existing models, changing the way certain methods work, or altering the user interface.

### Python and XML

Odoo is built using Python, a popular programming language with extensive libraries and community support. The platform also relies on XML to define user interface components and initial data. Leveraging these widely used technologies, developers can create custom modules for OpenSPP and change the platform to meet specific needs.

### Odoo Studio

```{note}
This is a paid feature offered by Odoo, not part of the OpenSPP project.
```

Odoo Studio is a user-friendly, visual tool for creating custom modules and changing existing ones. With its drag-and-drop interface, developers can create new applications, modify views, and design workflows without writing code. This lowers the barrier to entry for customizing OpenSPP, allowing even non-technical users to tailor the system to their needs.

## Configurable

OpenSPP's configurability allows implementers to adapt the system's functionality to various scenarios without requiring more customization. The platform offers many options to manage product offerings, rules, and workflows to accommodate diverse use cases.

## Extensible

OpenSPP's extensibility is in part a direct result of its foundation on the Odoo framework, which has been designed with extensibility and adaptability in mind. This section will explore the various aspects of Odoo that make OpenSPP a highly extensible solution.

### Large Ecosystem

Odoo boasts a vast ecosystem of pre-built modules and third-party applications developed by its extensive community. This wealth of resources enables OpenSPP users to access a wide range of functionalities and integrations, helping them address specific needs without starting from scratch. With over 15,000 modules available, the possibilities for extending OpenSPP are nearly endless.

### REST API and web services

OpenSPP provides powerful web services and REST APIs, allowing external applications and systems to interact with OpenSPP seamlessly. These APIs enable developers to retrieve, create, update, and delete data in OpenSPP, as well as call methods and execute workflows. By leveraging these web services, countries can integrate OpenSPP with other systems, such as payment gateways, reporting tools, or government databases.

### Custom add-ons path

Odoo enables administrators to specify custom add-ons paths, allowing the installation of third-party modules and extensions without modifying the core platform. This feature ensures that any added extensions or modules can be maintained separately from the core system, preserving the integrity of OpenSPP while allowing for future updates and enhancements.

## Summary

In summary, OpenSPP's customizable, configurable, and extensible nature, made possible by its Odoo foundation, enables implementers to develop tailor-made solutions for their social protection programs. The platform's modular customizations, configurable settings, and extensibility ensure a robust and adaptable system that can evolve alongside the ever-changing needs of low and middle-income countries.
</file>

<file path="docs/overview/concepts/farmer_registry.md">
# Farmer Registry

## What is a Farmer Registry?

A farmer registry is a system that contains information about farm holdings and farmholders. Its purpose is to provide a centralized and up-to-date source of data that can support planning and coordination of initiatives in the agricultural and social sectors focused on addressing rural poverty, food insecurity and climate change adaptation.

The use of farmer registries and agricultural censuses is a common practice globally, and many countries have a long history of implementing systems of agricultural documentation for administrative and tax purposes. The development of comprehensive farmer registries based on systematic data collection and their integration and interoperability with social protection management information systems and other data sources is a more recent occurrence.

Depending on the country’s context and requirements, a farmer registry may be used to collect data on all farmers or solely on smallholder and/or family farmers. Smallholder farmers typically engage in subsistence farming or small-scale commercial agriculture, relying on traditional or family-based methods and facing limited access to resources such as land, capital, and technology. However, the definition of a smallholder farmer varies between countries depending on what is considered to be ‘small’ in a particular context and what aspects are measured (e.g. land ownership, livestock, agricultural inputs). Farmer registries may also be extended to collect data on fisherfolk, foresters, workers in the extractive sector, landless farmers, or those working on communal lands.

Well-known examples of farmer registries being used in conjunction with social protection management information systems include Brazil’s Cadastro de Agricultura Familiar (CAF), which recently replaced DAP (Declaração de Aptidão ao Pronaf - Family Farming Register). Data from CAF is crossed with the Cadastro Único social registry and is used to plan, coordinate, implement and monitor programs providing rural credit, agricultural extension services and social assistance, including Brazil’s flagship social protection program Bolsa Familia.

Lebanon has recently launched a national Farmers Registry, which collects data on land parcel ownership and use, livelihood conditions, and comprehensive demographic and socio-economic data, including a module to classify households based on a multi-dimensional index for rural poverty. As Lebanon does not have a national social registry or broad social protection information system, the farmer registry plays a significant role in identifying vulnerable farming and fishing households, complementing the Government’s existing social assistance beneficiary registry, and ultimately enabling more people to access the National Poverty Targeting Program.

Karnataka State in India has developed a farmer registry named FRUITS (Farmer Registration and Unified Beneficiary Information System) that provides an inventory of smallholder farmers, land and benefits. The registry is integrated with Karnataka’s social protection information system Kutumba, national ID system Aadhaar, and Bhoomi, a digitalized land registration system focusing on land rights, tenancy and crops. This integration supports coordination across agricultural and social programs, and has even enabled the automatic granting of social protection benefits without the need to apply. For example, scholarships were automatically provided to all children from farming households studying in grades 8–10 (girls only) or above (both boys and girls).

## How does a Farmer Registry work?

The specific functions of farmer registries differ among the countries using them, depending on the agricultural context, existing management information systems, and other design considerations like responsiveness to shocks. Farmer registries typically have the following operational functions:

1. **Data collection.** Questionnaires are used to gather information on demographic and basic socio-economic data on farmers and their households, and data which is specific to agriculture such as land parcel ownership, rental and use; animal/livestock ownership; machinery ownership; access to irrigation; information on land degradation, crop condition monitoring and yield forecasting (e.g. via satellite imagery, where possible).

2. **Data validation and verification.** Applicant data can be validated by checking official documents such as land titles or identification cards, cross-verification with records contained in other administrative systems, local community validation processes, or use of GPS and geospatial technologies to validate the geographic location of farms and land parcels.

3. **Ongoing registration and information updates.** When a new farmer registry is being set up, mass registration is usually undertaken using a census sweep approach which aims to reach every resident or entity within the designated survey area. However, farmer registries can also be designed to allow for continuous and on-demand registration through periodic active outreach and registration at local government offices. This ensures that registrants who may have been missed in the initial mass registration can be added and allows for data updates in recognition of the fluctuating nature of poverty, food insecurity and weather-related events.

4. **Reporting and analysis.** Farmer registries may have self-contained functions to generate reports and analyze registry data. Or they may be integrated with external data analysis tools and dashboards to inform policy decisions, program planning, and resource allocation.

5. **Architectural components.** Comprise of data intake and exchange, data security and protection, management interfaces, interoperability, and necessary ICT infrastructure.

Privacy and confidentiality are key principles of farmer registries as they hold large amounts of sensitive {term}`personal data`. The privacy and confidentiality of individuals' data must be protected in accordance with a country’s legal and ethical standards. Accessible feedback mechanisms must also be provided so registrants can report inaccuracies or errors in their information. Usually, these are provided via the corresponding agricultural or social protection program.

## Integration and interoperability of a Farmer Registry

Farmer registries are essential tools for improving planning and coordination between agricultural and social sectors. Farmer registries can be designed to be interoperable and integrated with other data sources supporting the agricultural sectors, such as satellite-derived land surveillance data, geographic information systems, land records, data on soil conditions and crop yields, weather data, and social data sources such as beneficiary registries, social registries, disability registries, national identity and CRVS systems.

Together these data sources can support policy-design, planning and eligibility determination for programs and services, coordinate with climate change adaptation, and identify early warning triggers for environmental disasters or climate-related shocks and stresses which affect large numbers of people.

## Farmer Registry in the OpenSPP platform

The open-source Farmer Registry software developed by OpenSPP offers comprehensive identification and registration functions with the following key features:

1. **Registration.** Our Farmer Registry supports initial en masse registration and surveys. Our data collection system leverages CommCare and can handle various data types, including geospatial information. It can be customized to suit linguistic or cultural requirements, improving the cultural appropriateness, accessibility, and quality of data collected.

2. **Data management and standardization.** The platform excels in managing and transforming varied information into standardized formats. This capability is crucial for seamless integration with management information systems (MIS) for various social programs, ensuring data consistency and reliability.

3. **Dynamic registration and updates.** Our Farmer Registry can support ongoing registration and updates through continuous on-demand registration or periodic reassessments.

4. **Interoperability with other data sources.** The OpenSPP platform is particularly strong in its interoperability capabilities. Our Farmer Registry can pull data from Geographic Information Systems, National Identity and CRVS systems, supporting efficient data management and verification.

5. **Advanced GIS Capabilities with GeoJSON API and QGIS Integration.** Offering sophisticated mapping and spatial analysis tools, these features provide in-depth insights into land use, crop distribution, and more, facilitating detailed agricultural planning and decision-making.

6. **Privacy and security.** The OpenSPP team rigorously upholds data privacy and security standards. Our products are designed to ensure that personal or sensitive data and transactions are protected.

For more information about OpenSPP’s Farmer Registry contact us through our [website](https://openspp.org/contact-us/).

## References

- [Barca V and Hebbar M (2023) Farmer registries and social protection information systems. FAO, GIZ](https://socialprotection.org/sites/default/files/publications_files/230222_giz_sosi_pub-05_v_10%5B34%5D.pdf)
- [Digital Convergence Initiative (2023) Social protection management information system interacting with farmer registry. Social Protection Interoperability Series: Interoperability in Action #4](https://socialprotection.org/sites/default/files/multimedia_files/Interoperability-in-Action-Farmer-Workshop-27-April-Workshop-4.pdf).
<!-- [FAO (2018) Farmers' Registry - A tool in support of small scale agriculture and rural poverty reduction - Webinar](https://socialprotection.org/sites/default/files/publications_files/Webinar%20Presentation%20-%20Farmers%27%20Registries.pdf) -->
- [HLPE (2013) Investing in smallholder agriculture for food security. A report by the High Level Panel of Experts on Food Security and Nutrition of the Committee on World Food Security, Rome.](https://www.fao.org/3/i2953e/i2953e.pdf)
- [Lorenzon F (2018) Farmers' Registry - A tool in support of small scale agriculture and rural poverty reduction. Blog written for socialprotection.org based on FAO webinar of the same title.](https://socialprotection.org/discover/blog/farmers-registry-tool-support-small-scale-agriculture-and-rural-poverty-reduction)
</file>

<file path="docs/overview/concepts/index.md">
# Concepts

Distinct from tutorials or how-to guides, which are action-oriented, explanations delve into theoretical knowledge. This type of documentation does not focus on the minute details like reference materials but instead takes a higher-level perspective.

- {doc}`digital_public_infrastructure`
- {doc}`social_registry`
- {doc}`farmer_registry`
- {doc}`integrated_beneficiary_registry`
- {doc}`sp_mis`
- {doc}`user_management`
- {doc}`data_collection_validation`
- {doc}`registrant_concepts`
- {doc}`registry_key_concepts`
- {doc}`data_protection`
- {doc}`extensibility`
- {doc}`openg2p`

```{toctree}
---
caption: Learn
maxdepth: 2
hidden: true
---

digital_public_infrastructure
social_registry
farmer_registry
integrated_beneficiary_registry
sp_mis
user_management
data_collection_validation
registrant_concepts
registry_key_concepts
data_protection
extensibility
openg2p
```
</file>

<file path="docs/overview/concepts/integrated_beneficiary_registry.md">
# Integrated Beneficiary Registry

In the realm of {term}`social protection`, an {term}`Integrated beneficiary registry` (IBR) plays a pivotal role. It acts as a comprehensive {term}`information` warehouse, consolidating data about {term}`beneficiaries` from multiple programs across various stages of life. This integration not only streamlines processes but also enhances the {term}`effectiveness` and {term}`efficiency` of social protection systems.

## The Role of an Integrated beneficiary Registry

1. **Coordination and Analytics**: An IBR primarily functions as a back-office tool for social planning and finance agencies. It coordinates across different social protection pillars, monitoring who {term}`benefits` from which programs. This function is crucial for comprehensive analytics, budgeting, and planning, including understanding the actual coverage of social programs.

2. **Program Administration**: For program administrators, an IBR, especially if maintained in real-time, is invaluable. It provides insights into other benefits and {term}`services` their client populations are receiving, aiding in {term}`intermediation` and referral processes.

3. **Citizen Engagement**: From the perspective of beneficiaries, a real-time updated IBR allows them to check their benefit status and service referrals, fostering transparency and trust in social protection systems.

## Key Components of an Integrated Beneficiary Registry

- **Demographic Information**: Includes ID, age, sex, {term}`family` members, etc.
- **Contact Information**: Address, phone number, and email (if available).
- **{term}`household` Composition**: Details about the beneficiary's household, including relationship with the beneficiary and educational status of household members.
- **Program Enrollment**: Information on programs in which beneficiaries are or were enrolled.
- **Benefit History**: Details of assistance received, payment history, and duration of participation.
- **Socioeconomic Data**: Such as poverty scores.

## Advantages of an Integrated Beneficiary Registry

- **Enhanced Monitoring and Evaluation**: Provides a platform for near real-time verification and validation.
- **Improved Resource Allocation**: Aids in data-driven policy design and efficient resource allocation.
- **Increased Operational Efficiency**: Facilitates integrated operations like payments and {term}`grievance` handling, thereby enhancing program delivery.

## Challenges and Considerations

Implementing an IBR comes with its own set of challenges, including {term}`data privacy` concerns, the need for real-time data updating, and ensuring interoperability with other social protection systems. It requires robust system architecture and careful consideration of data security standards.

## Relation to the social registry

A {term}`social registry` is a comprehensive informational tool that collects, stores, and manages data about potential beneficiaries for social programs. Unlike the Integrated Beneficiary Registry, which focuses on individuals currently receiving benefits, a Social Registry encompasses a broader population, including those who are potentially eligible for various social programs.

### Key Differences and Interactions

1. **Scope of Data**: While an IBR focuses on current beneficiaries, a Social Registry includes a wider demographic, capturing information on all individuals who have been assessed for potential {term}`eligibility`.

2. **Purpose and Use**: The Social Registry serves as a gateway for enrollment into different social programs. It is used for {term}`targeting` and identifying eligible beneficiaries, whereas the IBR tracks and manages those who are already enrolled.

3. **Data Flow and Integration**: Information from the Social Registry often feeds into the IBR when individuals become program beneficiaries. This flow underscores the interconnectivity between these two systems, ensuring a seamless transition from potential to actual beneficiary status.

4. **Policy and Planning Insights**: While both registries offer valuable insights for policy-making and program planning, the Social Registry provides a broader perspective on the potential needs and eligibility profiles across a population, complementing the actual beneficiary data from the IBR.

### Complementary Functions in Social Protection

Together, these registries form a comprehensive information system for social protection. The Social Registry identifies and assesses potential beneficiaries, while the IBR manages and monitors those who receive benefits. This complementary relationship enhances the overall effectiveness and efficiency of social protection programs, ensuring that resources are appropriately allocated and that eligible individuals receive the support they need.

## Conclusion

The Integrated Beneficiary Registry is a cornerstone in modern social protection {term}`information systems`. By providing a unified view of beneficiary information, it not only enhances the effectiveness of social protection programs but also contributes to better policy-making and improved service delivery. As social protection systems evolve, the role of an IBR will become increasingly critical in ensuring equitable and efficient distribution of social benefits.

## References

- [SPDCI - Social Protection Information System Interacting with Integrated
  Beneficiary Registry](https://spdci.org/resources/interoperability-in-action-7-integrated-beneficiary-registry-english-recording/)
</file>

<file path="docs/overview/concepts/registrant_concepts.md">
# Key Terminology

Registrants are at the heart of OpenSPP. They are the people or groups that are being registered to be
included in {term}`social protection` programs.

A {term}`registrant` can be:

- A `group`
- An `individual`

Depending on the project's requirements, a registrant can simply contain a `name` or full biographic
information, ID document numbers, pictures, bank account numbers, phone numbers and more.

::::{important}

Consider only collecting the data you really need when conducting a project.

<!--  See: [Principles for Digital Development - Address Privacy & Security](https://digitalprinciples.org/principle/address-privacy-security/). -->

::::

## Concepts

### Individual

An `individual` is a registrant that represents a person. It will have all the fields of a `registrant` plus
some additional ones.

![Individual List](images/registrants/individual_list.png)

![Individual Interface](images/registrants/indivividual_ui.png)

### Group

A group is a `registrant` that represents a set of individuals. It will have all the fields of a `registrant`
plus some additional ones.

![Group List](images/registrants/group_list.png)

![Group Interface](images/registrants/group_ui.png)

For example, groups could represent:

- A {term}`household`
- A {term}`family`
- A school
- ...

Groups do not need to contain individuals registrants. They can just contain their number of members.

For example:

- Adults: 2
- Children: 3
- Elderly: 2

### Group membership

Individuals can be part of one or more groups. They can have specific roles in a group.

![Group Membership](images/registrants/group_membership.png)

By default, the following roles exist:

- Head (There can be only one per group)
- Principal recipient (There can be only one per group)
- Alternative recipient

An `admin` has the right to add other roles using the configuration menu.

![Group Membership type](images/registrants/group_membership_type.png)

An individual can be the head of a group but have another or no role in another group.

### Registrants relations

When you need to store the relationship between registrants those relations can be useful.

![](images/registrants/registrant_relations.png)

You can define relationship type between different entities:

- Group - Group
- Individual - Individual
- Individual - Group

![](images/registrants/registrant_relation_config.png)

For example:

- Sibling (Individual - Individual)
- Parent/Child (Individual - Individual)
- Caretaker (Individual - Group)
- Neighbour (Group - Group)

### ID Documents

Registrants can have one or more ID Documents.

![](images/registrants/registrant_ids.png)

The system does not enforce uniqueness of Document ID by default. If uniqueness is required, {term}`deduplication`
should be performed.

ID Document types can be configured by an administrator.

### Event Data

Event data is a way to store information about a registrant that is not part of the registrant's profile. It
allows to store information without the need to modify the registrant's profile, providing few {term}`benefits`:

- Store multiple version of the data
- Manage separate data lifecycle, sharing agreements, etc.
- Better manage the source of different data
- Store data that should not be visible to all users

This data can be a lot of things:

- House visit
- Raw import data
- Information coming from another system through synchronization
- Data that loose relevance over time

The data stored in `Event Data` can be used in OpenSPP as a normal field by using computed fields.

## Importing registrants

### Import from CSV/Excel

These are the steps to follow:

1. Open the Import records menu.

![](images/registrants/import_2.png)

2. Upload your import file.

![](images/registrants/import_3.png)

3. Map the fields in your file to the fields in OpenSPP.

![](images/registrants/import_mapping.png)

![](images/registrants/import_4.png)

### Using Import to update data

The import feature can also be used to update existing data. The easiest way to achieve this is to export the
data with the export feature by enabling the `I want to update data (import-compatible export)`

![](images/registrants/export_to_import.png)

### Import from ODK Central

TBD

## Exporting Registrants

### Export to Excel or CSV

Both Groups and Individuals can be exported.

These are the step to follow:

1. Filter the registrants you want to export using the list filtering features.

![](images/registrants/export_2.png)

2. Select the registrants you want to export.

![](images/registrants/export_1.png)

3. Click on export from the action menu.

![](images/registrants/export_3.png)

4. Configure your export. You can create your own export template to make the process faster.

![](images/registrants/export_configure.png)

5. Click on Export, your Excel (XLSX) or CSV export will be downloaded.

To learn more about export capabilities, read the Odoo documentation.

## API

### Odoo API

Odoo is providing a [generic API](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html)
based on [XML-RPC](https://en.wikipedia.org/wiki/XML-RPC) for all the models in the systems. This API can be
used to import or export any data into the system.

### REST API

The REST API is currently being reworked.
</file>

<file path="docs/overview/concepts/registry_key_concepts.md">
# Organizing Data in the Registry

## Importance of Minimizing Data in the Registry for OpenSPP

In OpenSPP, maintaining a minimalistic approach to the data stored in the registry is crucial while managing additional information on a per-program basis. This practice offers several key advantages, making the system more efficient, secure, and adaptable.

Firstly, enhancing privacy and security is a primary benefit. By limiting the amount of data stored in the central registry, the risk of exposure in case of a data breach is significantly reduced. This practice also helps comply with data protection regulations by minimizing the amount of personal data held centrally.

Secondly, a lean registry simplifies data management and ensures accuracy. With fewer data points to maintain, the administrative burden is reduced, making it easier to keep essential information current and accurate. This leads to more reliable data and less effort required for data management.

From a performance standpoint, smaller datasets improve system efficiency. This results in faster query responses and better scalability, allowing the system to handle growth without performance issues. A minimal registry ensures that OpenSPP can expand smoothly and maintain high performance.

Flexibility is another significant benefit of this approach. Storing data on a per-program basis allows for customization according to specific needs. Programs can manage and update their data independently, leading to more responsive and adaptable operations that cater to diverse requirements.

Maintaining data consistency and integration is also easier with a minimal registry. This approach prevents redundancy and ensures consistency across various programs. It also facilitates smoother integration with external systems by keeping the central registry focused on essential linking data, making interoperability more straightforward.

Resource optimization is achieved by reducing data storage requirements. This leads to cost savings and better resource allocation, enhancing overall system efficiency. A streamlined registry means fewer resources are needed for storage and maintenance, allowing those resources to be allocated more effectively elsewhere.

Balancing core registry data with program-specific data ensures that essential information remains up-to-date and universally accessible, while program-specific details are managed separately for greater precision. This balance supports both the overarching needs of OpenSPP and the specific needs of individual programs.

Finally, separating static data from dynamic data allows for accurate representation and easy updates. Static data, such as names and birthdates, are stored in the core registry, while dynamic data, like income changes or program participation, are managed as {term}`event data`. This separation keeps the core registry uncluttered and efficient, facilitating better management and updates.

By adopting these practices, OpenSPP ensures secure, efficient, and scalable data management, effectively supporting diverse program needs while maintaining a robust core infrastructure.

## Deciding Where to Store Data in OpenSPP

To effectively decide where different types of data should be stored in OpenSPP, it is essential to categorize the data into one of the following five categories: static core registry, dynamic core registry, static program, dynamic program, or not needed to be stored. This decision process ensures optimal data management, security, and efficiency. Here's a guide to help make these decisions:

1. **Static Core Registry**

   - **Characteristics:** Information that is unlikely to change over time or that does not change often and is universally relevant across all programs.
   - **Examples:** Names, birthdates, national identification numbers, contact details, marital status, address.
   - **Guidelines:**
     - Does the data remain constant throughout an individual's lifetime?
     - Is the data required by all programs for identification or basic profiling?
     - Is the data critical for decision-making or program operation?
     - Does storing this data comply with data minimization principles?

2. **Dynamic Core Registry**

   - **Characteristics:** Information that changes periodically and is relevant across multiple programs.
   - **Examples:** Household income level, poverty score.
   - **Guidelines:**
     - Does the data change but is still needed universally by all programs?
     - Is it important to keep this data updated centrally for all programs to access?
     - Is the data critical for decision-making or program operation?
     - Does storing this data comply with data minimization principles?

3. **Static Program**

   - **Characteristics:** Information that is specific to a particular program and does not change frequently.
   - **Examples:** Enrollment date in a specific program, initial eligibility criteria.
   - **Guidelines:**
     - Is the data relevant only to a specific program?
     - Is it unlikely to change once recorded?
     - Is the data critical for decision-making or program operation?
     - Does storing this data comply with data minimization principles?

4. **Dynamic Program**

   - **Characteristics:** Information that is specific to a particular program and changes over time.
   - **Examples:** Program participation status, progress updates.
   - **Guidelines:**
     - Is the data relevant only to a specific program and likely to change over time?
     - Does the program need to track updates or changes in this data?
     - Is the data critical for decision-making or program operation?
     - Does storing this data comply with data minimization principles?

5. **Not Needed to be Stored**
   - **Characteristics:** Information that is either unnecessary to store or can be derived from other data.
   - **Examples:** Temporary notes, redundant data, derived metrics.
   - **Guidelines:**
     - Is the data critical for decision-making or program operation?
     - Can the data be derived from other stored information?
     - Does storing this data comply with data minimization principles?

### Steps to Decide Data Storage

1. **Identify the Data Type:** Determine if the data is static or dynamic, and whether it applies universally or to a specific program.
2. **Assess the Necessity:** Evaluate if storing the data is essential for operations, decision-making, or compliance with regulations.
3. **Determine Accessibility Needs:** Consider who needs access to the data and how often it will be accessed or updated.
4. **Evaluate Cost, Security Risk, and Value:** Assess the cost of storing the data, the security risk it poses, and the value it adds.
   - **Cost:** Consider data collection costs, maintenance efforts, and potential impacts on system performance.
   - **Security Risk:** Evaluate the potential risks associated with storing the data, such as data breaches or unauthorized access.
   - **Value:** Determine the importance and utility of the data for program operations and decision-making.
5. **Apply the Guidelines:** Use the characteristics and guidelines provided above to categorize the data into one of the five categories.
6. **Review and Confirm:** Regularly review the categorization to ensure it remains appropriate as programs and data usage evolve.

### Practical Tips

- **Collaborate with Stakeholders:** Involve program managers and data analysts in the decision-making process to ensure all perspectives are considered.
- **Document Decisions:** Keep a record of why each data type was categorized a certain way to maintain clarity and consistency over time.
- **Stay Updated with Regulations:** Ensure compliance with data protection regulations by regularly reviewing and updating data storage practices.

### Example Scenario

**Data Type:** Household income level

- **Static Core Registry:** No, because it changes over time.
- **Dynamic Core Registry:** Yes, because it changes periodically but is needed by multiple programs for eligibility and benefit calculations.
- **Static Program:** No, because income can fluctuate.
- **Dynamic Program:** Potentially, but given its relevance across multiple programs, it fits better in the dynamic core registry.
- **Not Needed to Store It:** No, it is essential data for program eligibility and benefit calculation.

**Decision:** Store household income level in the dynamic core registry, considering its periodic changes and its relevance across multiple programs.

## Key concepts for organizing data in the OpenSPP registry

OpenSPP's registry is structured around four main components:

- **Registrant**
- **Group Membership**
- **Event Data**
- **Change Requests**

The `core registry` should maintain minimal information about the registrants to adhere to data minimization principles. This approach ensures the system remains manageable and maintainable over time.

## Registrant

### Definition

Registrants are individuals, families, households, farms, etc., who have provided their information during the intake and registration phase of the delivery chain. Registrants can provide their information either on their initiative (on demand; see applicants) or at the initiative of a public agency or program (e.g., en masse registration/census sweeps). In the latter case, they are not termed applicants because they did not technically “apply” for benefits and services.

In OpenSPP, there are two primary categories of registrants:

- **Individuals**
- **Groups**

Both categories use the same model: `res.partner`. This model leverages the extensive module ecosystem available in Odoo. Registrants have a field named `is_registrant` to filter them in the registry. To differentiate between Individuals and Groups, the field `is_group` is used.

OpenSPP supports flexible use cases:

- Use only individuals.
- Use only groups.
- Use both individuals and groups, linked through the `g2p.group.membership` model, which connects individuals to their respective groups.

#### Individuals

Individuals represent a single person, which can be a real person or a dummy person. They are the smallest unit of registrant in the OpenSPP registry.

#### Groups

Groups represent a collection of individuals that share something in common, such as a family, household, farm, community, village, school, company, cooperative, or any other type of group.

Groups can optionally be nested within other groups, such as a household being part of a cooperative. For this functionality, the `spp_registry_group_hierarchy` module is required.

## Group Membership

Group Membership in OpenSPP is a crucial feature that connects individuals to various groups, allowing for an organized and structured representation of relationships within the registry. This component ensures that data about how individuals are associated with larger entities like families, households, or organizations is clear and easily manageable.

### Key Elements

Group Membership revolves around a few key elements:

1. **Membership Type**: This defines the role or type of membership an individual has within a group. For example, in a family group, one member might be designated as the head of the household. Some roles can be unique, meaning only one person can hold that role within a group.

2. **Start Date**: This indicates when the membership began, providing a timeline of the individual's association with the group.

3. **End Date**: If applicable, this marks when the membership ended, helping track changes over time.

4. **Status**: The status of a membership is automatically

determined based on the end date. It can be either "active" if the membership is ongoing or "inactive" if it has ended.

### Example Structure

To illustrate, consider a scenario where several farms are part of larger farmer groups. Each farm includes multiple individuals working on them, and these farms can also be associated with different farmer groups. This structure allows for a clear and organized way to manage and visualize the relationships between individuals and their respective groups.

```mermaid
graph TD
    A(Farmer Group 1) --- B(Farm A)
    A --- C(Farm B)
    D(Farmer Group 2) --- C
    D --- E(Farm C)
    B ---|head| F(Individual 1):::head
    B --- G(Individual 2)
    C ---|head| H(Individual 3):::head
    C --- I(Individual 4)
    E ---|head| J(Individual 5):::head
    E --- K(Individual 6)
    E --- L(Individual 7)
    C --- L(Individual 7)

    classDef farmerGroup fill:#FFD700,stroke:#333,stroke-width:4px;
    classDef farm fill:#7CFC00,stroke:#333,stroke-width:2px;
    classDef individual fill:#00BFFF,stroke:#333,stroke-width:1px;
    classDef head stroke-width:2px,stroke-dasharray: 5,5;

    class A,D farmerGroup;
    class B,C,E farm;
    class F,G,H,I,J,K,L individual;
    linkStyle 4 stroke-dasharray: 5,5;
    linkStyle 6 stroke-dasharray: 5,5;
    linkStyle 8 stroke-dasharray: 5,5;
```

### Rules and Validation

Certain rules ensure the integrity and consistency of the data:

- **Unique Roles**: Some roles within a group must be unique. For instance, a group can have only one head of household.
- **End Date**: The end date of a membership cannot be earlier than the start date, ensuring logical consistency.
- **Duplication**: An individual cannot be added to the same group more than once, preventing data redundancy.

By understanding and utilizing the Group Membership feature, users can effectively manage complex relationships within the OpenSPP registry, ensuring that the data remains organized, accurate, and easy to navigate.

## Event Data

Records of significant occurrences related to registrants, such as registration events, updates, or any other tracked activities.

## Change Requests

Requests for modifications to registrant data, including the workflow for approval and implementation of these changes.

By integrating the decision-making process for data storage and organizing the core components efficiently, OpenSPP ensures a robust, scalable, and secure system for managing social protection programs. This approach not only supports diverse program needs but also maintains a streamlined and efficient core infrastructure.
</file>

<file path="docs/overview/concepts/social_registry.md">
# Social Registry

## What is a Social Registry?

A social registry is a database or system that contains information on households and individuals within a specific population. Its purpose is to provide a centralized and up-to-date source of data that can be used for {term}`targeting`, planning, and implementing {term}`social protection` programs. Social registries are designed to enhance fairness and equity in the targeting of social protection programs by introducing systematic and transparent approaches to identify those in need. Social registries are most often used in household-based poverty-targeted social protection programs.

Social registries generally support the initial identification and registration, and needs assessment phases of social protection implementation and delivery, as illustrated below.

![](images/social_registry.jpg)

One of the first examples of a social registry was developed in the late 1990s for the Bolsa Familia social protection program in Brazil. The Cadastro Único collects and stores information about Brazil’s low-income and vulnerable populations. It is now used as a key tool by the Government, not only for identifying and selecting households for the Bolsa Familia, but also to identify and provide assistance to the most vulnerable Brazilians via 27 other social programs.

Social registries are now used in 50 countries across the world. Examples include Pakistan’s National Social Economic Registry (NSER), Indonesia’s Data Terpadu Kesejahteran Sosial (DTKS) and Colombia’s Sistema de Identificación de Potenciales Beneficiarios de Programas Sociales (Sisbén).

While earlier designs of social registries were static or ‘fixed’ due to the data being collected at a particular period in time through mass registrations, social registries are now increasingly designed to be dynamic, recognising the fluctuating nature of poverty and vulnerability. Social registries which use a dynamic approach to registration through on-demand registration, periodic active outreach, registration at local government offices, integration with civil registries, national identification systems, and other registries can better adjust their social protection programs accordingly and meet the needs of vulnerable populations. Brazil’s Cadastro Único is considered an example of a dynamic registry, while Pakistan’s NSER is currently a static registry.

## Operational Functionality of Social Registries

The specific functions of social registries differ among the countries using them, depending on the type of social protection programs they support, existing management information systems, and design considerations like responsiveness to shocks. Social registries typically have the following functions:

1. **Data collection.** Standardized {term}`registration` questionnaires are used to gather demographic, socio-economic, and household information for a given population. At this stage, individuals or households are referred to as registrants.

2. **Data validation and verification.** Applicant data is validated by checking official documents such as identification cards, cross-verification with records contained in other administrative systems, or through local community validation processes.

3. **Information sharing.** A complete data overview is developed by bringing together citizen-provided data and integration with systems including National IDs, CRVS and disability registries.

4. **Eligibility assessments.** Clear criteria, formats and indicators are applied to support transparent and standardized {term}`eligibility` assessments for social protection programs. Specific criteria can be used to identify and target vulnerable groups, such as pregnant women, children, or individuals with disabilities. Households can be ranked based on the assessment of their needs and conditions, commonly through the application of a poverty-scoring method such as {term}`proxy means testing`.

5. **{term}`Decentralized` eligibility determination.** Lists of potentially eligible households or ranked lists of all households can be shared with individual program implementers or decentralized counterparts, and adapted to local contexts and needs.

6. **Ongoing registration and information updates.** Social registries are increasingly designed to be dynamic and allow for on-demand registrations and updates, periodic active outreach, registration at local government offices and integration with civil registries, national identification systems, and other registries.

7. **Reporting and analysis.** Social registries may have self-contained functions to generate reports and analyze registry data. Or they may be integrated with external data analysis tools and dashboards to inform policy decisions, program planning, and resource allocation.

8. **Architectural components.** Comprise of data intake and exchange, data security and protection, management interfaces, interoperability, and necessary ICT infrastructure.

Privacy and confidentiality are key principles of social registries as they hold large amounts of sensitive {term}`personal data`. The privacy and confidentiality of individuals' data must be protected in accordance with a country’s legal and ethical standards. Social registries must also provide accessible feedback mechanisms (usually via the corresponding social protection program), or through integration with {term}`Grievance redress mechanism (GRM)` so that registrants can appeal against eligibility decisions or report inaccuracies or errors.

## Integration and interoperability of social registries

Social registries can be used to identify beneficiaries for single or multiple social protection programs. They may also be designed to be interoperable and integrated with other critical systems as part of a broader {term}`information systems`. Social registry data can be exchanged and coordinated with various government databases such as integrated beneficiary registries, farmer registries, disability registries, health records, education systems, and employment databases. This contributes to more precise targeting, reduces redundancy in data collection, and ensures a unified and efficient delivery of social protection and other public services. However, in certain situations, self-contained social registries may be preferred due to legal and ethical considerations where integration may raise concerns about {term}`information security` and {term}`data privacy`.

## Social Registry in the OpenSPP platform

The open-source Social Registry software developed by OpenSPP offers comprehensive identification, registration, and needs assessment functions with the following key features:

1. **Registration.** Our Social Registry supports initial en masse registration and surveys. Our data collection system leverages CommCare and can handle a wide range of data types. It can be customized to suit linguistic or cultural requirements, improving the cultural appropriateness, accessibility, and quality of data collected.
2. **Data management and standardization.** It is equipped to manage diverse information efficiently, transforming it into standardized formats for integration into various social programs.
3. **Dynamic registration and updates.** Our Social Registry can support continuing data updates through continuous on-demand registration or periodic reassessments.
4. **Interoperability with other data source.** The OpenSPP platform is particularly strong in its interoperability capabilities. It supports the Digital Convergence Initiative’s CRVS API to [interact with CRVS such as OpenCRVS](https://www.youtube.com/watch?v=6X1dpWPILj0) and with national Identity systems to pull data, providing a foundational layer for efficient data management and verification. The OpenSPP team is also active in building a new standard for interoperability between SP-MIS and Social Registry as part of another Digital Convergence Initiative technical working group.
5. **Eligibility assessment.** OpenSPP allows for registrant data to be analyzed based on information and indicators captured in the system, such as household size and composition. Poverty calculations can be applied household socioeconomic data, such as Proxy Means Tests. Indicators can be easily updated and income tests modified to ensure that they align with evolving socio-economic contexts and are relevant and accurate.
6. **Privacy and security.** The OpenSPP team rigorously upholds data privacy and security standards. Our products are designed to ensure that personal or sensitive data and transactions are protected.

For more information about OpenSPP’s Social Registry contact us through our [website](https://openspp.org/contact-us/).

## References

- [Barca V and Hebbar M (2020) On-Demand and Up-to-Date? Dynamic Inclusion and Data Updating for Social Assistance. GIZ](https://socialprotection.org/sites/default/files/publications_files/GIZ_DataUpdatingForSocialAssistance_3.pdf)
- [Chirchir R and Farooq S (2016) Single Registries and Social Registries: clarifying the terminological confusion. Development Pathways](https://www.developmentpathways.co.uk/wp-content/uploads/2016/11/Single-and-Social-Registries-1.pdf)
- [Digital Convergence Initiative (2023) Social protection management information system interacting with social registry. Social Protection Interoperability Series: Interoperability in Action #6.](https://spdci.org/resources/interoperability-in-action-6-social-registry-workshop-recording/)
- [Leite, P, Karippacheril, T and Lindert, K (2017). Social Registries for social assistance and Beyond: A Guidance Note & Assessment Tool. World Bank](https://www.researchgate.net/publication/340858942_Social_Registries_for_Social_Assistance_and_Beyond_A_Guidance_Note_and_Assessment_Tool)
- [World Bank Group. (2020). "The World Bank Sourcebook on the Foundations of Social Protection delivery systems."](https://openknowledge.worldbank.org/entities/publication/c44dc506-72dd-5428-a088-6fb7aea53095)
</file>

<file path="docs/overview/concepts/sp_mis.md">
# Social Protection Management Information Systems

Social Protection Management information Systems (SP-MIS) are integrated digital platforms that facilitate the administration, coordination, and monitoring of social protection programs. They are designed to streamline the processes involved in delivering social protection services, from {term}`beneficiary` {term}`identification` to program evaluation, ensuring efficient and effective implementation of these programs.

## Operational Functionality of SP-MIS

SP-MIS are comprehensive platforms, playing a central role in the administration of social protection programs. Key functionalities include:

1. **Beneficiary Management**: Managing the lifecycle of {term}`beneficiaries` from {term}`registration`, {term}`eligibility` determination, to the delivery of {term}`benefits`. This involves collecting and processing data to identify and enroll eligible individuals or households in various social programs.

2. **Program Administration**: Facilitating the operational aspects of social protection programs, including planning, budgeting, fund disbursement, and compliance monitoring.

3. **{term}`data integration` and Analysis**: Integrating data from multiple sources, including Social Registries and other government databases, to provide a holistic view of beneficiaries and program impact. Advanced data analytics enable informed decision-making and policy development.

4. **Payment and Financial Management**: Managing financial transactions, including benefit disbursement to beneficiaries, through secure and transparent channels. This often involves integration with banking systems or digital payment platforms.

5. **Monitoring and Evaluation (M&E)**: Enabling the tracking of program performance against set objectives, assessing the {term}`effectiveness` and impact of social protection interventions.

6. **Interoperability with Other Systems**: Seamless integration with other government systems, such as National IDs, health, and education databases, for comprehensive beneficiary profiling and program alignment.

7. **Data Security and Privacy**: Ensuring high standards of {term}`data protection` and privacy compliance, safeguarding sensitive beneficiary information against unauthorized access and breaches.

8. **User Accessibility and Interface**: Providing user-friendly interfaces for administrators, beneficiaries, and stakeholders, facilitating easy access to information and services.

## SP-MIS and Social Registries

SP-MIS and Social Registries are complementary systems in social protection frameworks. While Social Registries focus on the initial identification and assessment of potential beneficiaries, SP-MIS manage the ongoing administration and monitoring of beneficiaries within programs.

### Key Aspects

1. **Data Flow from Social Registries to SP-MIS**: Information about potential beneficiaries identified in Social Registries is used to enroll individuals in specific social protection programs managed by SP-MIS.

2. **Program Management and Administration**: SP-MIS handle the operational aspects of program delivery, ensuring efficient management of resources and beneficiary support.

3. **Beneficiary Lifecycle Management**: SP-MIS track the entire lifecycle of beneficiaries within programs, from initial enrollment to exit, ensuring timely and appropriate service delivery.

4. **Integration for Policy and Operational Efficiency**: The linkage between Social Registries and SP-MIS is crucial for achieving policy coherence and operational efficiency in social protection systems.

## SP-MIS in Action

### Features and Capabilities

1. **Comprehensive Beneficiary Management**: SP-MIS are equipped to handle complex beneficiary data, from intake to ongoing management, including changes in eligibility and circumstances.

2. **Program Flexibility and Scalability**: Designed to be adaptable and scalable, SP-MIS can accommodate a range of social protection interventions, from {term}`cash transfers` to {term}`social insurance` schemes.

3. **Advanced Data Capabilities**: Featuring robust data processing and analysis tools, SP-MIS enable real-time monitoring and data-driven decision-making for continuous program improvement.

4. **User-Centric Design**: Focusing on accessibility, SP-MIS offer interfaces tailored to different user groups, enhancing user experience and stakeholder engagement.

## OpenSPP and Its Role as an SP-MIS

OpenSPP, while versatile in its application, primarily functions as a Social Protection Management Information System (SP-MIS). This section explores how OpenSPP embodies the characteristics of an SP-MIS and its capabilities as a {term}`social registry`.

### OpenSPP as a Core SP-MIS

1. **Comprehensive Beneficiary Management**: At its heart, OpenSPP is designed to manage the lifecycle of beneficiaries efficiently. This includes registration, eligibility assessment, and enrollment in various social protection programs.

2. **Program Administration and Monitoring**: OpenSPP facilitates the administration of social protection programs, encompassing aspects like budgeting, fund allocation, compliance monitoring, and performance evaluation.

3. **Data Integration and Analysis**: Leveraging its capacity for data integration, OpenSPP consolidates information from various sources, providing a unified view of beneficiaries and enabling informed decision-making based on robust data analytics.

4. **Payment and Financial Transactions**: OpenSPP manages financial aspects such as disbursements and transactions, ensuring secure and transparent handling of funds and payments related to social protection services.

5. **Interoperability with Government Systems**: Demonstrating strong interoperability features, OpenSPP integrates seamlessly with other government systems like National IDs, social registry and CRVS, enhancing the comprehensiveness of beneficiary data.

## Alternative Names for SP-MIS

The Social Protection Management Information Systems (SP-MIS) are known by various names around the world, reflecting their diverse functionalities and the specific contexts in which they operate. Understanding these alternative names can be crucial for professionals working in the field of social protection, as it aids in recognizing similar systems under different terminologies. Here are some of the most common alternative names for SP-MIS:

1. **Social Safety Net Systems (SSNS)**: Focused on safety net programs like cash transfers and food assistance.

2. **Beneficiary Management Systems (BMS)**: Highlighting the management of beneficiaries in social protection programs.

3. **Social Assistance Information Systems (SAIS)**: Used for systems primarily dealing with social assistance and poverty alleviation.

4. **Integrated Social Services Systems (ISSS)**: When the system integrates a range of social services including healthcare and education.

5. **Public Assistance Information Systems (PAIS)**: Pertaining to information management in public assistance programs.

6. **Welfare Information Systems (WIS)**: Focused on a broad array of welfare services and supports.

Understanding these terminologies is essential for navigating the global landscape of social protection information systems and recognizing their applications in different policy and programmatic contexts.

### Conclusion

OpenSPP exemplifies the core strengths of Social Protection Management Information Systems (SP-MIS), offering robust functionality in managing social protection programs. As an SP-MIS, OpenSPP excels in beneficiary management, program administration, data integration, and monitoring. Its additional capability to function as a social registry further enhances its value, making it a comprehensive and versatile tool for both identifying potential beneficiaries and administering social protection services efficiently. This dual functionality ensures that OpenSPP is not only adaptable and integrative but also a key asset in the broader landscape of social protection information systems. The integration of systems like OpenSPP with complementary components such as Social Registries underscores the importance of cohesive and comprehensive approaches in delivering impactful social protection interventions. Governments and organizations leveraging platforms like OpenSPP are better positioned to deliver efficient and effective social protection services, demonstrating the critical role of SP-MIS in shaping resilient and inclusive social protection frameworks.
</file>

<file path="docs/overview/concepts/user_management.md">
# User Management

User management focuses on safeguarding user data and controls how users access and interact with modules implemented. This system administers user identities, authenticates them, and authorizes them for certain roles and privileges. Effective user management includes several layers, such as user {term}`authentication`, authorization, and auditing, each serving a unique purpose in maintaining integrity and security.

Roles in OpenSPP are central to its user management framework. These roles are essentially a set of permissions that define what actions users can perform within the system. This allows users’ permissions to be managed and administrated easily. These roles can vary, typically including administrators, managers, and general users, each with distinct privileges. Administrators usually have the highest level of access, capable of modifying system settings and managing other users, while general users may have limited access, focused on specific tasks.

Two primary approaches can be adopted for managing users in OpenSPP, each with its unique set of features and benefits.

1. Native Odoo User Management: Utilizing Odoo’s built-in functionalities, this approach is ideal for deployments looking for a straightforward and integrated solution. It offers a user-friendly interface for managing user accounts, assigning roles, and setting access controls. This approach is well-suited for deployments looking for a simple implementation.

2. Keycloak Integration: For organizations seeking more advanced user management features, integrating Keycloak with OpenSPP is recommended. Keycloak provides additional layers of security and flexibility, including federated identities (linking user identities across different systems), fine-grained access control, and comprehensive single sign-on capabilities. This approach is particularly beneficial for larger deployments or those requiring more sophisticated identity management solutions.

Despite the approach selected, adhering to best practices in user management is essential for maximizing the efficiency and security of OpenSPP.

1. Regular Review and Update of User Access: It's crucial to audit user accounts and their access levels regularly. This practice helps in identifying redundant accounts or inappropriate access privileges that could pose security risks.
2. Implementing the Principle of Least Privilege: By ensuring that users have only the access necessary to perform their job functions, organizations can significantly reduce the risk of internal and external breaches.
3. Enforcing Strong Password Policies: Implement policies that require complex passwords, encourage users to change passwords regularly, and use multi-factor authentication where possible.
4. Educating Users: Regular training sessions and updates on security practices and system usage guidelines can significantly reduce the risk of accidental breaches or misuse.
5. Monitoring User Activities: Implementing tools for real-time monitoring and generating periodic reports helps in identifying unusual activities potential security threats, and ensuring compliance with policies.

Expanding and focusing on each of these aspects will be vital to enable proper user management.
</file>

<file path="docs/overview/features/index.md">
# Features

This section provides an overview of OpenSPP features organized by functional area.

```{toctree}
:maxdepth: 2
:caption: Contents

registry_data_management
integrations_apis
```
</file>

<file path="docs/overview/features/integrations_apis.md">
# Integrations

The following diagram depicts the integration mindmap of OpenSPP.

![](images/integrations_mindmap.jpg)

OpenSPP, as a digital public good, is designed with interoperability in mind. It recognizes the interconnected landscape of digital solutions and strives to ensure smooth, seamless interaction with many other systems as shown above. This commitment to broad compatibility is reflected in the system's ability to easily exchange data in widely recognized, non-proprietary formats and its support for API-based integrations leveraging XML-RPC and REST APIs. One of the key aspects that makes OpenSPP a versatile solution is its ability to exchange data with other systems. This is not just about sending and receiving data but doing so in a manner that is universally understood and broadly accessible. This high-level API-based integration support provides flexibility, allowing OpenSPP to fit neatly into various digital ecosystems without requiring extensive customization or proprietary interfaces.

## API Design

One cornerstone of OpenSPP's architecture is its API design, implementation, and governance approach. This page explains OpenSPP's key API-related capabilities and practices, evidencing its commitment to interoperability, security, and flexibility.

Starting with API design, OpenSPP implements Open API Specifications. Further, it adheres to the guidelines of G2P Connect, a comprehensive solution architectural blueprint, ensuring it can seamlessly interact with various systems involved in G2P delivery.

On the security front, OpenSPP lays considerable emphasis on ensuring the robustness of its APIs. The APIs are designed to be secure, incorporating various techniques to ward off potential threats. The goal is to reduce the amount of data shared via APIs based on the context, ensuring only necessary information is exchanged, thereby bolstering privacy protection.

API governance, which is the process of controlling, monitoring, and analyzing the usage and performance of APIs, is presently manually managed in OpenSPP. This rigorous manual process ensures that all APIs adhere to set standards and perform optimally. However, OpenSPP plans to enhance its API governance capabilities by deploying an API Manager product. This tool will automate many governance tasks, ensuring API compliance and performance.

OpenSPP is versatile regarding API communication, supporting various methods such as synchronous, asynchronous, and WebSocket API communications. This versatility enables OpenSPP to adapt its communication methods based on the specific needs of a given interaction, thereby ensuring optimal performance and user experience.

With respect to API versioning management, OpenSPP currently manages this aspect manually. This approach ensures backward compatibility, allowing older API versions to continue functioning alongside newer ones. It also fosters forward innovation, facilitating the development of new API features. However, to further streamline this process, OpenSPP plans to deploy an API Manager.

OpenSPP supports sandboxing for API testing, ensuring APIs perform optimally in real-world scenarios. Invitation-only access is provided to demo.openspp.org, allowing prospective integrations to be thoroughly tested and tweaked in a controlled environment before they are deployed in production.

[More Infomation](/technical_reference/external_api.html)
</file>

<file path="docs/overview/use_cases/index.md">
# Use Cases

This section provides entry points for OpenSPP's main use cases.

```{toctree}
:maxdepth: 2
:caption: Contents

social_registry
farmer_registry
humanitarian
social-protection-management-information-system
```
</file>

<file path="docs/overview/index.md">
# Overview

Welcome to the OpenSPP overview section. This section provides high-level information about OpenSPP's features, concepts, and use cases for decision makers and new users.

```{toctree}
:maxdepth: 2
:caption: Contents

features/index
concepts/index
use_cases/index
case_studies/index
```
</file>

<file path="docs/reference/api/index.md">
# Api

This section contains documentation about api.

```{toctree}
:maxdepth: 2
:caption: Contents

```
</file>

<file path="docs/reference/modules/g2p_auth_id_oidc.md">
# g2p_auth_id_oidc Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenG2P Auth module to allow user authentication and registration using OIDC (OpenID Connect) while linking them to their existing G2P Registrant IDs. 

**Purpose:**

The primary goal of this module is to streamline the user registration and login process by leveraging existing G2P Registrant IDs within the OpenG2P system. Instead of creating new user accounts from scratch, this module allows users to authenticate using their OIDC credentials and then links them to their pre-existing G2P registration data. 

**Key Features:**

* **OIDC Integration for Authentication:**  Users can authenticate using their credentials from an OIDC provider.
* **G2P Registrant ID Mapping:**  The module maps the authenticated OIDC user to their corresponding G2P Registrant ID stored in the [g2p_registry_base](g2p_registry_base) module.
* **Automated Partner/User Creation:**  If a matching G2P Registrant ID is found, the module automatically creates a linked Partner and User in DCI, pulling relevant data from the registration record. 
* **Customizable Data Mapping:**  Administrators can configure how data from the OIDC provider and the G2P registry is mapped to DCI Partner and User fields.

**How it Works:**

1. **OIDC Authentication:**  A user initiates the login process via an OIDC provider. 
2. **G2P ID Lookup:**  The module extracts the user's ID from the OIDC response and attempts to find a matching G2P Registrant ID.
3. **Account Creation/Linking:**
    * **Match Found:**  If a match is found, the module retrieves the registration data and creates/updates the corresponding Partner and User records in DCI.
    * **No Match:** The module can be configured to either deny access or initiate a more detailed registration process, potentially pulling additional data from the OIDC provider. 
4. **User Login:**  Upon successful authentication and account linking, the user is logged into the OpenG2P system.

**Dependencies:**

* **[g2p_registry_base](g2p_registry_base):** This module depends on the base registry module for accessing and retrieving G2P Registrant data.

**Benefits:**

* **Simplified User Experience:**  Easier registration and login process for beneficiaries already registered within the OpenG2P system.
* **Improved Data Accuracy:**  Leveraging existing G2P Registrant data ensures consistency and reduces the risk of duplicate records.
* **Enhanced Security:**  Integration with trusted OIDC providers enhances the security of the OpenG2P platform. 

**Notes:**

* The module relies on a consistent and accurate mapping between OIDC user identifiers and G2P Registrant IDs. 
* Proper configuration of OIDC settings and data mapping is crucial for the module's functionality.

**TODOs:**

* The original module references an `auth_oidc` module that has been removed. A suitable replacement needs to be integrated into the codebase for the OIDC functionality. 
* The code comments highlight areas that require further improvement, such as refining the data mapping logic and enhancing error handling.
</file>

<file path="docs/reference/modules/g2p_bank_rest_api.md">
# g2p_bank_rest_api Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the REST API functionalities of the OpenSPP system by providing endpoints specifically for managing bank details related to beneficiaries and/or programs. 

**Purpose:**

The primary purpose of the [g2p_bank_rest_api](g2p_bank_rest_api) module is to expose bank-related data and operations through a standardized RESTful interface. This allows external systems, such as financial institutions or payment gateways, to interact with the OpenSPP platform and access or modify bank information. 

**Integration and Functionality:**

This module builds upon the core functionalities provided by the following modules:

- **[g2p_registry_rest_api](g2p_registry_rest_api):**  It leverages the base REST API infrastructure and authentication mechanisms provided by this module.
- **[g2p_bank](g2p_bank):** This module depends on the data models and business logic related to bank details, which are defined and managed by the [g2p_bank](g2p_bank) module.

**Additional Functionality:**

The [g2p_bank_rest_api](g2p_bank_rest_api) module introduces the following specific functionalities:

- **API Endpoints:**  It defines and implements REST API endpoints for operations such as:
    - Retrieving bank details for a specific beneficiary or program.
    - Updating bank information.
    - Potentially, verifying bank account details through integration with external services (depending on implementation).

**Example Use Case:**

Consider a scenario where a payment gateway needs to access the bank account details of a beneficiary to process a payment. The [g2p_bank_rest_api](g2p_bank_rest_api) module enables this by providing a secure and standardized API endpoint. The payment gateway can send a request to this endpoint with the necessary authentication and beneficiary identifiers, and the module would return the required bank information in a structured format (e.g., JSON).

**Note:** This documentation provides a general overview. Specific API endpoints, request/response formats, and authentication mechanisms are detailed in the API documentation generated by the [g2p_registry_rest_api](g2p_registry_rest_api) module.
</file>

<file path="docs/reference/modules/g2p_bank.md">
# G2P Bank Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **G2P Bank** module within the OpenSPP framework. This module extends the functionality of individual and group registries to manage their bank details.

## Purpose

The **G2P Bank** module aims to:

* Provide an interface for storing and managing bank account information for both individual and group registrants within the OpenSPP system.
* Ensure data consistency and accuracy by calculating and displaying IBANs based on provided bank details.
* Integrate seamlessly with existing individual and group registry views to provide a consolidated view of registrant information.

## Module Dependencies and Integration

1. **Contacts (res.partner)**: This module directly leverages the Odoo Contacts module and its inherent bank account management features (`res.partner.bank`). This ensures consistency and avoids data redundancy by utilizing the existing framework for storing bank information.

2. **[g2p_registry_individual](g2p_registry_individual)**: This module integrates with the individual registry by extending the individual registrant view to include a dedicated page for managing bank details. This allows users to easily view and manage bank information associated with individual registrants.

3. **[g2p_registry_group](g2p_registry_group)**:  Similar to its integration with the individual registry, this module extends the group registrant view to include a bank details management section. This facilitates the tracking of bank accounts associated with groups, such as cooperatives or farmer groups.

## Additional Functionality

* **IBAN Calculation**: The module automatically calculates and displays the International Bank Account Number (IBAN) based on the entered bank account number and bank details. This feature leverages the `schwifty` Python library for accurate IBAN generation, ensuring data consistency and reducing manual errors. 

* **Integrated Bank Details Views**:  The module seamlessly integrates bank details management into both the individual and group registry views.  This provides a unified and centralized location for managing all aspects of a registrant's profile, including their bank information.

## Conclusion

The **G2P Registry: Bank Details** module enhances OpenSPP by providing a structured and efficient way to manage bank account information for both individual and group registrants.  Its tight integration with existing core modules ensures data consistency, simplifies data entry, and improves the overall user experience for managing registrant information within the platform.
</file>

<file path="docs/reference/modules/g2p_connect_demo.md">
# Module: g2p_connect_demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `g2p_connect_demo` module serves as a demonstration and testing ground for the OpenSPP system, particularly showcasing the capabilities of the G2P Connect system. This module is not intended for production use but rather for development, testing, and demonstration purposes.

## Purpose

The primary purpose of `g2p_connect_demo` is to:

- **Generate Sample Data:** Provide a mechanism to create realistic but anonymized sample data for registries, individuals, groups, and change requests. This data can be used to populate the OpenSPP system for testing, training, and demonstration purposes.
- **Showcase System Functionality:** Demonstrate the integration and interaction between different OpenSPP modules in a realistic scenario. This includes modules related to registry management ([g2p_registry_base](g2p_registry_base)), individual and group registration ([g2p_registry_individual](g2p_registry_individual), [g2p_registry_group](g2p_registry_group), [g2p_registry_membership](g2p_registry_membership)), programs ([g2p_programs](g2p_programs)), and custom fields ([spp_custom_field](spp_custom_field)).
- **Facilitate Testing and Development:** Provide a controlled environment with pre-populated data to facilitate the testing and development of new features and modifications to the OpenSPP system.

## Key Features

- Generates a configurable number of groups and individuals with realistic demographic data.
- Creates various relationships between individuals within groups, simulating households or families.
- Populates custom fields with relevant data to illustrate the flexibility of the system.
- Includes functionalities to generate change requests, mimicking real-world scenarios like adding children to a household.

## Integration with other modules

`g2p_connect_demo` builds upon the foundation laid by several other OpenSPP modules:

- **[spp_base_demo](spp_base_demo):** Utilizes the base demo module for generating localized sample data.
- **Registry Modules:** Leverages the functionality of [g2p_registry_base](g2p_registry_base), [g2p_registry_individual](g2p_registry_individual), [g2p_registry_group](g2p_registry_group), and [g2p_registry_membership](g2p_registry_membership) to create and manage individuals, groups, and their relationships.
- **[g2p_programs](g2p_programs):** Integrates with program definitions to simulate the enrollment of generated individuals and groups into social protection programs.
- **[spp_custom_field](spp_custom_field):** Utilizes the custom field framework to demonstrate how additional data points can be captured and managed within the registry.

## Usage

The `g2p_connect_demo` module is primarily intended for developers and implementers working with the OpenSPP system. 

By using the provided interface, users can generate a specified number of groups and individuals. The module takes care of creating realistic relationships, assigning custom field values, and populating other relevant data.

## Disclaimer

It is important to reiterate that this module is for **demonstration and development purposes only**. The generated data, while designed to appear realistic, should not be used in a production environment or for any real-world social protection programs.
</file>

<file path="docs/reference/modules/g2p_encryption_keymanager.md">
# g2p_encryption_keymanager Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of the [g2p_encryption](g2p_encryption) module by providing integration with a Keymanager service for encryption and signing operations. This allows OpenSPP to leverage external key management systems for enhanced security and compliance.

## Purpose

The primary purpose of this module is to:

* **Delegate encryption and signing operations to an external Keymanager service:** This offloads the burden of key management from the OpenSPP application to a dedicated, potentially more secure, external service.
* **Provide a configurable interface:** System administrators can configure various parameters of the Keymanager integration, such as API endpoints, authentication credentials, and application-specific identifiers.
* **Seamlessly integrate with the existing encryption framework:**  The module extends the existing encryption provider mechanism in OpenSPP, allowing for easy switching between different encryption providers, including the Keymanager-based provider.

## Functionality

The [g2p_encryption_keymanager](g2p_encryption_keymanager) module provides the following features:

* **Encryption and Decryption using Keymanager:**  The module allows OpenSPP to encrypt and decrypt data using encryption keys managed by the Keymanager service. 
* **JWT Signing and Verification with Keymanager:**  The module enables OpenSPP to digitally sign and verify JSON Web Tokens (JWTs) using the Keymanager service, ensuring authenticity and integrity of sensitive data.
* **Keymanager Authentication and Authorization:**  The module implements secure communication with the Keymanager service using OAuth 2.0 client credentials grant type for authentication and authorization.
* **Configuration Options for Keymanager Integration:** The module provides a user-friendly interface within the OpenSPP settings to configure various aspects of the Keymanager integration, including API endpoints, authentication credentials, and application-specific identifiers for encryption and signing.

## Integration with Other Modules

This module directly interacts with the [g2p_encryption](g2p_encryption) module:

* It inherits and extends the `g2p.encryption.provider` model to include Keymanager-specific configuration fields and methods.
* It provides a new "Keymanager" option for the encryption provider type.
* It overrides the default encryption and signing methods to utilize the Keymanager API when selected.

## Benefits of Using Keymanager Integration

* **Enhanced Security:** Key management is handled by a dedicated service, potentially with stronger security measures than what might be feasible within the OpenSPP application itself.
* **Centralized Key Management:**  Provides a central location for managing encryption keys across different parts of the OpenSPP system or even across multiple applications.
* **Compliance and Auditing:**  Using a dedicated Keymanager service can simplify compliance with data security regulations and facilitate auditing of cryptographic operations. 
* **Scalability and Performance:**  Offloading cryptographic operations to a dedicated service can potentially improve the performance and scalability of the OpenSPP application.
</file>

<file path="docs/reference/modules/g2p_encryption_rest_api.md">
# G2P Encryption REST API

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document provides an overview of the `g2p_encryption_rest_api` module within the OpenSPP ecosystem.

## Overview

The `g2p_encryption_rest_api` module extends the functionality provided by the [g2p_encryption](./g2p_encryption.md) module by exposing its encryption and security functionalities through a RESTful API. This allows external systems and applications to securely interact with OpenSPP's encryption mechanisms.

## Purpose

The primary purpose of this module is to facilitate secure data exchange and integration with external systems that require access to OpenSPP's encryption capabilities. This could include:

- **Mobile Applications:** Allowing mobile apps used by beneficiaries or field agents to securely encrypt and decrypt data.
- **Third-party Systems:** Enabling integration with other government or partner systems that require secure communication channels.
- **Data Analytics:** Providing a secure way to extract encrypted data for analysis and reporting purposes.

## Functionality

The module exposes a set of REST endpoints under the `/api/v1/security/` path. These endpoints allow authorized clients to:

- **Encrypt Data:** Encrypt data payloads using configured encryption providers.
- **Decrypt Data:** Decrypt data previously encrypted by OpenSPP.
- **Generate JWT Tokens:** Generate JSON Web Tokens (JWTs) signed with OpenSPP's private key for secure authentication and authorization.
- **Verify JWT Tokens:** Verify the authenticity and integrity of JWTs received from external systems.
- **Retrieve JWKS:** Access OpenSPP's JSON Web Key Set (JWKS) for verifying JWT signatures.

## Integration

The `g2p_encryption_rest_api` module seamlessly integrates with the [g2p_encryption](./g2p_encryption.md) module, leveraging its existing encryption provider framework and configurations. It utilizes Odoo's `base_rest` module to expose the REST API endpoints.

## Dependencies

- [g2p_encryption](./g2p_encryption.md): Provides the core encryption functionalities and provider management.
- `base_rest`: Offers the framework for building RESTful APIs within Odoo.

## Security

The module inherits the security mechanisms provided by Odoo's `base_rest` module, including user authentication and authorization. Access to the API endpoints can be restricted based on user roles and permissions. Additionally, the module utilizes the encryption providers configured in the [g2p_encryption](./g2p_encryption.md) module to ensure secure data transmission.
</file>

<file path="docs/reference/modules/g2p_encryption.md">
# G2P Encryption

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_encryption](g2p_encryption) module provides a base framework for managing encryption providers within OpenSPP. It defines a generic interface for different encryption methods and allows for their seamless integration into various OpenSPP components.

## Features

- **Encryption Provider Model:** The module introduces the `g2p.encryption.provider` model, which serves as a template for defining and configuring different types of encryption providers.
- **Encryption Methods:** The model provides standardized methods like `encrypt_data`, `decrypt_data`, `jwt_sign`, `jwt_verify`, and `get_jwks` for interacting with encryption providers.
- **Configuration:** The module allows administrators to configure and manage encryption providers through the Odoo interface.
- **Extensibility:** The generic design enables developers to easily extend the module by implementing new encryption providers based on the provided interface.

## Role and Integration

The [g2p_encryption](g2p_encryption) module is foundational for incorporating encryption functionality across other OpenSPP modules. Modules requiring encryption capabilities can depend on this module and utilize the available encryption providers. For instance, modules dealing with sensitive data like beneficiary information or financial transactions can leverage this module to ensure data security.

## Additional Notes

- The [g2p_encryption](g2p_encryption) module itself does not implement any specific encryption algorithm. It provides the framework for other modules to implement and utilize encryption methods.
- The choice of encryption provider and configuration is left to the system administrators, allowing for flexibility and adaptation to specific security requirements.
- Developers are encouraged to contribute to this module by adding support for new encryption algorithms and standards.

## Dependencies

The [g2p_encryption](g2p_encryption) module has no direct dependencies on other modules. It is designed as a standalone module that other modules requiring encryption functionality can depend on.
</file>

<file path="docs/reference/modules/g2p_entitlement_differential.md">
# OpenG2P Entitlement: Differential Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_entitlement_differential](g2p_entitlement_differential) module extends the functionality of the [spp_entitlement_cash](spp_entitlement_cash) module to provide more flexibility and control over calculating cash entitlements in social protection programs. This module introduces features that allow program implementers to adjust entitlement amounts based on factors like inflation and define more complex entitlement rules.

## Features

* **Inflation Adjustment:** Enables automatic adjustment of entitlement amounts based on a defined inflation rate. This ensures that the real value of benefits is maintained over time.
* **Flexible Entitlement Rules:** Allows for more complex entitlement calculation logic by providing greater control over beneficiary selection and amount determination.
* **Enhanced User Interface:** Provides an improved user interface for managing entitlement rules, including a more intuitive way to define and organize entitlement items.

## Integration with Other Modules

This module directly depends on the [spp_entitlement_cash](spp_entitlement_cash) module and inherits its core functionalities. It extends the existing features by providing additional fields and methods for differential entitlement calculation.

## Key Functionality

* **Inflation Adjustment:**
    - Adds an "Enable Inflation" checkbox and an "Inflation Rate" field to the entitlement manager form.
    - When enabled, the module automatically multiplies the initial entitlement amount by the defined inflation rate during the entitlement preparation process.
* **Flexible Entitlement Rules:**
    - Modifies the beneficiary selection process to allow for more complex conditions using the `_get_all_beneficiaries` method. This allows program implementers to define rules based on various beneficiary attributes.
* **Enhanced User Interface:**
    - Replaces the "Sequence" field with a "Name" field in the entitlement item tree and form views. This provides a clearer way to identify and manage individual entitlement items.

## Benefits

* **Improved Accuracy:** Enables more accurate calculation of entitlement amounts by considering factors like inflation.
* **Increased Flexibility:** Allows program implementers to design and implement more responsive and adaptable social protection programs.
* **Enhanced Transparency:** Provides a clear and auditable trail of the entitlement calculation process, promoting accountability and trust.

## Conclusion

The [g2p_entitlement_differential](g2p_entitlement_differential) module is a valuable addition to the OpenSPP suite for organizations looking to implement dynamic and equitable social protection programs. Its ability to handle complex entitlement scenarios and adjust to changing economic conditions makes it an essential tool for ensuring effective and impactful social assistance.
</file>

<file path="docs/reference/modules/g2p_entitlement_in_kind.md">
# OpenG2P Entitlement: In-Kind Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of the OpenSPP platform specifically for managing **in-kind** entitlements within social protection programs. 

**Purpose:**

The primary purpose of the [g2p_entitlement_in_kind](g2p_entitlement_in_kind) module is to adapt the existing OpenSPP framework for programs that distribute benefits in the form of goods or services rather than cash transfers. 

**Key Features & Functionality:**

* **Modified Program Views:** The module customizes program views inherited from the [spp_programs](spp_programs) module to accommodate in-kind distribution workflows. This includes:
    * Hiding the "Import Eligible Registrants" button as it might not be directly applicable to in-kind programs.
    * Adjusting access rights for the "Enroll Eligible Registrants" button. Enrollment in in-kind programs might follow a different process requiring involvement from specific user roles like Program Validators, Cycle Approvers, and Program Managers (as defined by the [g2p_programs](g2p_programs) module).

**Integration with other Modules:**

* **[spp_programs](spp_programs):** This module builds upon the core program management features provided by [spp_programs](spp_programs), adapting them for in-kind distribution.
* **[spp_entitlement_in_kind](spp_entitlement_in_kind):** This module likely provides the foundational data models and logic specific to in-kind entitlements, which this module then extends with user interface elements and program-level integration.

**Note:** 

This module is part of a larger ecosystem aimed at providing flexible and configurable tools for managing diverse social protection programs. The specific configurations and adaptations offered by this module highlight its focus on supporting programs with in-kind benefit delivery mechanisms.
</file>

<file path="docs/reference/modules/g2p_entitlement_voucher.md">
# OpenG2P Entitlement: Voucher Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_entitlement_voucher](g2p_entitlement_voucher) module extends the OpenG2P Entitlement functionality by providing a mechanism to generate and manage vouchers associated with entitlements. This module is particularly useful for social protection programs that utilize vouchers as a means of delivering benefits to beneficiaries.

## Features

* **Voucher Generation:** The module enables the generation of vouchers for approved entitlements. This process can be automated to trigger upon entitlement approval or manually initiated by authorized users.
* **Voucher Configuration:** Program administrators can define voucher templates and configure various aspects of voucher generation, such as the file format, content, and storage location.
* **Voucher Printing:** The module provides a convenient way to print generated vouchers directly from the entitlement record.
* **Integration with Payment Files:**  Leverages the [g2p_payment_files](g2p_payment_files) module to facilitate voucher creation using predefined templates and configurations.
* **Encryption Support:** Integrates with the [g2p_encryption](g2p_encryption) module to allow for the secure encryption of sensitive data within the vouchers.

## Dependencies

- **[g2p_encryption](g2p_encryption):**  This dependency is used for encrypting sensitive data included in the vouchers.
- **[g2p_programs](g2p_programs):** This module provides the core functionality for managing social protection programs and entitlements, upon which this module builds.
- **[g2p_payment_files](g2p_payment_files):**  This module provides the framework for defining and managing payment file configurations, which are utilized for voucher generation.

## Workflow

1. **Configuration:** Program administrators configure voucher generation settings within the [Entitlement Manager]([g2p_programs](g2p_programs)#entitlement-manager) associated with the program. This includes selecting a voucher file configuration, storage location for generated vouchers, and optional encryption settings.

2. **Entitlement Approval:** When an entitlement is approved, the system can automatically generate a voucher based on the predefined configurations.
3. **Voucher Access:** Users can access and print the generated voucher directly from the entitlement record.

## Benefits

* **Streamlined Benefit Delivery:** Automating voucher generation reduces manual effort and ensures timely delivery of benefits to beneficiaries.
* **Enhanced Security:** Integration with encryption capabilities protects sensitive data stored within the vouchers.
* **Improved Accountability:**  The module maintains a record of generated vouchers, providing an audit trail for tracking and accountability purposes. 
* **Flexibility and Customization:**  Administrators have the flexibility to tailor voucher generation and content according to program-specific requirements.
</file>

<file path="docs/reference/modules/g2p_openid_vci_programs.md">
# g2p_openid_vci_programs Module 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `g2p_openid_vci_programs` module extends the OpenG2P platform's OpenID Connect Verifiable Credentials Issuer functionality to generate and issue verifiable credentials specifically designed for program beneficiaries. This module builds upon the core functionalities provided by the [g2p_openid_vci](g2p_openid_vci) and [g2p_programs](g2p_programs) modules.

## Purpose and Functionality

This module focuses on providing a streamlined way to issue verifiable credentials that attest to a beneficiary's enrollment and status within a specific social protection program.  This allows beneficiaries to possess digitally verifiable proof of their program participation, which can be beneficial for various purposes like accessing program benefits or proving eligibility.

Here's a breakdown of the key features:

* **Program-Specific Verifiable Credentials:**  The module defines a new type of verifiable credential, "OpenG2PBeneficiaryVerifiableCredential", specifically structured to include relevant program-related information.
* **Issuance based on Program Enrollment:** It leverages the existing program enrollment data from the [g2p_programs](g2p_programs) module. Only enrolled beneficiaries can receive these verifiable credentials.
* **Integration with OpenID Connect Issuer:** This module seamlessly integrates with the OpenID Connect issuer framework established in the [g2p_openid_vci](g2p_openid_vci) module. This ensures that the issuance process adheres to OpenID Connect standards for security and interoperability.
* **Data Rich Credentials:** The issued verifiable credentials can include comprehensive information about the beneficiary, their program membership details, and other relevant data, making them valuable for various verification purposes.

## Integration and Dependencies

* **[g2p_openid_vci](g2p_openid_vci):** This module depends on the core OpenID Connect Verifiable Credentials Issuer functionality to manage the technical aspects of credential issuance and signing.
* **[g2p_programs](g2p_programs):**  This module relies on the program enrollment data and beneficiary information managed by the [g2p_programs](g2p_programs) module.

## Benefits

* **Enhanced Trust and Transparency:**  Verifiable credentials provide a tamper-proof and verifiable way to prove program participation, fostering trust between beneficiaries and service providers.
* **Improved Efficiency:** Digital credentials streamline verification processes, potentially reducing administrative burden and improving the efficiency of benefit delivery.
* **Empowerment of Beneficiaries:**  Providing beneficiaries with verifiable credentials gives them control over their data and empowers them to prove their eligibility securely and conveniently.
</file>

<file path="docs/reference/modules/g2p_openid_vci.md">
# G2P OpenID VCI

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `g2p_openid_vci` module extends OpenSPP's capabilities to manage and issue Verifiable Credentials (VCs) based on OpenID Connect for Verifiable Presentations (OpenID4VP) and Decentralized Identifiers (DIDs). This module enables the system to act as an issuer of VCs, empowering individuals with digital credentials that represent claims about their identity or attributes.

## Purpose

- **Issue Verifiable Credentials:** Provide a mechanism to generate and issue VCs conforming to W3C standards like Verifiable Credentials Data Model and DID specification.
- **Manage Issuers:**  Define and manage multiple VCI issuers with distinct configurations for supported credential types, formats, and security settings.
- **Integration with OpenID Connect:** Leverage OpenID Connect flows for authorization and authentication, ensuring only authorized entities can request and receive VCs.
- **Encryption and Signing:** Utilize the [g2p_encryption](g2p_encryption) module to digitally sign issued credentials, guaranteeing their authenticity and integrity.

## Role and Integration

This module builds upon the foundation laid by [g2p_registry_base](g2p_registry_base) and [g2p_encryption](g2p_encryption) modules:

- **[g2p_registry_base](g2p_registry_base):** The module depends on registrant data managed by [g2p_registry_base](g2p_registry_base). It fetches information like name, address, and registered IDs from this module to populate VC claims.
- **[g2p_encryption](g2p_encryption):**  The module integrates with [g2p_encryption](g2p_encryption) to securely sign issued VCs using configured encryption providers. This ensures the trustworthiness and tamper-proof nature of issued credentials.

## Functionality

1. **VCI Issuer Management:** 
   - Define multiple VCI issuers, each representing a distinct entity capable of issuing VCs.
   - Configure issuer details: 
     - **Name and Type:** Descriptive name and the type of VCs issued (e.g., OpenG2PRegistryVerifiableCredential).
     - **Scope and Format:** Define the intended purpose (scope) of issued VCs and the supported VC format (e.g., `ldp_vc`).
     - **Unique Issuer ID (DID):**  Specify the DID representing the issuer.
     - **Encryption Provider:** Select the encryption provider from [g2p_encryption](g2p_encryption) for signing credentials.
   - **Authentication Settings:**  Configure OpenID Connect-based authentication:
     - Specify allowed OpenID issuers, audience values, client IDs, and JSON Web Key Set (JWKS) endpoints for verifying authentication tokens.
   - **Credential Format and Metadata:**  Define the structure and content of issued VCs using JSON and JQ (JSON Query) for dynamic data population.

2. **VC Issuance:**
   - The module handles incoming credential requests conforming to the OpenID4VP specification.
   - It validates requests against configured issuers, scopes, and authentication settings.
   - Upon successful validation, it fetches relevant registrant data from [g2p_registry_base](g2p_registry_base), populates the VC claims, and digitally signs the credential using the selected encryption provider.
   - Finally, it returns the issued VC in the requested format.

## Example Usage

1. **Configure a VCI Issuer:** An administrator defines a new issuer representing a government agency issuing proof of address VCs. They configure the issuer details, OpenID Connect authentication settings, and define the VC format using a JSON template.
2. **Credential Request:** A relying party application (e.g., a bank) initiates a VC request, authenticating through an OpenID Connect provider approved by the issuer.
3. **VC Issuance and Verification:** The `g2p_openid_vci` module validates the request, fetches the user's address information from [g2p_registry_base](g2p_registry_base), populates the VC, signs it, and sends it back to the relying party. The relying party can then verify the VC's signature and authenticity.

## Conclusion

The `g2p_openid_vci` module empowers OpenSPP to participate in a decentralized identity ecosystem. By issuing verifiable credentials, OpenSPP enhances trust and streamlines data sharing within its network and with external entities.
</file>

<file path="docs/reference/modules/g2p_payment_cash.md">
# OpenG2P Program Payment: Cash

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenG2P platform to handle cash disbursements for social protection programs. 

## Overview

The [g2p_payment_cash](g2p_payment_cash) module provides a streamlined approach to managing and recording cash payments for entitlements within the OpenG2P system. It integrates seamlessly with the core program management functionalities offered by the [g2p_programs](g2p_programs) module and builds upon the file-based payment management system provided by the [g2p_payment_files](g2p_payment_files) module. 

## Functionality

This module introduces:

- **Cash Payment Manager:**  A specialized payment manager dedicated to handling cash disbursements. This manager allows users to prepare payment batches, but instead of generating payment files, it directly marks the payments as "reconciled" and "paid" within the system, simulating the act of distributing cash directly to beneficiaries.

- **Simplified Payment Workflow:** Beneficiaries with approved entitlements can have their payments processed and recorded as "paid" directly within the system. This eliminates the need for generating intermediary payment files, simplifying the workflow for cash-based programs.

- **Integration with Entitlements:**  The module extends the functionality of the `g2p.entitlement` model.  A new button, "Record Cash Payment", appears on approved entitlements when the program is configured to use the Cash Payment Manager.  Clicking this button initiates the cash payment process.

## Integration

- **[g2p_programs](g2p_programs):** This module relies on the core program management features provided by [g2p_programs](g2p_programs) for managing beneficiaries, programs, and entitlements. 

- **[g2p_payment_files](g2p_payment_files):**  While this module doesn't generate payment files, it inherits the base functionality and structure of the file-based payment manager from [g2p_payment_files](g2p_payment_files).

## Benefits

- **Streamlined Cash Disbursements:**  Simplifies the payment process for programs using cash disbursements.
- **Enhanced Record Keeping:** Ensures accurate and transparent recording of cash payments within the system.
- **Improved Efficiency:** Reduces manual processes and potential errors associated with cash handling.
</file>

<file path="docs/reference/modules/g2p_payment_files.md">
# g2p_payment_files Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_payment_files](g2p_payment_files) module extends the OpenSPP system to enable the generation and management of payment files for social protection programs. This module is particularly useful for programs that disburse payments through digital channels or require physical vouchers with QR codes or barcodes for secure and traceable transactions.

## Purpose

The primary purpose of this module is to:

* **Configure Payment File Templates:** Define the structure and format of payment files (e.g., PDF, CSV) using customizable templates.
* **Generate Payment Files:** Automatically generate payment files based on configured templates and payment data from the [g2p_programs](g2p_programs) module.
* **Integrate QR Codes and Barcodes:**  Embed QR codes and barcodes in payment files using configurable settings, allowing for efficient payment processing and reconciliation.
* **Manage Payment Files:** Store, organize, and access generated payment files within the OpenSPP platform.

## Key Features

* **Flexible File Format Support:**  Supports various file formats, including PDF and CSV, to accommodate different payment channels and requirements.
* **Customizable Templates:**  Allows users to define and customize payment file templates using a user-friendly interface.
* **QR Code and Barcode Generation:**  Facilitates the generation and embedding of QR codes and barcodes in payment files for enhanced security and tracking.
* **Encryption Support:**  Integrates with the [g2p_encryption](g2p_encryption) module to enable the encryption of sensitive data within QR codes or barcodes.
* **Batch Tag Integration:**  Leverages payment batch tags from the [g2p_programs](g2p_programs) module to generate payment files for specific recipient groups or payment cycles.
* **Document Storage Integration:**  Seamlessly integrates with the OpenSPP document storage system to securely store and manage generated payment files.

## Integration with Other Modules

* **[g2p_programs](g2p_programs):**  Relies on the `g2p_programs` module for payment data, including beneficiary information, payment amounts, and payment cycles.
* **[g2p_program_documents](g2p_program_documents):** Utilizes the document storage capabilities of the `g2p_program_documents` module to manage payment file storage and retrieval.
* **[g2p_encryption](g2p_encryption):**  Integrates with the `g2p_encryption` module to provide encryption options for securing sensitive payment data within QR codes and barcodes.

## Benefits

* **Increased Efficiency:**  Automates the process of generating payment files, reducing manual effort and potential errors.
* **Enhanced Security:** Incorporates QR codes and barcodes for secure payment processing and reconciliation, minimizing fraud risks.
* **Improved Transparency:**  Provides a centralized platform for managing payment files, improving transparency and accountability in payment disbursement.
* **Flexibility and Customization:** Offers flexibility in configuring payment file formats and templates to meet specific program requirements.

## Conclusion

The [g2p_payment_files](g2p_payment_files) module enhances the OpenSPP system by providing a robust and flexible framework for generating, managing, and securing payment files. This module streamlines payment processes, strengthens security measures, and improves the overall efficiency and transparency of social protection programs.
</file>

<file path="docs/reference/modules/g2p_payment_g2p_connect.md">
# g2p_payment_g2p_connect Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenSPP's payment management capabilities by integrating with the G2P Connect standard. It provides a dedicated payment manager for handling disbursements and status checks through G2P Connect-compliant APIs.

## Purpose

The `g2p_payment_g2p_connect` module enables seamless integration with financial service providers (FSPs) that adhere to the G2P Connect standard. It facilitates the secure and efficient transfer of funds to beneficiaries enrolled in social protection programs.

## Functionality

- **G2P Connect Payment Manager:** A specialized payment manager (`g2p.program.payment.manager.g2p.connect`) handles G2P Connect-specific configurations, including:
    - Payment and status endpoint URLs
    - Payee ID type and format
    - API timeout and security settings
- **Automated Batch Processing:** Automatically creates and sends payment batches to the specified G2P Connect endpoint.
- **Status Check Cron Job:**  Periodically queries the G2P Connect status endpoint to update payment statuses within OpenSPP.
- **Payee ID Flexibility:**  Supports various payee identification methods like bank account numbers, IBANs, phone numbers, email addresses, and registrant IDs.
- **Integration with Payment Files:** Leverages the existing [g2p_payment_files](g2p_payment_files) module for generating and managing payment files.
- **Configurable Payment Domain:** Allows users to define a domain filter to select specific payment batches for sending through G2P Connect.

## Integration with Other Modules

This module extends the functionality of the following modules:

- **[g2p_registry_membership](g2p_registry_membership):** Retrieves beneficiary information and group head details for payment processing.
- **[g2p_programs](g2p_programs):**  Associates G2P Connect payment managers with specific social protection programs.
- **[g2p_payment_files](g2p_payment_files):**  Inherits functionalities for payment file configuration and management. 

## Benefits

- **Standardized Integration:**  Streamlines the connection with G2P Connect-compliant FSPs, reducing integration efforts.
- **Automated Disbursements:**  Enables efficient and timely payment processing through automated batch creation and transmission.
- **Real-time Status Updates:**  Provides up-to-date payment statuses within OpenSPP, allowing for timely reconciliation and issue resolution.
- **Enhanced Transparency and Accountability:**  Ensures secure and traceable fund transfers, promoting transparency and accountability in DCI programs.
</file>

<file path="docs/reference/modules/g2p_payment_interop_layer.md">
# OpenG2P Program Payment (Payment Interoperability Layer) Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_payment_interop_layer](g2p_payment_interop_layer) module extends the OpenG2P platform by providing a generic interoperability layer for integrating with various Digital Financial Service Providers (DFSPs) for disbursement of program payments. It offers a configurable framework to connect with DFSPs through APIs, enabling seamless and automated payment processes.

## Features

- **Centralized Payment Management:** Provides a unified interface within OpenG2P to manage payments across different DFSPs.
- **DFSP Agnostic:** Designed to be adaptable to various DFSPs, reducing the need for DFSP-specific integrations.
- **Automated Payment Processing:** Automates the sending of payment instructions to DFSPs, streamlining the disbursement workflow.
- **Configurable Payment Routing:** Allows administrators to configure payment rules and routing logic based on factors like payment amount, recipient location, and DFSP availability.
- **Payment Tracking and Reconciliation:** Enables real-time tracking of payment statuses and facilitates reconciliation of transactions with DFSPs.
- **Enhanced Security:** Implements security measures to ensure secure communication and protect sensitive payment data during transmission to DFSPs.

## Dependencies

- [g2p_registry_base](g2p_registry_base): Provides core registry functionalities and data structures used for managing beneficiary information.
- [g2p_programs](g2p_programs): Handles program management, including payment cycles and beneficiary entitlements.

## Functionality and Integration

This module builds upon the core OpenG2P modules by adding a dedicated layer specifically for payment interoperability. It interacts with the [g2p_programs](g2p_programs) module to retrieve payment instructions generated for program beneficiaries. It then leverages the defined configuration to translate these instructions into API requests compatible with the target DFSP.

The module also handles the reception of payment statuses and updates the corresponding payment records within OpenG2P, ensuring synchronization between the platform and the DFSP.

## Configuration

The [g2p_payment_interop_layer](g2p_payment_interop_layer) module provides a user-friendly interface for configuring connections with DFSPs. This includes specifying API endpoints, authentication credentials, and any required data mapping or transformation rules.

## Usage

Once configured, the module seamlessly integrates into the existing OpenG2P payment workflow. When a payment cycle is triggered, the module automatically handles the communication with the appropriate DFSP, simplifying the disbursement process for program administrators.
</file>

<file path="docs/reference/modules/g2p_payment_phee.md">
# g2p_payment_phee Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenG2P platform to integrate with the **Payment Hub Enterprise Edition (PHEE)** for disbursing payments to beneficiaries.

## Overview

The [g2p_payment_phee](g2p_payment_phee) module provides a dedicated payment manager for interacting with the PHEE API.  This manager enables automated batch creation, payment preparation, and secure transmission of payment instructions to the PHEE system.

## Key Features

* **PHEE Integration:** Enables seamless integration with the PHEE platform for efficient payment processing.
* **Payment Manager:** Introduces a specialized `G2PPaymentHubEEManager` model that handles PHEE-specific payment operations.
* **Automated Batch Creation:** Supports automatic creation of payment batches, streamlining the disbursement process.
* **CSV File Generation:** Generates CSV files containing payment instructions in the format required by PHEE.
* **Configuration Settings:** Allows administrators to configure PHEE API endpoints, authentication credentials, and other payment-related parameters.

## Dependencies

* **[g2p_registry_base](g2p_registry_base):** Provides core registry functionality.
* **[g2p_programs](g2p_programs):** Manages social protection programs, cycles, entitlements, and payments.

## Functionality and Integration

This module extends the functionality of the [g2p_programs](g2p_programs) module by adding a PHEE-specific payment manager. It leverages existing data structures for programs, cycles, entitlements, and payments to generate payment instructions. 

The module's payment manager automates the process of:

1. **Preparing Payments:** Creating payment records associated with approved entitlements.
2. **Batching Payments:** Grouping payments into batches based on configurable parameters.
3. **Generating CSV Files:** Creating CSV files containing payment details in the PHEE-compliant format.
4. **Sending Payments:** Transmitting payment batches to the PHEE API for processing.

## Configuration

The module provides configuration settings for specifying PHEE API endpoints, authentication credentials, and other parameters. This allows administrators to tailor the integration to their specific PHEE environment.

## Usage

Once configured, the PHEE payment manager can be used to prepare, batch, and send payments to beneficiaries. The module's automated features streamline the disbursement process, enhancing efficiency and reducing manual intervention.
</file>

<file path="docs/reference/modules/g2p_payment_simple_mpesa.md">
# g2p_payment_simple_mpesa

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `g2p_payment_simple_mpesa` module provides a simple interface to manage payments for social protection programs using the Mpesa mobile money platform. 

This module builds upon the existing payment manager framework provided by the [g2p_programs](g2p_programs) module and extends it with Mpesa specific functionality.

## Functionality

The module allows program managers to:

* Configure connection details to an Mpesa payment gateway, including authentication and payment endpoint URLs, API timeout, username, and password.
* Select the appropriate payee identification field (e.g., phone number, email, bank account number) from available options.
* Automatically create payment batches for efficient processing.
* Trigger the payment process to transfer funds to beneficiaries via Mpesa.
* Monitor the status of individual payments and batches.

## Integration

* **[g2p_programs](g2p_programs):** This module inherits and extends the base payment manager model (`g2p.program.payment.manager`) provided by the `g2p_programs` module, integrating seamlessly with the existing program and payment batch management functionalities.
* **[g2p_registry_base](g2p_registry_base):** Leverages the registry system for accessing beneficiary information such as phone numbers or other chosen identifiers for payment disbursement.

## Key Features:

* **Simplified Mpesa Integration:**  Provides a straightforward configuration process for connecting to an Mpesa payment gateway.
* **Automated Batch Processing:**  Automates the creation and processing of payment batches, reducing manual effort.
* **Flexible Payee Identification:** Supports various payee identification methods, enabling flexibility in program design.
* **Real-time Status Tracking:** Allows monitoring of payment status at both the individual and batch level.

## Limitations:

* **Simple Integration:** This module is designed for basic Mpesa integrations. More complex workflows or specific API requirements might necessitate customization.
* **Limited Error Handling:** While the module provides basic error handling, a more robust error logging and recovery mechanism could be beneficial for mission-critical implementations.
</file>

<file path="docs/reference/modules/g2p_program_approval.md">
# OpenG2P Program Approval Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_program_approval](g2p_program_approval) module enhances the OpenG2P [g2p_programs](g2p_programs) module by introducing an approval workflow for entitlements. This module enables program managers to define multi-stage approval processes, assign approval rights to user groups, and track the approval status of individual entitlements.

## Features

* **Multi-stage Approval Workflow:** Define custom approval stages with specific states and responsible user groups.
* **Granular Approval Rights:** Assign approval permissions to different user groups at each stage of the workflow.
* **Approval Status Tracking:** Monitor the approval status of individual entitlements throughout the approval process.
* **Seamless Integration:** Integrates directly with the [g2p_programs](g2p_programs) module, extending its functionality.

## Functionality and Integration

The [g2p_program_approval](g2p_program_approval) module extends the functionality of the [g2p_programs](g2p_programs) module by adding the following features:

* **Approval Mapping:** Program managers can define a sequence of approval stages for entitlements using the `ProgramApprovalMapping` model. Each stage is associated with a state, a responsible user group, and an optional sequence number.
* **Entitlement Manager Approval:** The `DefaultEntitlementManagerApproval` model is extended to manage the approval process. It uses the defined approval mapping to determine the next stage and responsible group for each entitlement.
* **Entitlement Approval Status:** The `G2PApprovalEntitlement` model, which inherits from the `g2p.entitlement` model in [g2p_programs](g2p_programs), now includes an `approval_state` field to track the current approval status of the entitlement.
* **User Interface Enhancements:** The module modifies the user interface to display the approval status of entitlements and provide buttons for approving or rejecting them.

## Benefits

* **Enhanced Accountability:**  The approval workflow enforces accountability by clearly defining roles and responsibilities for approving entitlements.
* **Improved Transparency:**  Tracking the approval status of entitlements provides transparency into the decision-making process.
* **Streamlined Workflow:** Automating the approval process reduces manual effort and improves the efficiency of entitlement management.

## Conclusion

The [g2p_program_approval](g2p_program_approval) module enhances the OpenG2P platform by providing a robust and customizable approval workflow for managing entitlements. By integrating seamlessly with the [g2p_programs](g2p_programs) module, it strengthens the platform's capabilities for managing social protection programs effectively.
</file>

<file path="docs/reference/modules/g2p_program_assessment.md">
# g2p_program_assessment Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module enhances the OpenSPP system by adding assessment functionality to the [g2p_programs](g2p_programs) module. 

## Purpose

The primary purpose of this module is to facilitate the assessment process within social protection programs. It allows program managers to record assessments for individual beneficiaries at various stages of program participation.

## Functionality

The [g2p_program_assessment](g2p_program_assessment) module provides the following key features:

* **Assessment Recording:** Program staff can record assessments associated with a beneficiary's program membership. 
* **Assessment History:**  Maintains a history of all assessments conducted for a beneficiary, including the date, author, and content of each assessment.
* **Integration with Entitlements:** Assessments are linked to beneficiary entitlements, providing valuable context for entitlement decisions.
* **Rejection Workflow:** Offers a streamlined process to reject beneficiary applications based on assessments. 
* **Comments and Notes:** Enables program staff to add comments and notes to both assessments and beneficiary entitlements.

## Integration with other Modules

* **[g2p_programs](g2p_programs):** This module directly extends the functionality of [g2p_programs](g2p_programs) by adding assessment capabilities to program memberships.
* **mail:**  Leverages the **mail** module to facilitate communication, allowing users to post assessments as messages and add comments.

## Workflow

1. **Assessment Preparation:** Program staff can initiate the assessment process for beneficiaries, recording their findings and observations.
2. **Assessment Review:**  The module provides a centralized location to review all assessments associated with a beneficiary's program participation.
3. **Entitlement Decisions:**  Assessments provide valuable input for making informed decisions regarding beneficiary entitlements.
4. **Application Rejection:**  If necessary, program staff can reject a beneficiary's application based on the assessment outcomes. 
5. **Communication and Collaboration:** The module facilitates communication and collaboration among program staff through comments and messaging features.

By integrating assessments into the beneficiary management process, this module promotes transparency, accountability, and data-driven decision-making within DCI social protection programs.
</file>

<file path="docs/reference/modules/g2p_program_autoenrol.md">
# g2p_program_autoenrol Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of the [g2p_programs](g2p_programs) module to enable automatic enrollment of registrants into social protection programs based on predefined criteria. This feature simplifies program management by automating the enrollment process for eligible individuals.

## Purpose

The main purpose of the `g2p_program_autoenrol` module is to streamline and automate the process of enrolling beneficiaries into social protection programs. It achieves this by providing the following capabilities:

- **Automatic Enrollment:** When a new registrant is created in the system, the module automatically checks for programs configured with auto-enrollment rules.
- **Eligibility Criteria:** Program administrators can define specific eligibility criteria using Odoo's domain syntax. This allows them to target specific demographics or groups based on pre-defined attributes stored in registrant profiles.
- **Program-Specific Enrollment:** Auto-enrollment can be enabled or disabled on a per-program basis, providing flexibility in managing different types of programs.
- **Optional Removal of Ineligible Registrants:**  Administrators have the option to automatically remove registrants from a program's membership list if they do not meet the defined eligibility criteria. This ensures that only eligible individuals are considered beneficiaries.

## Functionality

The module introduces the following key features:

- **New Fields in Program Configuration:**
    - **Auto Enrol Partners:** A boolean field to enable or disable auto-enrollment for the specific program.
    - **Filter for Partners:** A text field utilizing Odoo's domain syntax to define the criteria for automatic enrollment. This allows administrators to specify which registrants should be automatically enrolled based on their profile attributes.
    - **Keep only Eligible Partners:**  A boolean field that, when checked, will automatically remove registrants from the program's membership if they do not meet the defined eligibility criteria.

- **Automatic Enrollment upon Registrant Creation:**
    - When a new registrant is created in the system, the module automatically checks for programs that have auto-enrollment enabled.
    - If the registrant meets the defined criteria for a specific program, they are automatically enrolled.
    - An automatic check for eligibility is performed, and if the  "Keep only Eligible Partners" option is activated, ineligible registrants are removed from the program membership.

- **Impact on Program Statistics:**
    - The module ensures that program statistics, such as the count of eligible and total beneficiaries, are updated dynamically to reflect the results of the automatic enrollment process.

## Integration

The [g2p_program_autoenrol](g2p_program_autoenrol) module works seamlessly with the [g2p_programs](g2p_programs) module. It leverages the existing program and registrant data structures and extends their functionality. 

## Benefits

- **Reduced Administrative Burden:** Automating the enrollment process significantly reduces the manual effort required by program administrators.
- **Improved Accuracy:** By automating enrollment based on pre-defined criteria, the module minimizes the risk of human error and ensures consistent application of eligibility rules.
- **Enhanced Targeting:** The ability to define specific eligibility criteria allows programs to effectively target the intended beneficiaries, maximizing impact and resource utilization.
- **Increased Efficiency:**  Automatic enrollment accelerates the process of onboarding eligible individuals into social protection programs.

By automating a crucial aspect of program management, the [g2p_program_autoenrol](g2p_program_autoenrol) module contributes to the overall efficiency and effectiveness of social protection initiatives. It empowers organizations to deliver timely and targeted support to those in need.
</file>

<file path="docs/reference/modules/g2p_program_cycleless.md">
# OpenG2P Programs: Cycleless Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_program_cycleless](g2p_program_cycleless) module extends the functionality of the [g2p_programs](g2p_programs) module to support **cycleless** social protection programs. 

Traditional social protection programs often operate in cycles, with distinct periods for enrollment, payment preparation, and disbursement. However, some programs, especially those focused on **continuous or on-demand support**, may benefit from a cycleless approach.

This module allows program managers to designate a program as **cycleless**, eliminating the need to manage distinct program cycles. This simplifies program administration and provides greater flexibility in managing beneficiary entitlements and payments.

## Key Features

* **Cycleless Program Designation:**  The module adds a new field to the `g2p.program` model, allowing administrators to mark a program as cycleless.
* **Simplified Interface:** For cycleless programs, the user interface is adapted to hide cycle-related elements, presenting a more streamlined experience.
* **Automatic Cycle Management:** When a program is marked as cycleless, the module automatically manages a single, always-active cycle in the background. This simplifies program operations without sacrificing the underlying data structure.
* **Unified Entitlement Management:**  Beneficiary entitlements are managed within the context of the always-active cycle, providing a unified view for administrators.
* **Streamlined Payment Processing:** Payment preparation and disbursement processes are adapted for the cycleless model.

## Integration with Other Modules

This module directly extends the [g2p_programs](g2p_programs) module. It leverages existing data structures and functionalities from this module, such as:

* **Program Model:** Utilizes the `g2p.program` model to manage program configurations and settings.
* **Cycle Model:** Leverages the `g2p.cycle` model to represent the always-active cycle in the background. 
* **Entitlement Management:** Integrates with the entitlement management functionalities provided by the [g2p_programs](g2p_programs) module.

## Benefits of Using the Cycleless Module

* **Simplified Program Administration:** Reduced complexity for programs that do not require distinct operational cycles.
* **Increased Flexibility:**  Enables more dynamic and responsive program delivery, particularly for on-demand or continuous support programs.
* **Streamlined User Experience:**  Provides a more intuitive interface for managing cycleless programs. 

## Use Cases

* **Emergency Cash Transfers:** Rapidly provide assistance to beneficiaries in response to unforeseen events without the need for pre-defined cycles.
* **Conditional Cash Transfers with Rolling Enrollment:**  Allow beneficiaries to enroll and become eligible for benefits on an ongoing basis, rather than within fixed enrollment periods.
* **Continuous Social Assistance:**  Support programs that provide ongoing assistance based on evolving needs and circumstances, such as disability benefits.
</file>

<file path="docs/reference/modules/g2p_program_documents.md">
# g2p_program_documents Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_program_documents](g2p_program_documents) module extends the OpenG2P framework to incorporate document management capabilities within social protection programs. This module builds upon the functionalities provided by the [g2p_documents](g2p_documents) and [g2p_programs](g2p_programs) modules.

## Purpose

This module aims to streamline the handling of supporting documents throughout the lifecycle of a social protection program. It enables the association of documents with various program elements, including:

* **Programs:** Defining a designated document storage backend for each program.
* **Program Memberships:** Uploading and managing supporting documents for individual beneficiary program memberships.
* **Entitlements:** Linking relevant documents to specific entitlements within a program.

## Functionality

* **Program-Level Document Storage:**
    * Administrators can configure a specific storage backend for each program to centrally manage supporting documents.
* **Document Attachment to Program Memberships:**
    * Beneficiaries or program staff can upload supporting documents during the program enrollment process or at any point during their membership.
    * Documents associated with a program membership are accessible from the beneficiary's profile.
* **Document Linking to Entitlements:**
    * Relevant documents can be linked to individual entitlements, providing evidence or context for approval processes.
    * When new entitlements are created, the module attempts to automatically copy relevant documents from the beneficiary's program membership or previous entitlements.
* **Document Preview:**
    * The module provides a built-in document preview mechanism for supported file types, allowing users to view documents directly within the OpenG2P interface.

## Integration

* **[g2p_documents](g2p_documents):**  Leverages the core document management functionalities provided by this module for document storage, retrieval, and preview.
* **[g2p_programs](g2p_programs):** Extends the existing program management features by integrating document handling capabilities into program definitions, beneficiary memberships, and entitlements.

## Security

The module inherits security groups from the [g2p_documents](g2p_documents) module, ensuring that only authorized users can access, upload, or manage documents. This includes roles such as program validators, cycle approvers, program managers, and finance validators.
</file>

<file path="docs/reference/modules/g2p_program_registrant_info_rest_api.md">
# G2P Program: Program Registrant Info REST API 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of the [g2p_programs_rest_api](g2p_programs_rest_api) and [g2p_program_registrant_info](g2p_program_registrant_info) modules to expose program registrant information via a REST API. This allows external systems to interact with and manage program-specific data associated with registrants.

## Functionality:

- **Exposes Program Registrant Info:** Provides API endpoints to access and manipulate program-specific information of registrants within a program. This includes data such as enrollment status, benefit level, and other custom fields defined for the program.

## Integration:

- **[g2p_programs_rest_api](g2p_programs_rest_api):** This module extends the existing API endpoints for managing program memberships. It adds fields to include program registrant information when retrieving or updating memberships.
- **[g2p_program_registrant_info](g2p_program_registrant_info):** This module utilizes the data models defined in `g2p_program_registrant_info` to represent and handle program-specific information.

## Data Models:

- **ProgramRegistrantInfoOut:**  Represents the output format of program registrant information returned by the API. It includes fields like `state` and a dictionary or list of dictionaries for `program_registrant_info`. 
- **ProgramMembershipIn/Out:** Extends the existing input and output models for program memberships defined in [g2p_programs_rest_api](g2p_programs_rest_api). The `ProgramMembershipIn` model adds an optional field `program_registrant_info` for receiving program-specific data. The `ProgramMembershipOut` model includes a list of `ProgramRegistrantInfoOut` objects under the field `program_registrant_info_ids`.

## Benefits:

- **Seamless Integration:** Enables external applications to access and manage program-specific registrant data directly.
- **Enhanced Data Management:** Facilitates efficient handling and updating of program-related information for individual registrants.
- **Improved Interoperability:** Promotes interoperability between the OpenSPP system and other systems requiring access to program registrant details.

This module is essential for integrating OpenSPP with external systems that need to interact with program-specific information of registrants. It provides a structured and secure way to access and manage this data, further enhancing the efficiency and transparency of social protection programs.
</file>

<file path="docs/reference/modules/g2p_program_registrant_info.md">
# G2P Program: Registrant Info Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_program_registrant_info](g2p_program_registrant_info) module enhances the functionality of the OpenSPP by introducing the concept of program-specific application information for registrants. This module allows program managers to collect and store additional data from registrants during the application process, which can be used to assess eligibility, track progress, and manage program participation. 

## Features

* **Program-Specific Information:** Captures and stores program-specific information during the registrant's application process.
* **Application Tracking:** Assigns a unique application ID to each application and allows tracking of its status throughout the program lifecycle.
* **Integration with Programs and Memberships:** Seamlessly integrates with the [g2p_programs](g2p_programs) and [g2p_registry_individual](g2p_registry_individual) modules to associate application information with specific programs and registrants.
* **Dynamic Data Collection:** Employs a flexible JSON field to accommodate various data structures and program-specific requirements.
* **Improved Decision Making:** Provides program managers with comprehensive information to facilitate informed decisions regarding eligibility and enrollment.

## Functionality and Integration

The module introduces a new model, `g2p.program.registrant_info`, which stores program-specific information submitted by registrants. Each record in this model represents an application instance and is linked to:

* **Registrant:** The individual or group applying to the program (`res.partner` model).
* **Program:** The specific program to which the registrant is applying ([g2p.program](g2p_program) model).
* **Program Membership:** The registrant's membership in the program, if approved ([g2p.program_membership](g2p_program_membership) model).

The module also extends the functionality of the `g2p.program_membership` model to include a one-to-many relationship with `g2p.program.registrant_info`, enabling tracking of multiple applications by the same registrant to the same program.

The [g2p_program_registrant_info](g2p_program_registrant_info) module is designed to work in conjunction with the following modules:

* **[g2p_programs](g2p_programs):** Manages program definitions and lifecycles.
* **[g2p_registry_individual](g2p_registry_individual):** Manages individual registrant information.
* **[g2p_registry_group](g2p_registry_group):** Manages group registrant information.

## Benefits

* **Enhanced Data Collection:** Allows programs to capture specific data points relevant to their operations.
* **Improved Application Management:** Facilitates efficient tracking and processing of registrant applications.
* **Data-Driven Decision Making:** Provides program managers with the necessary information to make informed decisions regarding eligibility and enrollment.
* **Increased Transparency and Accountability:** Creates a clear and auditable record of the application process.

This module contributes to the overall efficiency and effectiveness of social protection programs by providing a structured and comprehensive approach to managing registrant information during the crucial application stage.
</file>

<file path="docs/reference/modules/g2p_program_reimbursement.md">
# OpenG2P Programs: Reimbursement Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_program_reimbursement](g2p_program_reimbursement) module extends the OpenG2P platform to manage reimbursement programs. These programs differ from standard social assistance programs, focusing on reimbursing pre-approved service providers for delivering goods or services to beneficiaries. 

This module builds upon the core functionality of the [g2p_programs](g2p_programs) and [g2p_program_assessment](g2p_program_assessment) modules.

## Features

* **Reimbursement Program Designation:** Designate specific programs as "reimbursement programs" within the system.
* **Service Provider Management:** Manage service providers as participants in reimbursement programs. The module leverages the existing `res.partner` model, filtering and displaying partners designated as "Service Providers".
* **Reimbursement Claim Submission:** Enables service providers to submit reimbursement claims for services rendered to beneficiaries. 
* **Claim Validation and Approval:**  Provides a structured workflow to validate and approve submitted reimbursement claims.
* **Integration with Entitlements:**  Seamlessly integrates with the entitlement system to generate and track reimbursements.

## Key Concepts

* **Reimbursement Program:** A specialized type of program within OpenG2P that manages the reimbursement of pre-approved service providers.
* **Service Provider:**  A business or individual registered in the system to provide goods or services to beneficiaries and eligible for reimbursement.
* **Reimbursement Claim:** A formal request submitted by a service provider for reimbursement of rendered services.
* **Original Entitlement:** In cases where a reimbursement is directly linked to a beneficiary's existing entitlement, this refers to the initial entitlement against which the service was provided.

## Module Integration

The [g2p_program_reimbursement](g2p_program_reimbursement) module seamlessly integrates with the following modules:

* **[g2p_programs](g2p_programs):**  Inherits core program management features and extends them to accommodate reimbursement program specifics.
* **[g2p_program_assessment](g2p_program_assessment):** Leverages assessment functionalities to potentially support the validation of reimbursement claims. 

## Example Use Case

1. **Program Setup:** A government agency sets up a reimbursement program for agricultural inputs. They register fertilizer suppliers as service providers in the system.
2. **Beneficiary Entitlement:** A farmer is assessed and granted an entitlement for a specific type and quantity of fertilizer.
3. **Service Delivery & Claim:** The farmer redeems their entitlement from a registered fertilizer supplier. The supplier then submits a reimbursement claim through the system, referencing the farmer's original entitlement and providing necessary documentation.
4. **Claim Review & Approval:** The claim undergoes review and approval by the program administrators. 
5. **Reimbursement Processing:** Once approved, the system generates a reimbursement payment to the supplier.

This module streamlines the management of reimbursement programs, improves transparency, and ensures efficient service delivery to beneficiaries.
</file>

<file path="docs/reference/modules/g2p_programs_rest_api.md">
# G2P Programs REST API Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [`g2p_programs_rest_api`](g2p_programs_rest_api) module extends the functionality provided by the [`g2p_registry_rest_api`](g2p_registry_rest_api) and [`g2p_programs`](g2p_programs) modules to expose program-related data and operations through a REST API. 

## Functionality

This module focuses on integrating program information with the registry data. It allows external systems to:

- **Manage program memberships:** Create, read, update, and delete program membership information for registrants.
- **Retrieve program-specific registrant data:** Access registrant information enriched with their program memberships, including enrollment and exit dates. 
- **Manage program memberships for groups:**  Handle program membership data within the context of groups registered in the system.

## Data Models

This module introduces new data structures and extends existing ones from the [`g2p_registry_rest_api`](g2p_registry_rest_api) module:

- **`RegistrantProgramMembershipIn`** and **`RegistrantProgramMembershipOut`**: Represent program membership information for individual registrants, including enrollment and exit dates.
- **`RegistrantProgramMemberInfoIn`** and **`RegistrantProgramMemberInfoOut`**: Extend the `RegistrantInfoIn` and `RegistrantInfoOut` models from [`g2p_registry_rest_api`](g2p_registry_rest_api) to include program membership details.
- **`GroupMembersInfoIn`**: Extends the `GroupMembersInfoIn` model from [`g2p_registry_rest_api`](g2p_registry_rest_api) to include program membership details for members of a group.

## Integration

The [`g2p_programs_rest_api`](g2p_programs_rest_api) module seamlessly integrates with:

- **[`g2p_registry_rest_api`](g2p_registry_rest_api)**: It leverages the existing API infrastructure and data models for registrants and groups.
- **[`g2p_programs`](g2p_programs)**: It interacts with this module to retrieve and manage program-related data within the DCI system. 

This module enables efficient data exchange and synchronization between the OpenSPP system and external systems that require access to program and beneficiary information.
</file>

<file path="docs/reference/modules/g2p_programs.md">
# G2P Programs

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document details the **G2P Programs** module within the OpenSPP platform. This module is responsible for defining and managing the core aspects of social protection programs, including eligibility criteria, program cycles, entitlement management, and payment processing.

## Purpose

The **G2P Programs** module provides a comprehensive framework for:

* **Defining Social Protection Programs**:  Allows administrators to create and configure programs with specific objectives, target populations, and operational processes.
* **Managing Program Cycles**:  Organizes program activities into distinct cycles, each with defined start and end dates, enrollment periods, and associated entitlements. 
* **Determining Eligibility**:  Provides a flexible mechanism for defining and evaluating eligibility criteria, ensuring that only qualified registrants receive program benefits.
* **Generating Entitlements**:  Automates the process of creating entitlements for eligible beneficiaries, tracking their validity periods and amounts. 
* **Facilitating Payments**:  Streamlines the disbursement of benefits to beneficiaries, either through cash transfers or other delivery mechanisms. 
* **Monitoring and Reporting**:  Offers tools for tracking program progress, beneficiary participation, and financial transactions, facilitating program evaluation and accountability.

## Module Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**:
    * Leverages the base registry module for core registrant management functionalities.
    * Accesses registrant data, such as demographics, contact information, and group affiliations, to evaluate eligibility and assign beneficiaries to programs.

2. **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**:
    * Utilizes individual registrant data for eligibility determination, particularly for programs targeting individuals.
    * Extends individual registrant views to display program participation details. 

3. **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**:
    * Enables the enrollment of groups as beneficiaries, especially for programs designed for group participation.
    * Integrates with group registrant views to display program membership information.

4. **G2P Registry: Membership ([g2p_registry_membership](g2p_registry_membership))**:
    * Handles the relationships between individuals and groups, crucial for programs with group-based eligibility or delivery mechanisms.
    * Utilizes membership data to determine group eligibility and allocate benefits to individual members. 

5. **Account (account)**:
    * Integrates with Odoo's accounting module for financial management.
    * Records program-related transactions, tracks disbursement journals, and generates reports on program expenditures.

6. **Queue Job (queue_job)**:
    * Employs the queue job framework for asynchronous processing of computationally intensive tasks, such as eligibility verification, entitlement generation, and payment processing.
    * Improves system performance and user experience by delegating long-running operations to background jobs.

7. **G2P Bank ([g2p_bank](g2p_bank))**:
    * Facilitates the integration with financial service providers (FSPs) for electronic payment disbursements.
    * Manages bank account information for registrants and processes payments through pre-configured payment gateways.

8. **Calendar (calendar)**:
    * Utilizes Odoo's calendar module for scheduling program-related events, such as enrollment periods, payment cycles, and reporting deadlines.
    * Integrates with program and cycle views to display upcoming events and reminders.

9. **Event SMS (event_sms)**:
    * Enables SMS notifications for program-related events, including enrollment confirmations, eligibility updates, payment notifications, and reminders. 
    * Leverages the module's SMS gateway integration for efficient and timely communication with beneficiaries. 

## Additional Functionality

* **Program Model (g2p.program)**:
    * Defines the structure and attributes of social protection programs, including name, description, target type (individual or group), delivery mechanisms, and associated managers.
    * Offers a flexible system for configuring program-specific settings and workflows.

* **Program Membership (g2p.program_membership)**:
    * Creates a dedicated model to manage the association between registrants and programs, tracking enrollment status, enrollment dates, exit dates, and eligibility outcomes.
    * Provides a central location for managing program beneficiaries and monitoring their participation.

* **Program Cycle (g2p.cycle)**: 
    * Defines distinct periods within a program, with defined start and end dates, for organizing activities like enrollment, eligibility verification, entitlement generation, and payment disbursement.
    * Allows for structured management of program timelines and facilitates cycle-specific reporting and evaluation.

* **Entitlement (g2p.entitlement)**:
    * Models the right of a beneficiary to receive benefits within a specific cycle, defining the type of entitlement (cash, in-kind), amount, validity period, and disbursement details.
    * Offers a robust mechanism for tracking and managing the allocation of benefits to eligible beneficiaries.

* **Payment (g2p.payment)**:
    * Records details of individual payments made to beneficiaries, including payment method, amount, transaction date, status (success/failure), and associated fees.
    * Facilitates efficient payment processing, reconciliation, and auditing of program expenditures.

* **Program Managers**:
    * Defines various manager models for specific program functionalities, including:
        * **Eligibility Managers (g2p.eligibility.manager)**:  Responsible for defining and evaluating eligibility criteria based on program-specific rules.
        * **Cycle Managers (g2p.cycle.manager)**:  Manage the creation and execution of program cycles, including beneficiary enrollment and cycle-specific activities. 
        * **Entitlement Managers (g2p.program.entitlement.manager)**:  Oversee the generation, approval, and disbursement of entitlements to eligible beneficiaries.
        * **Payment Managers (g2p.program.payment.manager)**:  Handle payment processing, integration with FSPs, and reconciliation of payment transactions.
        * **Deduplication Managers (g2p.deduplication.manager)**:  Identify and resolve duplicate registrant entries to ensure accurate beneficiary identification and prevent fraud.
        * **Notification Managers (g2p.program.notification.manager)**:  Manage communication with beneficiaries, including SMS notifications and other forms of outreach. 

* **Customizable Workflows**: 
    * The module's flexible architecture allows administrators to define program-specific workflows, tailoring the sequence and execution of tasks like eligibility verification, entitlement generation, and payment processing.
    * Supports various program models and operational requirements.

## Conclusion

The **G2P Programs** module is the cornerstone of the OpenSPP platform, providing the essential tools for managing every stage of a social protection program's lifecycle. Its comprehensive functionality, integration with other core modules, and customizable workflows make it a powerful and adaptable solution for delivering social protection benefits effectively and efficiently.
</file>

<file path="docs/reference/modules/g2p_proxy_means_test.md">
# G2P: Proxy Means Test Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenSPP system to incorporate **Proxy Means Testing (PMT)** functionality into social protection programs. It enables program administrators to define and configure PMT parameters, automatically calculate PMT scores for registrants, and leverage these scores for program targeting and enrollment.

## Features:

- **PMT Configuration:** Enables program administrators to enable PMT for specific programs and define the parameters used in the PMT calculation ([g2p_programs](g2p_programs)).
- **Parameter Definition:** Allows administrators to select specific fields from the registrant information form ([g2p_program_registrant_info](g2p_program_registrant_info)) and assign weightages to these fields, effectively defining the PMT formula.
- **Automatic Score Calculation:** Automatically calculates and stores the PMT score for each registrant based on their provided information and the defined PMT parameters.
- **Score Visibility:** Displays the calculated PMT score on relevant forms, including the registrant information form, program membership form, and individual/group views, providing stakeholders with easy access to this information.

## Integration and Dependencies:

- **[g2p_programs](g2p_programs):** This module integrates with the core `g2p_programs` module to add PMT configuration options to program definitions. 
- **[g2p_program_registrant_info](g2p_program_registrant_info):** This module extends the functionality of `g2p_program_registrant_info` to include:
    - Calculation and storage of the PMT score.
    - Dynamic retrieval of available fields for PMT parameter definition.
    - Logic to delete related PMT parameters when a field is deleted.

## Benefits:

- **Improved Targeting:** Enables programs to target beneficiaries more effectively based on their socio-economic status.
- **Enhanced Efficiency:** Automates the PMT calculation process, reducing administrative burden and potential for errors.
- **Increased Transparency:** Provides a clear and auditable method for determining program eligibility.
- **Data-Driven Decision Making:**  Empowers program administrators to make data-informed decisions regarding program enrollment and resource allocation.
</file>

<file path="docs/reference/modules/g2p_registry_addl_info_rest_api.md">
# G2P Registry: Additional Info REST API Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of the [g2p_registry_rest_api](g2p_registry_rest_api) and [g2p_registry_addl_info](g2p_registry_addl_info) modules by providing API endpoints for managing additional G2P (Government-to-Person) information associated with registrants and group memberships. 

## Functionality and Integration

This module introduces two new classes:

- **RegistrantAddlInfoIn** and **RegistrantAddlInfoOut**: These classes, extending the existing `RegistrantInfoIn` and `RegistrantInfoOut` classes from the [g2p_registry_rest_api](g2p_registry_rest_api) module, add fields for handling additional G2P information during data input and output for individual registrants. This allows external systems to read and write this custom information through the API.

- **GroupMembersInfoIn**:  This class extends the `GroupMembersInfoIn` class from the [g2p_registry_rest_api](g2p_registry_rest_api) module and adds a field for managing additional G2P information associated with group memberships. This facilitates exchanging custom group-related data via the API.

By integrating with the core registry and REST API modules, this module enables a seamless flow of additional G2P data, ensuring that external systems can access and manage this crucial information alongside the standard registry data.

## Key Features:

- **API Endpoints for Additional G2P Info:** Provides dedicated API endpoints for managing additional G2P information related to individual registrants and group memberships.
- **Data Model Extension:** Extends the existing data models for registrants and group memberships to accommodate additional G2P information.
- **Seamless Integration:** Integrates smoothly with the [g2p_registry_rest_api](g2p_registry_rest_api) module, leveraging its existing infrastructure for authentication, authorization, and data handling.

## Benefits:

- **Enhanced Data Management:** Enables efficient management of custom G2P data alongside standard registry information.
- **Improved Interoperability:** Facilitates data exchange with external systems that require access to additional G2P information.
- **Flexibility and Customization:** Allows for tailored data structures to meet the specific needs of different social protection programs.
</file>

<file path="docs/reference/modules/g2p_registry_addl_info.md">
# G2P Registry: Additional Info Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_registry_addl_info](g2p_registry_addl_info) module extends the OpenSPP platform by providing a flexible mechanism for capturing and managing additional, program-specific information for both individual and group registrants. 

## Purpose

This module aims to address the need for capturing data points that are not part of the core registrant information but are crucial for specific social protection programs. It achieves this by adding a dedicated "Additional Information" section to both individual and group registrant forms. 

## Functionality

The module introduces the following key features:

- **JSON Field for Additional Information:** A dedicated JSON field `additional_g2p_info` is added to the `res.partner` model. This field allows storing unstructured data, providing flexibility in capturing diverse program-specific information.
- **Customizable Input Widget:** A dedicated Javascript widget `g2p_registry_addl_info_widget` is used to render and manage the content of the `additional_g2p_info` field. This allows for dynamic and user-friendly data entry tailored to the specific requirements of different programs.
- **Integration with Registrant Forms:** The "Additional Information" section is seamlessly integrated into both the [g2p_registry_individual](g2p_registry_individual) and [g2p_registry_group](g2p_registry_group) forms, ensuring that program implementers can easily access and manage this additional data.

## Dependencies

The [g2p_registry_addl_info](g2p_registry_addl_info) module depends on the following modules:

- [g2p_registry_base](g2p_registry_base): Provides the foundational framework for the G2P registry.
- [g2p_registry_individual](g2p_registry_individual): Enables the registration and management of individual registrants.
- [g2p_registry_group](g2p_registry_group): Facilitates the registration and management of group registrants.

## Benefits

- **Enhanced Data Capture:** Enables capturing a wider range of data points relevant to specific social protection programs.
- **Program Flexibility:** Accommodates diverse data needs without requiring code-level modifications.
- **Improved Data Management:** Provides a structured approach to managing additional registrant information.

By providing a flexible and extensible mechanism for managing additional registrant information, the [g2p_registry_addl_info](g2p_registry_addl_info) module empowers program implementers to effectively tailor OpenSPP to the unique requirements of their social protection initiatives.
</file>

<file path="docs/reference/modules/g2p_registry_base.md">
# G2P Registry Base

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **G2P Registry: Base** module within the OpenSPP ecosystem. This module is the foundational layer upon which other OpenSPP registry modules are built.  It provides core features for managing registrant data, relationships, and identification, leaving specialized functionalities to dependent modules.

## Purpose

The **G2P Registry: Base** module aims to:

* Establish a standardized structure for storing and managing registrant data.
* Provide essential fields and functionalities common to various registry types.
* Enable flexible extension and customization through dependent modules.

## Module Dependencies and Integration

1. **Contacts (res.partner)**:  This module extends the Odoo Contacts functionality by adding fields specific to registrants, including:
    * **Registration Date**: Records the date a registrant was added to the system.
    * **Disabled**:  Flags a registrant as inactive, with optional reasons and timestamps for disabling and enabling.
    * **Registrant Type**: Differentiates between individuals and groups. 
    * **Tags**: Allows for flexible categorization of registrants using custom tags.

    By leveraging the existing Contacts module, the **G2P Registry: Base** module ensures seamless integration with other Odoo applications that utilize contact information.

2. **Web (web)**:  The **G2P Registry: Base** module uses the Web module to provide a user-friendly interface for managing registry data within the Odoo backend. 

3. **Portal (portal)**: The Portal module is utilized for potential future features, enabling secure access to registry data for external stakeholders (e.g., registrants themselves) through a dedicated online portal. 

## Additional Functionality

Beyond extending the Contacts module, the **G2P Registry: Base** module introduces:

* **Registrant IDs ([g2p.reg.id](g2p.reg.id))**: This feature allows multiple forms of identification to be associated with a single registrant, supporting a variety of ID types with customizable validation rules.
* **Phone Numbers ([g2p.phone.number](g2p.phone.number))**:  Manages multiple phone numbers per registrant, incorporating features for validation, disabling/enabling numbers, and storing the date each number was collected.
* **Registrant Relationships ([g2p.reg.rel](g2p.reg.rel))**: Establishes and tracks relationships between registrants (both individual-to-individual and individual-to-group), defining the type of relationship and allowing for date ranges and disabling/enabling of relationships.
* **Tags ([g2p.registrant.tags](g2p.registrant.tags))**: Provides a flexible tagging system to categorize and filter registrants based on specific criteria.
* **Districts ([g2p.district](g2p.district))**: Adds the capability to define and manage geographical districts, allowing for location-based organization of registrants. 

## Conclusion

The **G2P Registry: Base** module lays the groundwork for building robust and adaptable registries within OpenSPP. By focusing on core registry features and integrating seamlessly with essential Odoo modules, it provides a solid foundation for specialized registry applications.
</file>

<file path="docs/reference/modules/g2p_registry_encryption.md">
# G2P Registry: Encryption Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_registry_encryption](g2p_registry_encryption) module adds an encryption layer to the OpenSPP registry system. It allows sensitive registry data to be stored securely, enhancing the system's overall privacy and security. This module builds upon the functionality provided by the [g2p_encryption](g2p_encryption), [g2p_registry_base](g2p_registry_base) and [g2p_registry_individual](g2p_registry_individual) modules.

## Features

- **Selective Encryption:**  Encrypts specific fields of the `res.partner` model that contain sensitive registrant information like name, address, and birth place.
- **Configurable Encryption Provider:**  Allows administrators to select and configure the desired encryption provider from the available options within OpenSPP.
- **On-the-fly Encryption and Decryption:**  Transparently encrypts data upon saving a record and decrypts it when retrieved, ensuring a seamless user experience.
- **Granular Control:**  Provides options to enable or disable encryption and decryption through system configuration settings.

## Integration

- **[g2p_encryption](g2p_encryption):**  Utilizes the encryption providers and functionalities provided by this module to perform the actual encryption and decryption operations.
- **[g2p_registry_base](g2p_registry_base) and [g2p_registry_individual](g2p_registry_individual):** Extends the existing registry data models and views to accommodate the encryption features.

## Configuration

The module can be configured through the OpenSPP settings interface:

1. **Encryption Provider:** Choose the preferred encryption provider from the list of configured providers.
2. **Enable Encryption:** Toggle the "Encrypt Registry fields" option to enable encryption for the specified fields.
3. **Enable Decryption (Caution):** This option allows decryption of registry fields. Use with caution, as enabling it might expose sensitive data. It is generally recommended to keep this disabled unless explicitly required.

## Security Considerations

While this module enhances data security, it is crucial to remember that the overall system's security relies on several factors:

- **Encryption Key Management:**  Securely store and manage the encryption keys used by the chosen provider.
- **Access Control:**  Implement strict access control measures to prevent unauthorized access to sensitive data and configuration settings.
- **Regular Security Audits:**  Conduct periodic security audits and updates to mitigate potential vulnerabilities.

By carefully configuring and integrating this module into the OpenSPP ecosystem, implementers can significantly improve the protection of sensitive registry data.
</file>

<file path="docs/reference/modules/g2p_registry_group.md">
# G2P Registry Groups

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **G2P Registry: Groups** module within the OpenSPP framework. This module builds upon the **G2P Registry: Base** module to provide specific functionality for managing groups of registrants.

## Purpose

The **G2P Registry: Groups** module focuses on:

* **Defining Group Types**:  Allows administrators to create and manage different categories of groups (e.g., households, cooperatives, farmer groups).
* **Representing Groups as Registrants**: Extends the concept of a "registrant" from the **G2P Registry: Base** module to include groups, enabling groups to be managed alongside individual registrants.
* **Categorizing Groups**:  Associates each group with a specific group type, providing structure and context to group data. 

## Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**: This module inherits directly from the **G2P Registry: Base** module, leveraging its core features for managing registrant information, IDs, relationships, and more. This inheritance model ensures that groups can be managed using the same tools and workflows as individual registrants, providing a consistent user experience.

2. **Contacts (res.partner)**:  Similar to the **G2P Registry: Base** module, this module utilizes the Odoo Contacts module to represent groups as entities.  The group-specific functionalities are added as extensions to the existing contact model.

## Additional Functionality

* **Group Kinds ([g2p.group.kind](g2p.group.kind))**:
    * Introduces a new model to define and manage different types of groups within the system.
    * Enforces unique naming to avoid duplication.

* **Group Representation**:
    * Leverages the `res.partner` model (inherited from **Contacts**) to represent groups as entities.
    * Adds a dedicated field (`kind`) to link each group to its designated group type.

## Conclusion

The **G2P Registry: Groups** module enhances the OpenSPP platform by providing a structured way to manage groups of registrants.  It integrates seamlessly with the **G2P Registry: Base** module, maintaining consistency in data management and user experience. This module is essential for social protection programs and farmer registries where group-level management is crucial.
</file>

<file path="docs/reference/modules/g2p_registry_individual.md">
# G2P Registry Individual

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **G2P Registry: Individual** module within the OpenSPP ecosystem. Building upon the foundation provided by the **[G2P Registry: Base](g2p_registry_base)** module, this module focuses specifically on managing **individual registrant** data.

## Purpose

The **G2P Registry: Individual** module aims to:

* Extend the base registrant model to incorporate data fields specific to individuals.
* Provide a dedicated interface for managing and viewing individual registrant profiles. 
* Enhance data integrity through validation rules and constraints related to individual attributes.

## Module Dependencies and Integration

1. **[G2P Registry: Base](g2p_registry_base)**:  This module inherits from the core functionalities provided by the base module, including:
    * **Registrant Management**: Leverages the base registrant model, inheriting features for managing registration dates, disabling/enabling registrants, tags, IDs, phone numbers, and relationships.
    * **Districts**:  Utilizes the district management features to associate individuals with specific geographical locations.

2. **Contacts (res.partner)**:  Further extends the Odoo Contacts module by adding individual-specific fields to the registrant profile, including:
    * **Family Name, Given Name, Additional Name**:  Allows for structured recording of individual names.
    * **Birthdate**:  Stores the registrant's date of birth, with options to mark it as approximate. 
    * **Age**: Calculates and displays the registrant's age based on their birthdate.
    * **Gender**:  Provides a field for recording gender information.

## Additional Functionality

The module introduces:

* **Gender Types (gender.type)**:  A new model to define and manage various gender options. This list is dynamically used in the gender selection field for individuals, allowing for customization and inclusivity.
* **Dynamic Name Concatenation**:  Automatically generates the full name of the individual in the 'name' field based on the entered family name, given name, and additional name, ensuring consistency in display. 
* **Age Calculation and Validation**:  Calculates the age of the individual based on their birthdate and includes validation to ensure the entered age is a valid number.
* **Birthdate Validation**:  Restricts the selection of future dates for the birthdate field. 

## Conclusion

The **G2P Registry: Individual** module enhances the OpenSPP platform by providing a dedicated and feature-rich system for managing individual registrant data. By extending the base registry functionality and integrating seamlessly with Odoo's Contacts module, it ensures comprehensive and efficient handling of individual profiles within social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/g2p_registry_membership.md">
# G2P Registry Membership

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **G2P Registry: Membership** module within the OpenSPP ecosystem. This module focuses on managing relationships between individual registrants and groups, adding an essential layer of organization and data management to the platform.

## Purpose

The **G2P Registry: Membership** module aims to:

* **Define Relationships:** Introduce different types of relationships (or roles) that individuals can have within groups (e.g., Head of Household, Member, Dependent).
* **Track Group Members:** Enable the system to associate individual registrants with specific groups.
* **Manage Membership Timeframes:**  Record start and end dates for each membership, allowing for accurate historical tracking of group composition over time.

## Module Dependencies and Integration

1. **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**: This module relies on the individual registrant data managed by the **G2P Registry: Individual** module.  It directly links individuals to groups, leveraging the individual profiles created and managed within that module.

2. **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**: It integrates closely with the group management capabilities provided by the **G2P Registry: Group** module.  It uses the group definitions and data structures from this module to establish and track membership.

3. **Contacts (res.partner)**: Leverages the Odoo Contacts module to access and display information about individuals and groups within the membership management interface.

## Additional Functionality

The module introduces the following key elements:

* **Group Membership Model (g2p.group.membership):** 
    * Stores data about individual memberships in groups, including the group, the individual member, the type of relationship, start date, and optional end date.
    * Includes computed fields for status (active/inactive) and a flag to indicate if the membership has ended.
    * Provides methods to directly open the linked individual or group forms for easy navigation and data viewing.

* **Group Membership Kind Model (g2p.group.membership.kind):**
    * Allows administrators to define and manage different types of relationships within groups (e.g., Head of Household, Member, Dependent).
    * Includes an option to mark a kind as "unique," enforcing that only one member within a group can have this relationship type. 

* **Data Validation and Constraints:**
    * Implements validation rules to prevent duplicate memberships (the same individual cannot be added to the same group twice with the same relationship).
    * Includes logic to ensure the end date of a membership cannot be earlier than the start date.

* **User Interface Enhancements:**
    * Adds dedicated tabs or sections within both the Individual and Group forms to display and manage memberships. 
    * Provides views (tree, form) to manage group memberships directly.

## Conclusion

The **G2P Registry: Membership** module is crucial for representing and managing the complex relationships between individuals and groups within OpenSPP. It integrates seamlessly with other core registry modules, providing a comprehensive system for tracking group composition, roles within groups, and membership history.  This functionality is essential for social protection programs and farmer registries that rely on accurate and up-to-date information about individuals' group affiliations.
</file>

<file path="docs/reference/modules/g2p_registry_rest_api_extension_demo.md">
# G2P Registry: Rest API Extension Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

This module serves as a demonstration of how to extend the OpenG2P Registry Rest API. It provides a practical example of adding new fields to existing API responses without directly modifying the core API module ([g2p_registry_rest_api](g2p_registry_rest_api)).

## Purpose

The main goal of this module is to illustrate the extensibility of the OpenG2P Registry Rest API. By providing a concrete example, it guides developers on how to tailor the API output to their specific needs without compromising the integrity of the core API functionality.

## Functionality

The module focuses on extending the `GroupInfoOut` model from the [g2p_registry_rest_api](g2p_registry_rest_api) module. It adds a new field `active` to the `GroupInfoOut` response, which indicates whether the group is currently active. 

This is achieved using the `extends` feature provided by the `extendable-pydantic` library. This approach ensures that the extended model inherits all the existing fields and functionalities of the original `GroupInfoOut` model while adding the new `active` field.

## Integration

The [g2p_registry_rest_api_extension_demo](g2p_registry_rest_api_extension_demo) module depends on the [g2p_registry_rest_api](g2p_registry_rest_api) module. It leverages the API endpoints and data models provided by the core API module and extends them to include additional information.

## Conclusion

This demonstration module provides a blueprint for developers looking to customize the OpenG2P Registry Rest API. By following the principles illustrated in this module, developers can seamlessly extend the API to accommodate specific data requirements and functionalities.
</file>

<file path="docs/reference/modules/g2p_registry_rest_api.md">
# G2P Registry: Rest API Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [g2p_registry_rest_api](g2p_registry_rest_api) module extends the functionality of the OpenG2P platform by providing a RESTful API for interacting with the [g2p_registry_membership](g2p_registry_membership) module. This module allows external systems and applications to seamlessly access and manage data related to groups and individuals within the registry.

## Features

- **RESTful API Endpoints:** Exposes API endpoints for performing CRUD (Create, Read, Update, Delete) operations on group and individual records.
- **Integration with FastAPI:** Leverages the FastAPI framework for building high-performance and scalable APIs.
- **Security:** Implements role-based access control to restrict API access based on user permissions defined in the `g2p_security.xml` file.
- **Customizable Endpoints:** Allows for the creation of custom API endpoints to cater to specific integration needs.

## Dependencies

This module directly depends on the following modules:

- **[g2p_registry_membership](g2p_registry_membership):** Provides the core functionality for managing groups and individuals within the registry.
- **fastapi:** A modern, fast (high-performance), web framework for building APIs with Python.
- **extendable_fastapi:** Extends the FastAPI framework with additional features for DCI integration.

## Functionality

The module enhances the OpenG2P platform by:

- **Enabling external system integration:** Provides a standardized way for other systems, such as mobile applications or data analysis tools, to interact with the registry data.
- **Automating data exchange:** Allows for automated data synchronization between the OpenG2P platform and other systems.
- **Building custom applications:** Enables the development of custom applications that leverage the registry data through its API.

## Security

The [g2p_registry_rest_api](g2p_registry_rest_api) module enforces security through the following mechanisms:

- **Role-based access control:** Defines specific roles (`Rest API POST` and `Rest API GET`) that grant access to different API endpoints and operations.
- **DCI authentication:** Leverages DCI's built-in authentication system to authenticate API requests.

## Conclusion

The [g2p_registry_rest_api](g2p_registry_rest_api) module plays a crucial role in enhancing the interoperability and extensibility of the OpenG2P platform. By providing a comprehensive RESTful API, it enables seamless data exchange and integration with external systems, empowering organizations to build more connected and efficient social protection programs.
</file>

<file path="docs/reference/modules/index.md">
# OpenSPP Modules Index

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## SPP Modules

| Module | Summary |
| ------ | ------- |
| [OpenSPP Base API](spp_base_api) | Provides foundational API functions and methods for seamless interaction with the OpenSPP system, enabling data exchange via APIs or XML-RPC. |
| [OpenSPP Programs](spp_programs) | Manage cash and in-kind entitlements, integrate with inventory, and enhance program management features for comprehensive social protection and agricultural support. |
| [OpenSPP User Roles](spp_user_roles) | Enhances user role management with local roles and area-based access control for improved data security and granularity in OpenSPP. |
| [OpenSPP DCI API Server](spp_dci_api_server) | Provides a DCI-compliant RESTful API for secure data exchange with OpenSPP's registry. |
| [OpenSPP In-Kind Entitlement](spp_entitlement_in_kind) | Manages the distribution of in-kind entitlements within social protection programs, handling inventory, service points, and beneficiary redemption. |
| [OpenSPP Encryption Module](spp_encryption) | Provides secure encryption, decryption, signing, and verification of data within OpenSPP using JWCrypto. |
| [OpenSPP Data Source](spp_registry_data_source) | Provides a framework for integrating external data sources into OpenSPP, enabling connection to and retrieval of data from external systems like farmer registries and social protection programs. |
| [OpenSPP Farmer Registry Demo](spp_farmer_registry_demo) | Provides pre-populated demo data for the OpenSPP Farmer Registry, showcasing its features with realistic sample data. |
| [OpenSPP Registrant Import](spp_registrant_import) | Streamlines the import of registrant data into OpenSPP, simplifies data mapping, and automates unique ID generation. |
| [OpenSPP Data Export](spp_data_export) | Enables exporting large datasets to Excel by overriding the default export functionality and providing error handling for exceeding Excel row limits. |
| [OpenSPP Audit Config](spp_audit_config) | This module allows administrators to define and manage audit rules to track and log changes made to critical data within the OpenSPP platform, ensuring data security and integrity. |
| [OpenSPP SQL Query Eligibility Manager](spp_eligibility_sql) | Define complex program eligibility criteria using SQL queries for flexible and automated beneficiary enrollment within OpenSPP. |
| [OpenSPP Custom Fields UI](spp_custom_fields_ui) | Provides a user-friendly interface for defining and managing custom fields for registrants within the OpenSPP platform, allowing implementers to tailor data collection to program-specific needs. |
| [OpenSPP Service Point Device](spp_service_point_device) | This module allows managing terminal devices associated with each service point, tracking their model, Android version, and active status. |
| [SPP Audit Log](spp_audit_log) | Provides audit logging functionality to track data changes and user actions within OpenSPP, enhancing transparency and accountability. |
| [OpenSPP API Records](spp_api_records) | Provides RESTful API endpoints for accessing and managing OpenSPP's core data, including service points, programs, products, and entitlements. |
| [OpenSPP Programs: Compliance Criteria](spp_programs_compliance_criteria) | Manages compliance criteria within social protection programs, allowing administrators to define and enforce additional eligibility requirements beyond initial program criteria. |
| [OpenSPP Proxy Means Testing](spp_pmt) | Calculates a Proxy Means Testing (PMT) score for groups of registrants to aid in beneficiary identification and prioritization for social protection programs. |
| [OpenSPP Import Match](spp_import_match) | Enhances data imports in OpenSPP by enabling the matching of imported records with existing data to prevent duplicates and ensure data integrity. |
| [OpenSPP Base GIS](spp_base_gis) | Provides Geographical Information System (GIS) capabilities to OpenSPP, enabling visualization and interaction with geospatial data on maps, integrating with modules like Registries and Targeting & Eligibility for enhanced program management. |
| [OpenSPP Base GIS Demo](spp_base_gis_demo) | Demonstrates the GIS capabilities of the OpenSPP Base GIS module by providing practical examples and use cases with GIS views, data layers, and raster layers. |
| [OpenSPP OpenID VCI](spp_openid_vci) | Enables the issuance and management of Verifiable Credentials (VCs) within the OpenSPP platform, leveraging OpenID Connect for Verifiable Presentations (OpenID4VP) to provide secure and verifiable digital credentials for registrants. |
| [OpenSPP Event Data](spp_event_data) | Records and tracks events related to individual and group registrants, providing a chronological history of changes and actions within the OpenSPP system. |
| [OpenSPP Service Points Management](spp_service_points) | This module enables the management of service points, linking them to geographical areas, company entities, and user accounts for streamlined service delivery within OpenSPP. |
| [OpenSPP Import: DCI API](spp_import_dci_api) | Enables integration with external registries, particularly those adhering to the DCI (Digital Civil Identity) standard, for importing and synchronizing registrant data into OpenSPP. |
| [OpenSPP Base Settings](spp_base_setting) | Provides essential settings and customizations for OpenSPP implementations, including Country Office management and user interface adaptations. |
| [OpenSPP Change Request: Add Farmer](spp_change_request_add_farmer) | Provides a specialized workflow for adding new farmers to existing groups in the registry. |
| [OpenSPP Base Demo](spp_base_demo) | Provides demonstration data for the OpenSPP system, including sample registrants, programs, and products to facilitate user exploration and training. |
| [OpenSPP API: Oauth](spp_oauth) | Provides OAuth 2.0 authentication for secure access to the OpenSPP API. |
| [OpenSPP Land Record](spp_land_record) | This module enables the management and geospatial visualization of land records within OpenSPP, linking land parcels to farms, tracking ownership, and supporting land governance initiatives. |
| [OpenSPP Base](spp_base) | Provides essential configurations, UI customizations, and base functionalities for the OpenSPP system, including top-up card management and integration with other OpenSPP modules for areas, service points, programs, and custom fields. |
| [OpenSPP Manual Entitlement](spp_manual_entitlement) | Provides a mechanism for manually creating entitlements for beneficiaries within specific program cycles in OpenSPP, offering flexibility for programs with unique eligibility criteria or situations not covered by automated rules. |
| [OpenSPP Entitlement Basket](spp_entitlement_basket) | This module allows you to define baskets of goods and services that beneficiaries are entitled to receive, simplifying in-kind entitlement management within social protection programs. |
| [OpenSPP Demo](spp_demo) | Provides demonstration data and functionalities for the OpenSPP system, showcasing its capabilities in managing social protection programs and registries with pre-populated data for exploration and testing. |
| [OpenSPP Registry Group Hierarchy](spp_registry_group_hierarchy) | Introduces hierarchical relationships between groups, allowing for nested group structures within social protection programs and farmer registries. |
| [OpenSPP Event Demo](spp_event_demo) | Provides demonstration data and functionalities for the OpenSPP event tracking system, showcasing practical applications through predefined event types, data models, views, and wizards. |
| [OpenSPP API](spp_api) | Provides a framework for building and managing a RESTful API for the OpenSPP platform, including API definition, documentation, security, and logging. |
| [OpenSPP Farmer Registry Dashboard](spp_farmer_registry_dashboard) | Provides interactive dashboards and reports for visualizing data from the OpenSPP Farmer Registry, offering insights into key metrics and trends related to registered farmers. |
| [OpenSPP Registrant Tags](spp_registrant_tag) | Provides enhanced tagging capabilities for registrants in OpenSPP, allowing for better organization and management of registrant data. |
| [OpenSPP Custom Field Recompute Daily](spp_custom_field_recompute_daily) | Enables daily recomputation of specified fields to maintain data accuracy and improve performance by offloading intensive calculations. |
| [OpenSPP OpenID VCI Individual](spp_openid_vci_individual) | Enables the issuance of Verifiable Credentials (VCs) for individual registrants within the OpenSPP platform, integrating with OpenID Connect for Verifiable Presentations and Decentralized Identifiers. |
| [OpenSPP Auto-Update Entitlements](spp_auto_update_entitlements) | Automatically updates entitlement states based on their redemption status at the end of program cycles in OpenSPP. |
| [OpenSPP POS](spp_pos) | Extend Odoo POS to redeem entitlements from OpenSPP for secure and efficient beneficiary transactions. |
| [OpenSPP Change Request](spp_change_request) | Streamlines the process of handling changes to registrant information within the OpenSPP system, providing a structured framework for submitting, reviewing, approving, and applying modifications. |
| [OpenSPP Program Entitlement Basic Cash Spent](spp_basic_cash_entitlement_spent) | Tracks cash spending by beneficiaries against allocated entitlements in basic cash programs, calculating remaining balances and supporting program monitoring. |
| [OpenSPP Event Data Program Membership](spp_event_data_program_membership) | This module allows users to record and track program membership-related events, such as enrollment, suspension, or exit, and link them to specific program membership records within OpenSPP. |
| [OpenSPP ID Queue](spp_idqueue) | Manages ID card requests, approvals, batch printing, and distribution for registrants within social protection programs and farmer registries. |
| [OpenSPP: Starter](spp_starter) | No summary provided |
| [OpenSPP Area Management](spp_area) | This module enables management of geographical areas, linking them to registrants for targeted interventions and analysis in social protection programs. |
| [OpenSPP Programs: Service Points Integration](spp_programs_sp) | Extends OpenSPP Programs to integrate service points, enabling the association of beneficiaries and entitlements with designated service delivery locations for improved program efficiency and targeted benefit distribution. |
| [OpenSPP Base GIS REST](spp_base_gis_rest) | Provides RESTful API endpoints for accessing and querying geospatial data within OpenSPP, secured with OAuth 2.0. |
| [OpenSPP Consent](spp_consent) | No summary provided |
| [OpenSPP Custom Filter UI](spp_custom_filter_ui) | Customizes the OpenSPP UI to enhance filtering for Res Partners, improving usability and efficiency in managing registrants within social protection programs. |
| [OpenSPP Change Request Demo: Add Child/Member](spp_change_request_add_children_demo) | Provides a demonstration of adding children or members to an existing group in the registry using the OpenSPP Change Request framework, including a dedicated form, ID scanning integration, and automated data updates. |
| [OpenSPP Registry: Scan ID Document](spp_scan_id_document) | Enables the scanning of physical ID documents directly into a registrant's profile, streamlining data entry and improving accuracy in the OpenSPP Registry. |
| [OpenSPP Program ID](spp_program_id) | Generates and manages unique IDs for social protection programs, enhancing identification and integration within the OpenSPP platform. |
| [OpenSPP OpenID VCI Group](spp_openid_vci_group) | Enables the issuance of Verifiable Credentials (VCs) for groups of registrants, integrating with group management to represent group identity and attributes. |
| [G2P Registry: Audit Post](spp_audit_post) | Enables posting of audit log messages to related parent records, providing a centralized view of changes across interconnected data in social protection programs. |
| [OpenSPP Exclusion Filter](spp_exclusion_filter) | This module enhances the OpenSPP program creation process by enabling the configuration and application of exclusion filters, ensuring that only eligible registrants are considered for enrollment in new programs. |
| [OpenSPP Farmer Registry Base](spp_farmer_registry_base) | Base module for managing farmer registries, linking farmers to farms, land, and agricultural activities. |
| [OpenSPP Irrigation](spp_irrigation) | Provides tools for managing and visualizing irrigation infrastructure within OpenSPP, enabling efficient tracking, planning, and analysis of irrigation systems and their impact. |
| [OpenSPP Custom Fields](spp_custom_field) | Adds customizable fields to registrant profiles for enhanced data collection and program management in OpenSPP. |
| [OpenSPP Custom Filter](spp_custom_filter) | Enhances Odoo's filtering system by allowing administrators to control which fields are displayed in filter dropdowns, improving user experience and data management. |
| [ID PASS](spp_idpass) | No summary provided |
| [OpenSPP Area GIS](spp_area_gis) | Integrates GIS capabilities into OpenSPP's Area management, enabling visualization on maps, associating coordinates, defining polygons, and facilitating spatial analysis for improved targeting and monitoring of social protection programs. |
| [OpenSPP Custom Field Custom Filter Integration](spp_custom_field_custom_filter) | Allows administrators to enable custom fields for filtering, enhancing data analysis and program operations. |
| [OpenSPP Document Management System](spp_dms) | Provides a centralized system for managing and organizing documents within OpenSPP, facilitating efficient storage, retrieval, and categorization of files related to social protection programs. |
| [OpenSPP Tag Based Eligibility Manager](spp_eligibility_tags) | Define eligibility criteria for programs based on registrant tags and geographical areas, automating beneficiary identification and improving targeting accuracy. |
| [OpenSPP Entitlement Transactions](spp_ent_trans) | This module records and manages transactions related to entitlement redemptions, providing a transparent history for both cash and in-kind benefits. |
| [OpenSPP Cash Entitlement](spp_entitlement_cash) | Manage cash-based entitlements for beneficiaries within social protection programs, including defining calculation rules, automating disbursement, and tracking payments. |

## G2P Modules

| Module | Summary |
| ------ | ------- |
| [OpenG2P Entitlement: In-Kind](g2p_entitlement_in_kind) | No summary provided |
| [G2P Registry: Rest API](g2p_registry_rest_api) | No summary provided |
| [OpenG2P Program: Documents](g2p_program_documents) | No summary provided |
| [OpenG2P Programs: Reimbursement](g2p_program_reimbursement) | No summary provided |
| [OpenG2P Entitlement: Differential](g2p_entitlement_differential) | No summary provided |
| [G2P Registry: Additional Info](g2p_registry_addl_info) | No summary provided |
| [G2P OpenID VCI: Base](g2p_openid_vci) | No summary provided |
| [G2P Encryption: Rest API](g2p_encryption_rest_api) | No summary provided |
| [G2P: Proxy Means Test](g2p_proxy_means_test) | No summary provided |
| [OpenG2P Program Payment (Payment Hub EE)](g2p_payment_phee) | No summary provided |
| [OpenG2P Programs](g2p_programs) | No summary provided |
| [G2P Registry: Encryption](g2p_registry_encryption) | No summary provided |
| [G2P Connect Demo](g2p_connect_demo) | No summary provided |
| [G2P OpenID VCI: Program Beneficiaries](g2p_openid_vci_programs) | No summary provided |
| [OpenG2P Programs: Cycleless](g2p_program_cycleless) | No summary provided |
| [G2P Programs: REST API](g2p_programs_rest_api) | No summary provided |
| [G2P Encryption: Base](g2p_encryption) | No summary provided |
| [G2P Program : Program Registrant Info Rest API](g2p_program_registrant_info_rest_api) | No summary provided |
| [G2P Auth: OIDC - Reg ID](g2p_auth_id_oidc) | No summary provided |
| [OpenG2P Entitlement: Voucher](g2p_entitlement_voucher) | No summary provided |
| [G2P Registry: Individual](g2p_registry_individual) | No summary provided |
| [OpenG2P Program: Approval](g2p_program_approval) | No summary provided |
| [G2P Registry: Membership](g2p_registry_membership) | No summary provided |
| [OpenG2P Program Payment: Cash](g2p_payment_cash) | No summary provided |
| [G2P Registry: Groups](g2p_registry_group) | No summary provided |
| [G2P Registry: Rest API Extension Demo](g2p_registry_rest_api_extension_demo) | No summary provided |
| [G2P Program: Registrant Info](g2p_program_registrant_info) | No summary provided |
| [OpenG2P Program Payment (Payment Interoperability Layer)](g2p_payment_interop_layer) | No summary provided |
| [OpenG2P Program: Assessment](g2p_program_assessment) | No summary provided |
| [G2P Registry: Base](g2p_registry_base) | No summary provided |
| [OpenG2P Program Payments: In Files](g2p_payment_files) | No summary provided |
| [OpenG2P Program Payment: Simple Mpesa Payment Manager](g2p_payment_simple_mpesa) | No summary provided |
| [OpenG2P Program Payment: G2P Connect Payment Manager](g2p_payment_g2p_connect) | No summary provided |
| [OpenG2P Programs: Autoenrol](g2p_program_autoenrol) | No summary provided |
| [G2P Registry: Additional Info REST API](g2p_registry_addl_info_rest_api) | No summary provided |
| [G2P Registry: Bank Details](g2p_bank) | No summary provided |
| [G2P Registry: Bank Details Rest API](g2p_bank_rest_api) | No summary provided |
| [G2P Encryption: Keymanager](g2p_encryption_keymanager) | No summary provided |
</file>

<file path="docs/reference/modules/spp_api_records.md">
# OpenSPP API Records

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document details the **OpenSPP API Records** module within the OpenSPP platform. This module is responsible for defining and exposing API endpoints that provide access to records and data related to OpenSPP's core functionalities, including service points, programs, entitlements, and registries.

## Purpose

The **OpenSPP API Records** module aims to:

* **Expose Data via API:** Make OpenSPP's core data accessible through a well-defined RESTful API, enabling external systems and applications to interact with OpenSPP.
* **Standardize Data Exchange:** Define consistent data formats and structures for API requests and responses, ensuring interoperability with various systems.
* **Support Integration Efforts:** Facilitate the integration of OpenSPP with other systems used by governments, NGOs, and other stakeholders involved in social protection programs and farmer registries.

## Module Dependencies and Integration

1. **[spp_api](spp_api.md)**:  
    * This module builds directly upon the **[spp_api](spp_api)** module, inheriting its core API framework, security features (OAuth 2.0), and documentation generation capabilities.
    * It leverages the API namespaces, paths, and authentication mechanisms provided by [spp_api](spp_api) to define and expose its own set of API endpoints. 

2. **[spp_service_points](spp_service_points)**:
    * Integrates with the **[spp_service_points](spp_service_points)** module to expose data related to service points, their locations, operational status, and associated devices. 
    * API endpoints allow for retrieving service point details, searching for service points based on various criteria, and potentially updating service point information.

3. **[spp_programs](spp_programs)**:
    * Connects with the **[spp_programs](spp_programs)** module to make program data accessible through the API.
    * Endpoints might include retrieving program details, listing program cycles, fetching eligibility criteria, and accessing information about enrolled beneficiaries.

4. **Product (product)**: 
    * Integrates with the **Product** module to provide API access to product information, particularly relevant for programs involving the distribution of in-kind benefits. 
    * API endpoints could enable retrieving product lists, details, stock levels, and other relevant data for managing in-kind entitlements. 

5. **[g2p_programs](g2p_programs)**: 
    * Leverages the **[g2p_programs](g2p_programs)** module to access and expose data related to program entitlements, payments, and beneficiary participation.
    * API endpoints might facilitate the retrieval of entitlement details, payment histories, program participation status, and other program-related records.

6. **Contacts (contacts)**:
    * Utilizes the **Contacts** module to access and potentially expose data related to individuals and organizations involved in OpenSPP, such as program managers, service point operators, and potentially registrant contact information (with appropriate privacy considerations). 

7. **[g2p_registry_base](g2p_registry_base)**: 
    * Accesses data from the **[g2p_registry_base](g2p_registry_base)** module to potentially expose limited and anonymized registrant information through the API, strictly adhering to privacy and data protection regulations. 
    * API endpoints in this area would require robust authentication and authorization mechanisms to control access and prevent unauthorized data exposure.

## Additional Functionality

* **API Endpoints for Record Access:**
    * Defines and implements specific API endpoints to retrieve, search, and potentially modify data related to OpenSPP's core entities (service points, programs, products, entitlements, etc.).
    * Implements data validation, error handling, and appropriate response codes (e.g., 200 OK, 404 Not Found) to ensure API reliability and usability.

* **Data Serialization and Transformation:**
    * Handles the conversion of OpenSPP's internal data structures and formats into standardized representations suitable for API exchange (e.g., JSON or XML).
    * Implements any necessary data transformations or filtering to present information in a way that is meaningful and consumable by external systems.

* **API Versioning and Documentation:**
    * Adheres to best practices for API versioning, allowing for backward compatibility and controlled evolution of the API over time.
    * Leverages the documentation generation capabilities of [spp_api](spp_api) to provide comprehensive and up-to-date documentation for all exposed endpoints, including request/response formats, authentication requirements, and example usage.

## Conclusion

The **OpenSPP API Records** module plays a vital role in extending OpenSPP's reach and interoperability. By exposing core data through a well-defined and secure API, it enables seamless integration with other systems, facilitating data exchange, automating processes, and empowering external stakeholders to interact with OpenSPP in a standardized and controlled manner.
</file>

<file path="docs/reference/modules/spp_api.md">
# OpenSPP API

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_api](spp_api) module provides a comprehensive framework for building and managing a RESTful API for the OpenSPP platform. It builds upon the foundation laid by the [spp_base_api](spp_base_api) module, adding crucial components for API definition, documentation, and security. 

## Purpose

This module is designed to:

- **Define API Endpoints:** Create, configure, and manage API endpoints for accessing and manipulating data within the OpenSPP system.
- **Generate API Documentation:** Automatically generate OpenAPI (Swagger) documentation for all defined API endpoints, providing a clear and interactive interface for developers.
- **Enforce API Security:** Integrate with the [spp_oauth](spp_oauth) module to handle authentication and authorization for API requests, ensuring secure access to sensitive data.
- **Log API Interactions:** Record details of all incoming API requests and outgoing responses, facilitating debugging, monitoring, and auditing.

## Dependencies

- **[spp_base_api](spp_base_api):** This module relies on [spp_base_api](spp_base_api) for its core API interaction functions and methods.
- **web:** Leverages Odoo's web framework for routing and handling HTTP requests.
- **[spp_oauth](spp_oauth):** Integrates with the [spp_oauth](spp_oauth) module to implement OAuth 2.0-based authentication and authorization for securing API access.

## Functionality and Integration

The [spp_api](spp_api) module introduces key components for building a robust API:

**1. API Namespaces and Paths:**

- **Namespaces:**  Represent logical groupings of API endpoints, often associated with specific functionalities or versions (e.g., `v1`, `v2`).
- **Paths:** Define individual API endpoints within a namespace, specifying the HTTP method (GET, POST, PUT, DELETE, PATCH), URL path, data model, fields to expose, and any filtering or domain logic.

**2. API Documentation:**

- **OpenAPI (Swagger) Generation:** The module automatically generates OpenAPI documentation based on the defined namespaces and paths. This documentation serves as a comprehensive guide for developers, detailing available endpoints, request/response formats, and authentication requirements.

**3. API Security:**

- **OAuth 2.0 Integration:**  Seamlessly integrates with [spp_oauth](spp_oauth) to enforce authentication and authorization using OAuth 2.0 standards. API requests must include valid access tokens, obtained through the OAuth 2.0 flow. 

**4. API Logging:**

- **Detailed Logs:**  Records comprehensive logs for all API interactions, including the request method, URL, parameters, data, response status code, and response data.
- **Configurable Logging Levels:**  Allows administrators to configure the level of detail logged for requests and responses (e.g., disabled, short, full debug).

**5. Integration with Other Modules:**

- Any OpenSPP module that wants to expose data or functionalities through an API can leverage the [spp_api](spp_api) module.
- Modules define their API endpoints using namespaces and paths, ensuring consistency and automatic documentation generation.
- The [spp_api](spp_api) module handles routing, authentication, and logging for these endpoints, simplifying development and ensuring API security.

## Conclusion

The [spp_api](spp_api) module is the cornerstone for building and managing a secure and well-documented RESTful API for the OpenSPP platform. It provides a standardized framework for API development, streamlines integration with other modules, and enhances the security of OpenSPP data by leveraging OAuth 2.0 authentication.
</file>

<file path="docs/reference/modules/spp_area_gis.md">
# OpenSPP Area GIS

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

The **OpenSPP Area GIS** module extends the functionality of the [OpenSPP Area](link-to-area-module-documentation) module by integrating Geographical Information System (GIS) capabilities. This module allows users to visualize and interact with geographical areas on a map, providing a spatial dimension to area management within OpenSPP.

## Purpose

The main purpose of the **OpenSPP Area GIS** module is to:

* **Visualize Areas on a Map:** Display areas defined in the [OpenSPP Area](spp_area) module on an interactive map, providing a visual representation of their geographical extents.
* **Associate Coordinates with Areas:** Enable users to assign geographical coordinates (latitude and longitude) to individual areas, either manually or through data imports.
* **Define Area Polygons:** Allow for the creation and editing of polygon geometries that accurately represent the boundaries of areas. 
* **Integrate with OpenSPP Base GIS:** Leverage the functionality provided by the [OpenSPP Base GIS](spp_base_gis) module to display areas as data layers on maps, enabling users to overlay them with other relevant data.

## Dependencies and Integration

* **OpenSPP Area ([spp_area](spp_area)):** This module directly depends on the OpenSPP Area module, inheriting its core functionality for managing area hierarchies and information.
* **OpenSPP Base GIS ([spp_base_gis](spp_base_gis)):** The module integrates with the OpenSPP Base GIS module to utilize its GIS capabilities, such as map views, raster layers, and data layer management.

## Functionality and Features

* **Area Coordinates (spp.area):**
    * Adds two fields to the `spp.area` model:
        * **Coordinates (coordinates):** Stores the latitude and longitude coordinates of a point representing the area's location. This can be a central point or any other relevant location within the area.
        * **Area Polygon (geo_polygon):** Stores a polygon geometry representing the area's boundary.
* **Area Import with Coordinates:**
    * Extends the area import functionality to include support for importing latitude and longitude coordinates along with other area data.
    * Allows users to specify the columns containing latitude and longitude information during the import process.
* **GIS Views for Areas:**
    * Introduces GIS views for the `spp.area` model, enabling users to visualize areas on a map.
    * Utilizes the [OpenSPP Base GIS](spp_base_gis) module to configure data layers that represent areas as points (based on coordinates) and polygons (based on area polygons).
    * Allows users to customize the appearance of area data layers on the map, such as colors, opacity, and labels.
* **Integration with Other Data Layers:**
    * Enables users to overlay area data layers with other relevant data layers, such as beneficiary locations, program intervention zones, or environmental data.
    * Facilitates spatial analysis by allowing users to visualize and analyze the relationships between areas and other geospatial data.

## Benefits

* **Improved Visualization:** Provides a clear and intuitive way to visualize area hierarchies and boundaries on a map, enhancing understanding of geographical coverage.
* **Enhanced Targeting and Analysis:** Enables location-based targeting by visualizing the spatial distribution of areas in relation to beneficiary locations or other relevant factors.
* **Improved Data Management:** Allows for more precise and efficient management of area data by integrating geographical coordinates and polygons.
* **Enhanced Monitoring and Evaluation:** Facilitates spatial analysis for monitoring and evaluation purposes, allowing users to assess program coverage, identify gaps and overlaps, and track progress over time.

## Example Use Cases

* **Visualizing Administrative Boundaries:**  Displaying a hierarchy of administrative areas, such as provinces, districts, and villages, on a map to understand their geographical distribution.
* **Targeting Interventions:**  Overlapping area boundaries with beneficiary locations to identify areas with high concentrations of target populations for program interventions.
* **Monitoring Program Coverage:** Visualizing the spatial extent of program implementation areas in relation to target areas to assess coverage and identify gaps.

## Conclusion

The OpenSPP Area GIS module empowers OpenSPP with valuable GIS capabilities for managing and visualizing geographical areas. This integration of spatial data enhances the platform's ability to support effective and efficient program planning, implementation, monitoring, and evaluation for social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_area.md">
# OpenSPP Area

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Area** module, which extends the OpenSPP framework by providing features to manage and organize geographical areas within the system.  It integrates with the core registry modules to allow associating registrants and other data with specific locations. 

## Purpose

The **OpenSPP Area** module is designed to:

* **Define and Structure Geographical Areas**: Establish a hierarchical structure for representing administrative regions, from the highest level (e.g., country) down to the most granular level (e.g., village).
* **Manage Area Information**: Store key details about each area, including its name, code, alternate names, geographical size, and parent-child relationships within the hierarchy.
* **Associate Registrants with Areas**:  Enable the linking of individual and group registrants to specific areas, facilitating location-based targeting, analysis, and program implementation. 

## Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**:  The Area module utilizes the **Districts (g2p.district)** feature from the **G2P Registry: Base** module as a foundation. It extends this concept to create a more comprehensive and flexible system for managing area data.

2. **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**: Integrates with the Individual module by adding a dedicated "Area" field to the individual registrant form. This field allows users to assign a specific area to each individual, linking registrant data to geographical locations.

3. **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**:  Similar to the Individual module integration, this module incorporates an "Area" field into the group registrant form, enabling the association of groups with specific areas.

4. **Queue Job ([queue_job](queue_job))**:  Leverages the **Queue Job** module for background processing of large data imports, improving performance and user experience. This is particularly beneficial when importing extensive area hierarchies from external sources. 

## Additional Functionality

* **Hierarchical Area Structure ([spp.area](spp.area))**: 
    * Introduces a dedicated model for managing areas, allowing for the creation of multi-level administrative boundaries with parent-child relationships.
    * Computes and displays the complete area path (e.g., "Country > Province > District > Village") to provide clear context within the hierarchy.
    * Enforces unique codes for each area to ensure proper identification and prevent duplicates.

* **Area Types ([spp.area.kind](spp.area.kind))**:
    * Includes a model for defining and managing different types of areas (e.g., administrative regions, ecological zones, project implementation areas).
    * Allows for the creation of a hierarchy of area types, providing further categorization and flexibility.

* **Area Import Functionality**:
    * Provides tools for importing area data in bulk from Excel files, streamlining the process of populating the area hierarchy.
    * Implements validation rules during the import process to ensure data integrity, such as checking for required fields, data types, and hierarchical consistency.
    * Utilizes the Queue Job module to perform data validation and import operations in the background, preventing performance issues and providing a smoother user experience.
    * Ability to localize the name of the imported area.

## Conclusion

The **OpenSPP Area** module enhances the OpenSPP platform by providing a robust and flexible system for managing geographical areas and linking them to registrant data. Its integration with the core registry modules ensures that location information is seamlessly incorporated into the overall system, supporting location-based targeting, analysis, and program management for social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_audit_config.md">
# OpenSPP Audit Config

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP Audit Config** module within the OpenSPP platform. This module is responsible for configuring and managing audit rules used to track and log changes made to critical data within the system.

## Purpose

The primary purpose of the **OpenSPP Audit Config** module is to:

* **Define Audit Rules:** Establish specific rules that determine which data models, fields, and actions (create, update, delete) should be monitored and logged.
* **Enhance Data Security:** Provide an auditable trail of changes made to sensitive information, ensuring accountability and enabling investigations into unauthorized modifications.
* **Improve Data Integrity:**  By logging changes, the module helps identify potential data inconsistencies or errors introduced during data entry or updates.

## Module Integration and Dependencies

The **OpenSPP Audit Config** module works in conjunction with other modules to provide comprehensive audit logging:

* **[SPP Audit Log](spp_audit_log)**: This module is responsible for storing the actual audit logs generated based on the configured rules. The Audit Config module defines **what** to log, and the Audit Log module handles **how** it is logged and stored.
* **[SPP Audit Post](spp_audit_post)**: The Audit Post module provides the mechanisms for reviewing and managing the generated audit logs. It offers interfaces to view, filter, and analyze the log data.

**Integration with Other Modules:**

The **OpenSPP Audit Config** module's functionality is designed to be applied across various OpenSPP modules.  It can define audit rules for any module that requires change tracking, such as:

* **[SPP Service Points](spp_service_points)**: Track changes to service point information, including location, contact details, and operational status.
* **[G2P Registry: Membership](g2p_registry_membership)**: Monitor modifications to individual memberships within groups, ensuring accurate representation of group composition.
* **[OpenSPP Programs](spp_programs)**: Log any updates to program configurations, eligibility criteria, or benefit distribution details.

## Additional Functionality

1. **Audit Rule Definition:** 
   *  Provides a user-friendly interface to define audit rules. 
   * **Key configuration options include:**
      * **Model:** Specify the data model to be audited (e.g., `spp.service.point`, `g2p.group.membership`).
      * **Fields:** Select the specific fields within the model that require logging (e.g., `name`, `status`, `start_date`).
      * **Actions:**  Choose which actions should trigger a log entry:
         * **Create:** Log the creation of new records.
         * **Write:** Log any modifications made to existing records.
         * **Unlink:** Log the deletion of records.
   * **Advanced Rule Configuration:** The module supports defining hierarchical audit rules:
      * **Parent-Child Relationships:**  Link audit rules to create a parent-child hierarchy. This allows for more granular logging, capturing changes to related records. For example, if a service point is linked to a program, any changes to the service point can trigger logs for both the service point itself and the associated program.
      * **Connecting Fields:** When defining hierarchical rules, the module lets you specify the field that connects the parent and child records.

2. **Predefined Audit Rules:**
   * The module includes a set of predefined audit rules for common data models and fields within the OpenSPP system. These rules provide a starting point for implementing audit logging and can be customized further based on specific needs.

3. **Data/audit_rule_data.xml:** 
    * This file contains predefined audit rules that are loaded during the module installation. This ensures essential auditing is in place from the start.

## Conclusion

The **OpenSPP Audit Config** module plays a crucial role in enhancing data security and integrity within the OpenSPP platform. By enabling the configuration of flexible and comprehensive audit rules, the module provides administrators with the tools to track changes, ensure accountability, and maintain the reliability of critical data across various OpenSPP modules.
</file>

<file path="docs/reference/modules/spp_audit_log.md">
# OpenSPP Audit Log

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module provides audit logging functionality for OpenSPP, enabling the tracking of changes made to specific data within the system. It helps maintain data integrity, accountability, and provides a historical record of modifications.

## Purpose

The **SPP Audit Log** module is designed to:

* **Record Data Changes:** Automatically log changes made to specified fields within selected models.
* **Track User Actions:**  Identify the user responsible for each data modification.
* **Provide an Audit Trail:**  Maintain a chronological log of changes, including old and new values, for review and analysis.

## Module Dependencies and Integration

1. **Base (base)**:  The module relies on Odoo's core features for models, views, security groups, and user management.

2. **Mail (mail):** Leverages the messaging functionality for potential future enhancements related to audit log notifications. 

3. **G2P Registry: Membership ([g2p_registry_membership](g2p_registry_membership)):** This dependency appears to be related to a specific use case and might not be a core dependency for the audit log functionality.  It could indicate that the audit log is being used to track changes within the group membership model.

## Additional Functionality

The module introduces the following key elements:

* **Audit Rule Model ([spp.audit.rule](spp.audit.rule)):**
    * Allows administrators to define rules specifying which models and fields should have their changes logged.
    * Provides options to log the creation, update, or deletion of records.
    * Includes a feature to automatically add a "View Logs" button to the related model's form view for easy access to audit logs. 

* **Audit Log Model ([spp.audit.log](spp.audit.log)):**
    * Stores the audit log entries, capturing details like timestamp, user, model, record ID, type of operation (create/write/unlink), and the changes made (old and new values).
    * Provides a computed field to display the changed data in a user-friendly HTML format within the audit log form view. 

* **Audit Decorator:** 
    * Utilizes a decorator function to automatically intercept and log changes made to models and fields defined by the audit rules. This simplifies the implementation and ensures that auditing is applied consistently. 

* **Security Groups:**
    * Introduces a new security group, "Manager," to manage access to audit log rules and logs, restricting sensitive information from unauthorized users.

* **User Interface:**
    * Adds menu items for managing audit rules and viewing audit logs, providing centralized access points within the OpenSPP interface. 

## Conclusion

The **SPP Audit Log** module enhances the accountability and transparency of the OpenSPP platform. By meticulously tracking data changes and user actions, it provides administrators with a valuable tool for auditing, troubleshooting, and maintaining data integrity. The module's flexible rule system and tight integration with core Odoo features make it adaptable to a variety of data tracking requirements within the OpenSPP ecosystem.
</file>

<file path="docs/reference/modules/spp_audit_post.md">
# OpenSPP Audit Post

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **G2P Registry: Audit Post** module within the OpenSPP platform. This module extends the functionality of the audit log by enabling the posting of audit log messages to related parent records.

## Purpose

The module's primary goal is to provide a comprehensive overview of changes not just within a single record, but also across related records in a parent-child relationship. By posting audit log information to parent records, it offers a centralized view of how modifications cascade through interconnected data.

## Module Integration and Dependencies

* **[spp_audit_log](spp_audit_log)**: This module directly depends on the audit log module. It leverages the existing audit log framework to capture and display change information. 
* **Mail (mail)**: The module utilizes the standard Odoo Mail module to post audit log messages as messages on parent records. This integration ensures that relevant stakeholders are notified about changes impacting related data.

## Additional Functionality

1. **Parent-Child Rule Association**:
    * Allows users to define parent-child relationships between audit rules. 
    * When an audit rule has a parent rule, changes logged by the child rule are also posted to the parent record.

2. **Field-Level Linking**:
    * Enables users to specify the relational field that connects the child model to the parent model within the audit rule configuration.
    * Ensures that the audit log messages are posted to the correct parent records based on the defined relationship.

3. **Enhanced Audit Log Model ([spp.audit.log](spp.audit.log))**:
    * Introduces new fields to store information about the parent record:
        * **parent_model_id:** Stores the model ID of the parent record.
        * **parent_res_ids_str:** Stores a comma-separated string of IDs representing the parent records.
        * **parent_data_html:**  Provides a formatted HTML representation of the changes made to the child record, intended for display on the parent record's message thread.

4. **Automated Message Posting**:
    * When a change is audited and a parent rule is defined, the module automatically generates a message on the parent record's message thread.
    * The message includes detailed information about the change, including the model, field, old value, and new value, presented in a user-friendly HTML format.

## Conclusion

The **G2P Registry: Audit Post** module enhances data transparency and traceability within OpenSPP by extending audit logging to encompass related records. This functionality provides valuable insights into how modifications propagate through the system, facilitating better data management and analysis. This is particularly beneficial in complex data structures where understanding the impact of changes across related records is crucial.
</file>

<file path="docs/reference/modules/spp_auto_update_entitlements.md">
# OpenSPP Auto-Update Entitlements

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Auto-Update Entitlements** module within the OpenSPP platform. This module enhances the management of entitlement lifecycles by automatically updating entitlement states when program cycles end. This automation streamlines benefit administration and provides a more accurate view of benefit utilization.

## Purpose

The **OpenSPP Auto-Update Entitlements** module primarily focuses on:

* **Automating Entitlement State Transitions**: Automatically updates the status of entitlements at the end of a program cycle based on their redemption status.
* **Improving Data Accuracy**: Provides a more accurate reflection of entitlement utilization by automatically transitioning entitlements to appropriate states (e.g., "Partially Redeemed/Paid to Beneficiary", "Redeemed/Paid to Beneficiary"). 
* **Reducing Manual Effort**: Eliminates the need for manual updates of entitlement states, freeing up program administrators to focus on other tasks.

## Module Dependencies and Integration

1. **[OpenSPP Entitlement Transactions](spp_ent_trans)**: 
    * Heavily relies on this module to access transaction histories associated with entitlements.
    * Uses transaction data to determine the redemption status of entitlements and trigger appropriate state updates.

2. **[g2p_programs](g2p_programs)**: 
    * Integrates with the core program management module to access program cycle data. 
    * Leverages cycle end dates to initiate the automatic update process for entitlements associated with the ending cycle.

3. **[OpenSPP Programs](spp_programs)**: 
    * Builds upon the OpenSPP Programs module's functionality for managing both cash and in-kind entitlements.
    * Extends entitlement models and views to accommodate the automatic state update logic.

## Additional Functionality

* **Cycle End State Check**:  When a program cycle is marked as ended, the module automatically analyzes the transaction history of each associated entitlement.

* **Entitlement State Logic**:  Based on transaction data, the module applies the following logic to update entitlement states:
    * **Partially Redeemed/Paid to Beneficiary**: If an entitlement has transactions but still has a remaining balance, its state changes to "Partially Redeemed/Paid to Beneficiary".
    * **Redeemed/Paid to Beneficiary**: If an entitlement has been fully redeemed with no remaining balance, its state transitions to "Redeemed/Paid to Beneficiary".
    * **Unredeemed**: If an entitlement has no associated transactions, its state remains unchanged. 

* **UI Enhancements**:
    * Modifies the cycle view to automatically mark a cycle as expired when its end date is in the past.
    * Extends entitlement views to display the calculated `entitlement_balance` based on the associated transaction history.

## Conclusion

The **OpenSPP Auto-Update Entitlements** module improves the accuracy and efficiency of entitlement management in OpenSPP. By automating state transitions based on actual benefit utilization, it provides program administrators with a more reliable view of program operations while reducing manual administrative tasks.
</file>

<file path="docs/reference/modules/spp_base_api.md">
# OpenSPP Base API

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_base_api](spp_base_api) module provides foundational API functions and methods for interacting with the OpenSPP system. It acts as a bridge between the core OpenSPP functionalities and external systems, enabling data exchange via APIs or XML-RPC. This module does not introduce any user-facing features but serves as a building block for other modules that require API access to OpenSPP data.

## Purpose

The main purpose of this module is to:

- Establish a standardized way to access and manipulate OpenSPP data externally.
- Provide a consistent and reusable API framework for other OpenSPP modules.
- Enable seamless integration with external applications and systems.

## Functionality

The [spp_base_api](spp_base_api) module introduces several key functions and methods to the Odoo models, extending their capabilities for API interaction:

- **search_or_create**:  Searches for a record based on given values. If no match is found, it creates a new record with the provided values.
- **search_read_nested**:  Performs a nested search across related models and returns a list of dictionaries representing the results. This allows retrieving data from multiple linked models in a single API call.
- **create_or_update_by_external_id**: Creates or updates records based on an external ID. This is crucial for synchronizing data with external systems that rely on unique identifiers.

## Integration with other modules

The [spp_base_api](spp_base_api) module is designed to be a dependency for other modules that need API access. For instance, a hypothetical module [spp_external_integration](spp_external_integration) could depend on [spp_base_api](spp_base_api) module is designed to be a dependency for other modules that need API access. For instance, a hypothetical module `spp_external_integration` could depend on `spp_base_api` and utilize its functions to:

1. Fetch data from OpenSPP through defined API endpoints.
2. Create or update records in OpenSPP based on data received from external systems.
3. Ensure data consistency between OpenSPP and other integrated applications.

By providing these base functionalities, the [spp_base_api](spp_base_api) module streamlines the development of other OpenSPP modules that interact with external systems and APIs.
</file>

<file path="docs/reference/modules/spp_base_demo.md">
# OpenSPP Base Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module provides demonstration data for the OpenSPP system. It populates the database with sample records for various entities, allowing users to explore the system's functionalities with pre-populated data.

## Purpose

The primary purpose of the **[spp_base_demo](spp_base_demo)** module is to:

* **Provide realistic sample data:**  Offers a pre-configured dataset that mimics real-world scenarios, enabling users to interact with the system as if it were managing actual social protection programs and registries.
* **Facilitate user training and exploration:** Allows new users to familiarize themselves with the system's interface, data structures, and workflows without having to manually create large amounts of test data.
* **Showcase system capabilities:** Demonstrates the potential of OpenSPP by illustrating how different modules interact and how data flows through the system.

## Module Dependencies and Integration

* **[g2p_registry_base](g2p_registry_base)** (G2P Registry: Base):  Utilizes the base registry module to populate the system with sample registrant data, including individuals and potentially groups.
* **[g2p_programs](g2p_programs)** (G2P Programs):  Leverages the programs module to create demo programs, define eligibility criteria, and potentially simulate program cycles and beneficiary enrollment.
* **[product](product)** (Products): Utilizes the product module to create sample products, potentially representing goods or services distributed through social protection programs. 
* **[stock](stock)** (Inventory):  May potentially integrate with the inventory module to manage and track the stock levels of goods related to program benefits.

## Additional Functionality and Data Examples

The **[spp_base_demo](spp_base_demo)** module includes data files that populate the database with sample records for various entities. Here are some examples:

* **Users Data (data/users_data.xml):**  Creates demo user accounts with different roles and permissions, allowing users to explore the system from various perspectives.
* **Gender Data (data/gender_data.xml):** Defines common gender options used for registrant demographic information. 
* **Product Data (data/product_data.xml):**  Creates sample product records, potentially categorized by type, to represent goods distributed through programs.

## Conclusion

The **[spp_base_demo](spp_base_demo)** module serves as a valuable tool for users, implementers, and trainers to understand and explore the OpenSPP platform's capabilities. By providing realistic demo data, the module accelerates the learning curve and allows users to experience the system's full potential firsthand.
</file>

<file path="docs/reference/modules/spp_base_gis_demo.md">
# OpenSPP Base Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module serves as a demonstration of the GIS capabilities provided by the [OpenSPP Base GIS](OpenSPP Base GIS)(./openspp-base-gis) module. It extends the functionality of the base module by adding practical examples and use cases. 

## Purpose

The [spp_base_gis_demo](spp_base_gis_demo) module aims to:

- Showcase how to integrate GIS features into existing OpenSPP models.
- Provide concrete examples of using GIS views, data layers, and raster layers.
- Offer a starting point for developers to build upon and customize for specific project needs.

## Integration with Other Modules

This module directly interacts with:

- **[spp_base_gis](spp_base_gis)**: It utilizes the core GIS functionality provided by this module, such as GIS views, data layers, and raster layers.
- **contacts**: It extends the `res.partner` model from the `contacts` module to include geographic fields, demonstrating how to add GIS capabilities to existing models. 

## Additional Functionality

The [spp_base_gis_demo](spp_base_gis_demo) module offers:

- **Extended Partner Model:**  The `res.partner` model is enhanced with the following fields:
    - `geo_point`:  Stores the geographic coordinates of a partner as a point.
    - `geo_line`: Stores the geographic coordinates of a partner as a line.
    - `geo_polygon_field`: Stores the geographic coordinates of a partner as a polygon.

- **GIS Views:**  The module defines GIS views for the `res.partner` model, allowing users to visualize partners on a map based on their geographic information. This includes:
    - Point visualization for `geo_point`.
    - Line visualization for `geo_line`.
    - Polygon visualization for `geo_polygon_field`.

- **Data and Raster Layers:** The module configures data layers to represent partners on the map using different geometric representations. It also sets up a raster layer to provide a background map for context.

## Example

The module demonstrates how to visualize the location of a partner (e.g., a beneficiary or a farmer) on a map.  Users can view and interact with the partner data in a geospatial context, gaining insights into their distribution and spatial relationships.

## Conclusion

The [spp_base_gis_demo](spp_base_gis_demo) module serves as a practical guide for implementing GIS features within the OpenSPP ecosystem. It provides tangible examples and building blocks for developers to leverage the power of geospatial data in social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_base_gis_rest.md">
# OpenSPP Base GIS REST

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the [spp_base_gis](spp_base_gis) by providing RESTful API endpoints for accessing and querying geospatial data. It depends on the following modules:

- **[spp_base_gis](spp_base_gis):**  Provides the core GIS functionalities and data models.
- **[spp_oauth](spp_oauth):**  Enables secure authentication and authorization for API requests using OAuth 2.0.

## Functionality

The `spp_base_gis_rest` module offers a set of RESTful API endpoints that allow external applications and services to:

- **Authenticate and Obtain Access Tokens:**  Utilizes the [spp_oauth](spp_oauth) module to implement OAuth 2.0 flows for secure authentication and token generation.
- **Perform Locational Queries:**  Enables querying geospatial data based on location coordinates (latitude and longitude), layer type (point, line, polygon), and spatial relationships (intersects, within, contains). 
- **Execute Attribute Queries:**  Allows filtering data based on attribute values using operators such as equals, not equals, greater than, etc. 
- **Retrieve Feature Data:** Returns geospatial data in standard formats like GeoJSON, suitable for consumption by GIS clients or other applications.

## Integration with Other Modules

The `spp_base_gis_rest` module seamlessly integrates with:

- **OpenSPP Base GIS:**  It directly leverages the GIS functionalities and data models provided by this module to process queries and return geospatial information.
- **OpenSPP API: Oauth Module:**  It relies on the [spp_oauth](spp_oauth) module for handling API authentication, ensuring that only authorized clients can access the GIS data.

## API Endpoints

The module exposes the following key API endpoints:

- `/v1/gisBB/oauth2/client/token`:  Used by clients to obtain access tokens through OAuth 2.0 flows.
- `/v1/gisBB/query/locationalQuery`:  Performs locational queries based on coordinates and spatial relationships.
- `/v1/gisBB/query/attributeQuery`:  Executes attribute-based queries to filter data. 

## Security

The module inherits its security model from the [spp_oauth](spp_oauth) module. All API endpoints are protected and require valid access tokens for authorization. This ensures that only authorized clients and applications can access and query the geospatial data.

## Conclusion

The `spp_base_gis_rest` module enhances the OpenSPP Base GIS module by providing a secure and standardized way to access and query geospatial data through RESTful API endpoints. This empowers external applications, services, and GIS clients to integrate with OpenSPP and leverage its geospatial capabilities.
</file>

<file path="docs/reference/modules/spp_base_gis.md">
# OpenSPP Base GIS

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The OpenSPP Base GIS module enhances the functionality of OpenSPP by adding Geographical Information System (GIS) capabilities. It provides the foundation for visualizing and interacting with geospatial data within the OpenSPP platform. This module depends on the following Odoo modules:

- **contacts:**  Used to manage contact information.
- **web:** Provides the core web framework for building user interfaces.

## Functionality

The Base GIS module introduces several key features:

- **GIS Views:**  Allows the creation of specialized views within OpenSPP models to display geospatial data on interactive maps. These views are defined using the "gis" type in the view definition.

- **Raster Layers:**  Supports the integration of background maps from various sources, including:
    - Distant Web Map Service (WMS)
    - OpenStreetMap
    - Static images

- **Data Layers:**  Enables the visualization of data from OpenSPP models directly on the map. Users can configure:
    - The geometric representation of data (e.g., points, lines, polygons)
    - The field containing the geographic data
    - Styling options such as colors and opacity

- **Spatial Queries:** Provides tools for performing spatial queries to filter data based on geographic relationships such as intersection and distance.

## Integration

The Base GIS module seamlessly integrates with other OpenSPP modules by extending the core functionality with geospatial awareness. For instance:

- **[Registries](Registries)**  The module allows for visualizing registry data on a map. This could include plotting the locations of farmers, beneficiaries, or other entities managed within a registry.
- **[Targeting and Eligibility](Targeting and Eligibility)** GIS data can be incorporated into targeting and eligibility rules. For example, a program might define eligibility based on a beneficiary's location within a specific geographical area.
- **[Monitoring and Evaluation](Monitoring and Evaluation)**  The module facilitates spatial analysis for monitoring and evaluation purposes. Program implementers can visualize program coverage, identify geographic areas with high or low program participation, and track progress over time.

## Configuration

The Base GIS module can be configured through:

- **GIS Views:** Defining GIS views for specific models to control how geospatial data is displayed.
- **Raster Layers:** Adding and configuring background maps from different sources.
- **Data Layers:** Setting up data layers to visualize model data on the map with customized styles.

## Example Use Case

Consider a social protection program where beneficiaries are registered along with their geolocation data. The Base GIS module can be used to:

1.  Create a GIS view for the beneficiary model to display their locations on a map.
2.  Overlay data layers representing program intervention areas to visualize program coverage.
3.  Perform spatial queries to identify beneficiaries residing within or outside specific zones.

This information can be used for program planning, targeting, monitoring, and evaluation.

## Conclusion

The OpenSPP Base GIS module empowers OpenSPP with powerful geospatial capabilities, enabling users to visualize, analyze, and interact with data in new and insightful ways. This strengthens the platform's ability to support effective and efficient social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_base_setting.md">
# OpenSPP Base Settings

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality and purpose of the **OpenSPP Base Settings** module within the OpenSPP ecosystem. This module builds upon the foundational [g2p_registry_base](g2p_registry_base) module to provide essential configuration options for OpenSPP deployments.

## Purpose

The **OpenSPP Base Settings** module aims to:

* **Customize the Odoo interface for OpenSPP:**  Adapts existing Odoo views and menus to align with OpenSPP terminology and workflows.
* **Centralize OpenSPP-specific configurations:**  Provides a dedicated location for managing settings relevant to OpenSPP implementations.

## Module Dependencies and Integration

1. [g2p_registry_base](g2p_registry_base): This module inherits the core registry functionalities provided by the **G2P Registry: Base** module, including managing registrants, relationships, and identification.

2. **Base (base):** Leverages the core Odoo [Base](Base) module for data models, views, and basic functionalities.

## Additional Functionality

The **OpenSPP Base Settings** module introduces:

* **Country Office Management:**  Repurposes the Odoo Company model (`res.company`) to represent Country Offices, providing a centralized view of information related to each office.
* **User Interface Adaptations:**
    * Modifies the `res.company` form view to better reflect the concept of a Country Office.
    * Adds a dedicated menu item for managing Country Offices. 
    * Integrates User and Group management within the OpenSPP configuration menu structure. 

## Key Concepts 

* **Country Offices:** The module redefines the standard Odoo "Company" as a "Country Office," reflecting the organizational structure common in OpenSPP deployments. This allows administrators to manage settings and data specific to each country office.

## Conclusion

The **OpenSPP Base Settings** module provides the necessary configurations and customizations to tailor the Odoo environment for OpenSPP implementations. By building upon existing modules and adapting core functionalities, it streamlines the setup and management of OpenSPP deployments.
</file>

<file path="docs/reference/modules/spp_base.md">
# OpenSPP Base 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Base** module, the core module for the OpenSPP system. It builds upon existing G2P Registry modules, providing essential customizations and configurations for OpenSPP's specialized functionalities.

## Purpose

The **OpenSPP Base** module serves as the foundation for other OpenSPP modules, offering:

- **Centralized configurations**:  Provides essential settings and options that apply across the entire OpenSPP system.
- **UI modifications**: Customizes the user interface (UI) to align with OpenSPP's look and feel, enhancing user experience. 
- **Extension points**:  Acts as a base for other modules to inherit and extend functionalities specific to OpenSPP requirements.

## Module Dependencies and Integration

The **OpenSPP Base** module depends on several other modules, integrating their features and extending them for OpenSPP:

- [spp_idqueue](spp_idqueue) : Leverages this module for managing ID card printing requests and workflows.
- [spp_service_points](spp_service_points): Utilizes this module to manage service points and their association with areas, companies, and users. 
- [spp_custom_fields_ui](spp_custom_fields_ui): Depends on this module for a user-friendly interface to manage custom fields for registrants.
- [g2p_registry_membership](g2p_registry_membership):  Integrates with this module to manage memberships between individual registrants and groups.
- [spp_custom_field](spp_custom_field): Extends this module's functionality to add and manage custom fields for registrants, enhancing data collection capabilities.
- [spp_programs](spp_programs):  Integrates with this module for managing both cash and in-kind programs and entitlements. 
- [spp_area](spp_area): Utilizes this module to manage geographical areas and link them to registrants and other relevant data.
- [g2p_registry_base](g2p_registry_base): Inherits core registry functionalities from this module, including registrant management, IDs, relationships, and districts. 
- [g2p_registry_group](g2p_registry_group): Integrates with this module to manage groups of registrants, extending the concept of registrants beyond individuals.
- [utm](utm): Leverages this module for tracking and managing UTM (Urchin Tracking Module) parameters, commonly used in digital marketing campaigns.
- [g2p_registry_individual](g2p_registry_individual): Integrates with this module to manage individual registrant data, including specific attributes and validations.

## Additional Functionality

The **OpenSPP Base** module introduces the following key functionalities:

- **Top-up Card ID Type**: Adds a new ID type specifically for managing "Top-up Cards", including a dedicated field (`card_uid`) for storing the unique 10-character UID of each card.
- **Registrant View Enhancements**: Modifies the registrant views (both individual and group) to include the `card_uid` field, making it accessible for data entry and display.
- **Menu Icon Customization**:  Replaces the default icon for the "Registry" menu item with a custom OpenSPP icon, enhancing visual branding. 
- **Menu Item Hiding**:  Hides specific menu items related to "Link Tracker" and "Discuss" to streamline the OpenSPP user interface and focus on relevant functionalities. 

## Conclusion

The **OpenSPP Base** module acts as the backbone of the OpenSPP system, integrating and extending the functionalities of its dependencies to create a cohesive and tailored platform. Its role in providing central configurations, UI modifications, and extension points makes it essential for the proper functioning and customization of OpenSPP's specialized features.
</file>

<file path="docs/reference/modules/spp_basic_cash_entitlement_spent.md">
# OpenSPP Program Entitlement Basic Cash Spent 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document details the **SPP Program Entitlement Basic Cash Spent** module within the OpenSPP platform. This module extends the functionality of the [g2p_programs](g2p_programs) module to specifically handle the tracking of cash spent for basic cash entitlement programs.

## Purpose

The **SPP Program Entitlement Basic Cash Spent** module provides a straightforward mechanism for:

* **Tracking Cash Spending**: Allows program administrators to record the amount of cash spent by beneficiaries against their allocated entitlements.
* **Calculating Remaining Balances**: Automatically calculates the remaining balance for each entitlement based on the initial amount and the recorded spending.
* **Monitoring Entitlement Utilization**: Facilitates the monitoring of how beneficiaries are utilizing their allocated cash benefits.

## Module Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**: Inherits core registry functionality for managing beneficiary information.
2. **[g2p_programs](g2p_programs)**:
    * Extends the **Entitlement (g2p.entitlement)** model to include cash spending tracking.
    * Leverages program and cycle structures for organizing and managing entitlements. 

## Additional Functionality

* **Spent Amount Tracking**: Introduces a new field, `spent_amount`, within the **Entitlement (g2p.entitlement)** model to record the amount of cash spent by the beneficiary.
* **Automatic Balance Calculation**: Automatically computes the remaining balance (`balance`) for each entitlement by subtracting the `spent_amount` from the `initial_amount`.
* **Currency Support**: Utilizes the existing `currency_id` field from the **Entitlement** model to ensure accurate tracking of spending in the appropriate currency. 

## Integration with Other Modules

This module seamlessly integrates with the [g2p_programs](g2p_programs) module by directly extending the **Entitlement** model. This integration allows for:

* **Centralized Entitlement Management**:  Cash spending information is directly associated with the corresponding entitlement record within the program cycle. 
* **Streamlined Reporting**: Enables the generation of reports that combine entitlement data (initial amount, validity period) with spending information (spent amount, balance).
* **Enhanced Monitoring and Evaluation**: Provides program administrators with a comprehensive view of entitlement utilization, supporting better decision-making and program adjustments. 

## Conclusion

The **SPP Program Entitlement Basic Cash Spent** module offers a simple yet effective solution for tracking cash spending within basic cash entitlement programs. By extending the core functionality of the [g2p_programs](g2p_programs) module, it ensures seamless integration and enhances the overall management and monitoring of program benefits.
</file>

<file path="docs/reference/modules/spp_change_request_add_children_demo.md">
# OpenSPP Change Request Demo: Add Child/Member

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The OpenSPP Change Request Demo: Add Child/Member (`spp_change_request_add_children_demo`) module is a demonstration module built on top of the [spp_change_request](spp_change_request) module. This module provides a specific implementation of the change request process, focusing on adding children or new members to an existing group within the registry. This documentation highlights the specific features and functionality of this demo module.

## Purpose

The primary purpose of this module is to showcase a practical implementation of the OpenSPP Change Request framework. It demonstrates how to:

- Create a new change request type specifically for adding children or members to a group.
- Define a tailored form for capturing the necessary information for this type of change.
- Integrate with the ID scanning feature for potential verification of identity.
- Implement data validation rules specific to adding new members.
- Update the registry data upon successful validation and approval of the request.

## Module Dependencies and Integration

The `spp_change_request_add_children_demo` module depends on the following modules:

1. **OpenSPP Change Request ([spp_change_request](spp_change_request))**: This module provides the foundational structure for managing change requests, including workflows, approvals, and data validation. The demo module leverages this existing framework to handle the addition of new members. 

2. **G2P Registry Modules**:  The demo module integrates with various G2P Registry modules to access and update registrant information:
    - **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**:  Inherits core registrant features and extends them for the specific requirements of the 'Add Children' request.
    - **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**:  Utilizes this module to create new individual registrant records for the children or members being added.
    - **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**:  Accesses and updates group registrant information, specifically to add new members to the group.
    - **G2P Registry: Membership ([g2p_registry_membership](g2p_registry_membership))**:  Creates new membership records to establish the relationship between the added individuals and the target group.

3. **[spp_service_points](spp_service_points)**: This module allows for associating change requests, including those for adding children, with specific service points from which they originate.

4. **[phone_validation](phone_validation)**: Ensures that any phone numbers entered during the change request process adhere to valid formats.

## Additional Functionality

- **Dedicated Change Request Type**: The module introduces a new change request type specifically for "Add Children," accessible through a dedicated menu option.
- **Custom Change Request Form**:  A specialized form is implemented to capture information relevant to adding children or members, including their personal details, relationship to the applicant, and supporting documentation.
- **ID Scanner Integration**: The module includes integration with the ID scanning feature, allowing users to scan supporting documents (e.g., birth certificates, IDs) directly into the change request as attachments. 
- **Data Validation**:  Specific validation rules are implemented to ensure the entered data meets the requirements for adding new members. For instance, the module checks for unique identification numbers and valid birthdates. 
- **Automatic Data Update**:  Upon approval of an "Add Children" change request, the module automatically:
    - Creates new individual registrant records for the added children.
    - Establishes membership records to link these individuals to the designated group.

## Example Usage

1. A registrant approaches a service point to add their child to their registered household group.
2. The service point agent initiates an "Add Child/Member" change request through the dedicated menu.
3. The agent fills out the form with the child's information, potentially scanning supporting documents.
4. The change request goes through the defined approval workflow (as configured in the [spp_change_request](spp_change_request) module).
5. Once approved, the module automatically creates a new individual registrant record for the child and adds them as a member to the parent's household group.

## Conclusion

The OpenSPP Change Request Demo: Add Child/Member module serves as a practical example of implementing the change request framework within OpenSPP for a specific use case.  By integrating with various core modules and showcasing features like ID scanning and automatic data updates, it provides a blueprint for developing similar modules for other common change request scenarios.
</file>

<file path="docs/reference/modules/spp_change_request_add_farmer.md">
# OpenSPP Change Request: Add Farmer

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_change_request_add_farmer](spp_change_request_add_farmer) module extends the OpenSPP Change Request system to specifically handle requests for adding new farmers to existing groups within the registry. It leverages the framework provided by the [spp_change_request](spp_change_request) module and integrates with other registry modules to streamline the process of adding farmers while maintaining data integrity and consistency.

## Purpose

* **Specialized Change Request Type**: Introduce a dedicated change request type for adding farmers, distinct from other types of registrant modifications.
* **Streamlined Data Collection**:  Provide a tailored form for capturing essential information about the new farmer, including personal details, farmer-specific attributes, and desired group membership details.
* **Group Membership Management**:  Integrate with the [g2p_registry_membership](g2p_registry_membership) module to seamlessly add the new farmer to the specified group upon approval.
* **Enhanced Validation**: Implement specific validation rules relevant to adding farmers, ensuring the accuracy and completeness of the submitted information. 

## Module Integration

## Dependencies

The module relies heavily on the following modules:

* **[spp_change_request](spp_change_request)**: Inherits the core change request functionality, including the request workflow, validation processes, approval mechanisms, and integration with the Document Management System ([spp_dms](spp_dms)).
* **[spp_farmer_registry_base](spp_farmer_registry_base)**: Leverages the farmer-specific data models and attributes to capture and store information about the new farmer.
* **[g2p_registry_membership](g2p_registry_membership)**: Integrates with the membership management system to create the appropriate group membership record for the new farmer upon change request approval. 
* **[phone_validation](phone_validation)**: Utilizes the phone validation module to ensure phone number entries for the new farmer adhere to correct formatting.
* **[g2p_registry_group](g2p_registry_group)**:  Accesses group information and functionality to display details about the target group for the new farmer.
* **[g2p_registry_individual](g2p_registry_individual)**: Leverages individual registrant management features, inheriting from the individual registrant model.
* **[spp_service_points](spp_service_points)**:  Integrates with service points, allowing change requests to be initiated and managed through designated service points. 

## Additional Functionality

* **Custom Change Request Model**:  Introduces the `spp.change.request.add.farmer` model, inheriting from the base `spp.change.request` model and adding fields specific to adding farmers, such as farmer-specific details and group membership information.
* **Tailored Forms**: Provides specialized views for creating, displaying, and validating `Add Farmer` change requests, including a dedicated form (`view_change_request_add_farmer_form`) with relevant fields and a validation-focused form (`view_change_request_add_farmer_validation_form`).
* **Automated Individual and Membership Creation**: Upon validation and approval of the change request, the module automatically creates:
    * A new individual registrant record (`res.partner`) for the farmer, populating it with the submitted data.
    * A corresponding group membership record (`g2p.group.membership`), linking the newly created farmer to the designated group. 
* **Enhanced User Interface**: Adds specific menu items and actions to the OpenSPP interface, allowing users to efficiently manage `Add Farmer` requests.

## Conclusion

The [spp_change_request_add_farmer](spp_change_request_add_farmer) module provides a robust and specialized workflow for adding new farmers to existing groups within the OpenSPP registry. By seamlessly integrating with core change management and registry modules, it ensures data accuracy, consistency, and a streamlined user experience for managing farmer additions.
</file>

<file path="docs/reference/modules/spp_change_request.md">
# OpenSPP Change Request

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The OpenSPP Change Request ([spp_change_request](spp_change_request)) module streamlines the process of handling changes to registrant information within the OpenSPP system. It provides a structured framework for submitting, reviewing, approving, and applying modifications to existing registrant data.

## Purpose

The module aims to:

* **Formalize Change Requests**: Introduce a standardized procedure for requesting alterations to registrant data, ensuring all changes are documented and tracked.
* **Implement a Multi-Step Approval Process**: Establish a configurable workflow for validating and authorizing change requests, involving different user roles and levels of approval.
* **Maintain Data Integrity**: Safeguard the accuracy and consistency of registrant information by requiring proper justification and authorization for any modifications.
* **Enhance Transparency and Accountability**: Provide a clear audit trail of all change requests, approvals, and applications, promoting transparency and accountability in data management.

## Module Dependencies and Integration

The [spp_change_request](spp_change_request) module leverages and extends the functionality of several other OpenSPP modules:

1. **G2P Registry Modules**: It heavily relies on the G2P Registry modules for accessing and modifying registrant data:
    * **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**:  Inherits core registrant management features, including the `res.partner` model used to represent registrants.
    * **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**:  Integrates with the individual registrant model to handle change requests related to individual data.
    * **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**:  Extends group registrant functionality to manage changes related to group information.
    * **G2P Registry: Membership ([g2p_registry_membership](g2p_registry_membership))**:  Allows for change requests involving membership details, such as adding or removing members from groups.

2. **OpenSPP Service Points ([spp_service_points](spp_service_points))**: Integrates with the Service Points module to enable the submission of change requests through designated service points.

3. **OpenSPP Area ([spp_area](spp_area))**: Utilizes the Area module to manage change requests related to a registrant's geographical location, such as changes in address or district. 

4. **OpenSPP Scan ID Document ([spp_scan_id_document](spp_scan_id_document))**: Integrates with the ID scanning functionality to allow for the capture and association of scanned documents as supporting evidence for change requests.

5. **OpenSPP DMS ([spp_dms](spp_dms))**: Leverages the Document Management System for storing and managing documents related to change requests, such as proof of identity, address verification, or other supporting materials. 

6. **Phone Validation (`phone_validation`)**: Utilizes the phone validation module to ensure phone number updates within change requests adhere to proper formatting and validation rules.

## Additional Functionality

## Change Request Management

* **Change Request Model (`spp.change.request`)**: A central model for tracking all change requests, storing details like request type, status, applicant, assigned personnel, approval history, and related documents. 
* **Configurable Workflow**: Supports customizable multi-stage approval processes, allowing administrators to define the required steps and user roles involved in validating change requests.
* **Status Tracking**: Monitors the progress of change requests through various states (Draft, Pending Validation, Validated, Applied, Rejected, Cancelled), providing real-time visibility into the process. 
* **Audit Trail**:  Maintains a comprehensive history of all actions related to a change request, including submission, validation, approvals, rejections, and application, ensuring accountability and transparency.

## Integration with Registrant Data

* **Dynamic Form Generation**:  The module allows for defining different change request types, each associated with a specific form that captures the necessary data for that type of modification.
* **Data Validation**: Implements validation rules to ensure the data entered in change request forms meet specific criteria, such as data type, format, or range, before submission for approval. 
* **Automatic Data Update**:  Upon approval and application of a change request, the module automatically updates the corresponding registrant data in the relevant G2P Registry module, ensuring data consistency.

## User Interface and Experience

* **Dedicated Change Request Menu**:  Provides a centralized location within the OpenSPP interface for accessing and managing change requests.
* **User-Friendly Forms**:  Offers intuitive and easy-to-use forms for submitting different types of change requests, guiding users through the required information.
* **Role-Based Access Control**: Restricts access to change request functionalities based on user roles and permissions, ensuring data security and appropriate authorization levels.

## Conclusion

The OpenSPP Change Request module significantly strengthens the data management capabilities of OpenSPP by introducing a structured and controlled mechanism for handling modifications to registrant information.  By integrating with various core modules, the [spp_change_request](spp_change_request) module promotes data integrity, transparency, and accountability throughout the change management process.
</file>

<file path="docs/reference/modules/spp_consent.md">
# OpenSPP Consent Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The OpenSPP Consent module enhances the functionality of the [g2p_registry_individual](g2p_registry_individual) and [g2p_registry_group](g2p_registry_group) modules by providing a framework for managing and tracking consents provided by registrants (both individuals and groups). This module is essential for ensuring compliance with data privacy regulations and maintaining ethical data management practices within social protection programs.

## Features

* **Consent Recording:** Allows authorized users to record consents obtained from registrants, specifying the type of consent, the signatory (for groups), and the expiry date.
* **Consent Management:** Provides a centralized repository for storing and managing all recorded consents, making it easy to track consent status and expiry dates.
* **Consent Integration:** Seamlessly integrates with the registrant profiles in the [g2p_registry_individual](g2p_registry_individual) and [g2p_registry_group](g2p_registry_group) modules, providing direct access to consent information from the registrant's record.
* **Expired Consent Tracking:** Includes a dedicated view for monitoring expired consents, enabling proactive management of consent renewals and ensuring continued compliance.

## Functionality and Integration

The OpenSPP Consent module introduces the following key elements:

* **Consent Configuration:** Defines different types of consents that can be recorded within the system. 
* **Consent Model:** Stores information related to each consent, including the type of consent, associated registrant (individual or group), signatory, expiry date, and related configuration.
* **Consent Mixin:** A mixin model that extends the functionality of the `res.partner` model (used for both individuals and groups) in the registry modules. This mixin adds a relationship field to link registrants with their respective consents.
* **Consent Wizard:** Provides a user-friendly interface for recording new consents, accessible directly from the registrant's profile.
* **Expired Consent View:** Offers a dedicated view for easily identifying and managing consents that have passed their expiry date.

## Benefits

* **Enhanced Data Privacy:** Ensures compliance with data privacy regulations by explicitly obtaining and tracking consents for data processing activities.
* **Improved Transparency:** Increases transparency by providing a clear record of consents obtained from registrants.
* **Streamlined Consent Management:** Simplifies the process of managing consents, reducing administrative burden and the risk of errors.
* **Proactive Compliance:** Enables proactive management of consents, ensuring timely renewals and minimizing the risk of non-compliance.

By integrating the OpenSPP Consent module with your existing registry system, you can significantly strengthen your data protection measures and promote ethical data management practices within your social protection programs.
</file>

<file path="docs/reference/modules/spp_custom_field_custom_filter.md">
# OpenSPP Custom Field Custom Filter

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The **SPP Custom Field - Custom Filter Integration** module bridges the functionality of the [G2P Registry: Custom Fields UI](G2P Registry: Custom Fields UI) module and the [SPP Custom Filter](SPP Custom Filter) module. It allows administrators to decide whether a custom field, created through the [G2P Registry: Custom Fields UI](G2P Registry: Custom Fields UI](G2P Registry: Custom Fields UI](G2P Registry: Custom Fields UI) module and the [SPP Custom Filter](SPP Custom Filter) module. It allows administrators to decide whether a custom field, created through the [G2P Registry: Custom Fields UI) module, should be available for filtering within the system. This integration provides a comprehensive approach to managing both the definition and usability of custom fields within the OpenSPP platform.

## Purpose

The primary goal of this module is to enhance the filtering capabilities of custom fields within OpenSPP. By enabling the "Allow Filter" option for specific custom fields, administrators can empower users to filter and analyze registry data based on these custom attributes. This granular control over filterable fields contributes to a more efficient and tailored user experience.

## Integration and Functionality

1. **Dependency on Custom Field Definition:** This module relies on the [G2P Registry: Custom Fields UI](G2P Registry: Custom Fields UI) module for the creation and management of custom fields. It extends the functionality of this module by adding a filtering dimension to the custom field definition.

2. **Integration with Custom Filter Logic:** It seamlessly integrates with the [SPP Custom Filter](SPP Custom Filter) module, which provides the underlying mechanism for controlling the visibility of fields in filter dropdowns. The "Allow Filter" option, added by this module, acts as a flag that the [SPP Custom Filter](SPP Custom Filter](SPP Custom Filter](SPP Custom Filter) module, which provides the underlying mechanism for controlling the visibility of fields in filter dropdowns. The "Allow Filter" option, added by this module, acts as a flag that the [SPP Custom Filter) module uses to determine whether to display a custom field in the filter interface.

3. **User Interface Enhancement:** From the user perspective, enabling the "Allow Filter" option for a custom field results in that field appearing as a selectable option in the filter dropdown menus, alongside standard fields. This allows users to construct specific queries and filter data based on the values stored in these custom fields.

## Example Use Case

Let's say a program using OpenSPP has defined a custom field called "Disability Status" to track the disability status of registrants.  By enabling the "Allow Filter" option for this custom field, program staff can easily filter the registry to identify and target interventions for registrants with specific disabilities.  This streamlines program operations and allows for more effective service delivery.

## Conclusion

The **SPP Custom Field - Custom Filter Integration** module plays a crucial role in maximizing the utility of custom fields within OpenSPP. By linking custom field definitions with filtering capabilities, this module provides a powerful tool for data analysis, reporting, and program implementation. It contributes to a more flexible and user-friendly system that can be readily adapted to the specific needs of diverse social protection programs.
</file>

<file path="docs/reference/modules/spp_custom_field_recompute_daily.md">
# OpenSPP Custom Field Recompute Daily

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the functionality of OpenSPP by introducing a mechanism to recompute specific fields on a daily basis. This is particularly useful for maintaining up-to-date values for fields that are computationally intensive or rely on frequently changing data.

## Purpose

The primary goal of this module is to:

* **Enable daily recomputation of fields:**  Allow administrators to mark specific fields for daily recomputation.
* **Improve performance:** By offloading computationally expensive field calculations to a scheduled task, the module prevents performance bottlenecks during regular system operations.
* **Ensure data accuracy:**  Regular recomputation ensures that fields relying on dynamic data remain consistent and reflect the latest information.

## Functionality and Integration

### Integration with `queue_job`

This module leverages the `queue_job` module to handle the asynchronous recomputation of fields. When a field marked for "Daily Recompute" needs updating, the module creates a background job using `queue_job`. This approach prevents the recomputation process from impacting the system's responsiveness, especially when dealing with large datasets.

### Integration with `base_setup`

The module integrates with `base_setup` to provide configuration options for daily recomputation. Administrators can set the "Maximum Daily Recompute Records Count" through the "Settings" menu. This parameter limits the number of records processed synchronously during each recomputation cycle, preventing potential performance issues.

## Key Features

* **Field level configuration:** The module adds a "Daily Recompute" checkbox to the field definition in the Odoo interface. Enabling this option marks the field for daily recomputation.
* **Cron Job:** A scheduled task runs daily to trigger the recomputation of marked fields.
* **Performance optimization:** The recomputation process is designed to be asynchronous and utilizes the `queue_job` framework to minimize the impact on system performance.
* **Configuration options:** Administrators can define the maximum number of records to be recomputed synchronously, allowing for fine-tuning based on system capacity.

## Usage

1. **Enable "Daily Recompute":** In the Odoo interface, navigate to the technical settings of the desired model. Locate the field you want to recompute daily and enable the "Daily Recompute" option.
2. **Configure Recomputation Settings (Optional):**  Access the "Settings" menu and locate the "Daily Recomputing" section. Adjust the "Maximum Daily Recompute Records Count" based on your system's capacity and performance requirements.

Once configured, the module automatically handles the daily recomputation of the marked fields in the background. This ensures that your data remains consistent and up-to-date without impacting the performance of other system operations.
</file>

<file path="docs/reference/modules/spp_custom_field.md">
# OpenSPP Custom Field

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Custom Field** module, which extends the functionality of OpenSPP by adding customizable fields to registrant profiles. This module is specifically designed to work with the **[g2p_registry_base](g2p_registry_base)** module and leverages its features for managing registrant data.

## Purpose

The **OpenSPP Custom Field** module enables administrators to define and manage custom fields for capturing additional information about registrants. This allows for greater flexibility and adaptability in tailoring the registry system to specific program needs and data collection requirements.

## Integration with [g2p_registry_base](g2p_registry_base)

This module directly integrates with the **[g2p_registry_base](g2p_registry_base)** module by extending the functionality of the `res.partner` model, which is the core model for managing registrants within OpenSPP.  Instead of creating new models or data structures, it adds custom fields directly onto the registrant profile, ensuring data consistency and ease of management.

## Key Functionality

* **Custom Field Creation**:  Administrators can create various types of custom fields (e.g., text fields, booleans, dates) through Odoo's standard field creation mechanisms.
* **Field Categorization**: Custom fields are categorized as either "Custom Details" or "Indicators." This allows for logical grouping and display of information within the registrant profile.
* **Conditional Field Display**:  Fields can be configured to display based on whether the registrant is an individual or a group, ensuring relevant information is presented in each context.
* **Indicators as Read-Only**:  Fields categorized as "Indicators" are automatically set as read-only on the user interface. This is particularly useful for displaying calculated metrics or data points derived from other system information.
* **Seamless UI Integration**:  Custom fields are integrated directly into the registrant profile form within the Odoo interface. This provides a user-friendly experience for data entry and management without requiring navigation to separate sections or modules. 

## Benefits

* **Enhanced Data Collection**:  Capture program-specific information beyond the standard fields provided by the **[g2p_registry_base](g2p_registry_base)** module.
* **Improved Targeting and Analysis**: Utilize custom fields to segment registrants, analyze trends, and support data-driven decision-making.
* **Flexibility and Adaptability**:  Easily modify and extend the registry system to accommodate evolving program needs and data collection requirements. 

## Conclusion

The **OpenSPP Custom Field** module provides a powerful and flexible way to customize the OpenSPP registry system. By seamlessly integrating with the **[g2p_registry_base](g2p_registry_base)** module and leveraging Odoo's existing framework, it empowers administrators to tailor data collection and management processes to meet the specific requirements of their social protection programs.
</file>

<file path="docs/reference/modules/spp_custom_fields_ui.md">
# OpenSPP Custom Filter UI

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **G2P Registry: Custom Fields UI** module within the OpenSPP ecosystem. This module, depending on the **[g2p_registry_base](g2p_registry_base)** module, provides a user-friendly interface for defining and managing custom fields for registrants. These custom fields allow implementers to tailor the registry to their specific program needs by capturing additional data beyond the core fields provided by the base module.

## Purpose

The **G2P Registry: Custom Fields UI** module aims to:

* Simplify the process of adding and modifying custom fields for registrants.
* Provide a centralized location within the Odoo backend to manage these fields.
* Offer flexibility in defining field types, validation rules, and display options.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**: This module depends on the **G2P Registry: Base** module, which provides the fundamental structure for storing and managing registrant data. The custom fields created through this UI module are directly integrated as extensions to the registrant profiles managed by the base module.

2. **Base (base)**:  Leverages the Odoo Base module for core functionalities like user interface elements, data models, and access control. 

## Additional Functionality

The key features provided by the **G2P Registry: Custom Fields UI** module include:

* **Custom Field Creation Wizard:** Offers a streamlined process to define new custom fields, guiding users through selecting the appropriate field type, label, and other relevant properties.
* **Field Type Selection:** Supports various field types available within Odoo, such as Char, Integer, Selection, Date, Many2one (relational fields), and more, enabling storage of different data formats.
* **Target Specificity:**  Allows users to specify whether a custom field applies to individual registrants or groups, ensuring data is collected at the appropriate level.
* **Field Category Distinction:**  Differentiates between custom fields that capture directly entered data and those that are calculated based on other field values, allowing for automatic data derivation. 
* **Integration with Group Membership Kinds:** For calculated fields, provides the option to associate the calculation with specific group membership types defined within the system.
* **Presence Indicator:** For calculated fields, includes the ability to configure a boolean "presence" indicator, simplifying the tracking of specific criteria related to group memberships.

## Conclusion

The **G2P Registry: Custom Fields UI** module empowers users to adapt the OpenSPP registry to their unique requirements without the need for extensive technical customization. Its intuitive interface and tight integration with the **[g2p_registry_base](g2p_registry_base)** module simplify the management of custom data, enhancing the flexibility and utility of the OpenSPP platform for diverse social protection programs.
</file>

<file path="docs/reference/modules/spp_custom_filter_ui.md">
# OpenSPP Custom Filter UI 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The **SPP Custom Filter UI** module customizes the user interface (UI) for filtering in specific OpenSPP modules, enhancing usability and simplifying data management. It builds upon the [spp_custom_filter](spp_custom_filter) module, which provides the underlying functionality for controlling which fields are displayed in filter dropdown menus. 

This module focuses specifically on tailoring the filtering UI for the **Res Partner** model, which is extensively used within OpenSPP, particularly for representing registrants. By selectively exposing relevant fields for filtering, the module aims to streamline user workflows and improve the overall experience within the OpenSPP system.

## Purpose

The primary purpose of the **SPP Custom Filter UI** module is to:

* **Enhance Usability**:  Simplify the filtering process for users by presenting a more concise and relevant set of filterable fields, reducing visual clutter and cognitive overload.
* **Improve Efficiency**: Enable users to find and filter data more quickly and effectively, particularly when working with models containing numerous fields.
* **Customize UI for OpenSPP**: Tailor the filtering UI to align with the specific data structures and user workflows within the OpenSPP platform. 

## Module Dependencies and Integration

1. **[spp_custom_filter](spp_custom_filter)**: This module directly depends on the **SPP Custom Filter** module, inheriting its core functionality for managing the visibility of fields in filter dropdown menus. The **SPP Custom Filter UI** module leverages this capability to configure the UI for specific models.

2. **[g2p_registry_group](g2p_registry_group)**:  This module utilizes functionalities from the **G2P Registry: Group** module, particularly those related to managing groups of registrants.  The UI customizations implemented by this module are relevant for filtering both individual and group registrants.

3. **[g2p_programs](g2p_programs)**: The module interacts with the **G2P Programs** module to ensure that the filtering UI aligns with program-specific data and workflows. This integration is crucial for users managing registrant data within the context of social protection programs.

## Additional Functionality

The **SPP Custom Filter UI** module provides the following additional functionality:

* **UI Configuration for Res Partner**:  The module specifically customizes the filter UI for the **Res Partner** model, which is central to OpenSPP's registrant management system.  It selectively enables the "Show on Custom Filter" option for relevant fields within this model, ensuring that only those fields appear in the filter dropdown menus. 

* **Integration with OpenSPP Modules**:  The module's UI configurations are designed to seamlessly integrate with the [g2p_registry_group](g2p_registry_group) and [g2p_programs](g2p_registry_group](g2p_programs](g2p_registry_group) and [g2p_programs) modules. This ensures that the filtering experience is consistent and user-friendly across different parts of the OpenSPP system.

## Conclusion

The **SPP Custom Filter UI** module plays a crucial role in enhancing the usability and efficiency of the OpenSPP platform. By customizing the filtering UI for key models like **Res Partner**, the module simplifies data management tasks for users, particularly those working with registrant information within the context of social protection programs. Its integration with other core OpenSPP modules ensures a cohesive and user-centric experience across the platform.
</file>

<file path="docs/reference/modules/spp_custom_filter.md">
# OpenSPP Custom Filter

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The SPP Custom Filter module enhances the default Odoo filtering functionality by allowing administrators to control which fields are displayed in the filter dropdown menus. This is particularly useful for complex models with a large number of fields, where displaying all fields in the filter dropdown can be overwhelming and impact usability. 

## Features

- **Granular control over filterable fields:** Administrators can enable or disable the "Show on Custom Filter" option for individual fields in any model. This allows them to selectively expose only the most relevant fields for filtering in the user interface.

- **Improved User Experience:** By limiting the number of fields displayed in the filter dropdown menus, users are presented with a cleaner and more focused interface. This simplifies the process of finding and filtering data, ultimately improving efficiency.

## How it Works

1. **Field Configuration:** The module adds a new boolean field, "Show on Custom Filter," to the field definition in the Odoo backend. By default, this option is disabled for all fields.

2. **Enabling Custom Filtering:** Administrators can enable the "Show on Custom Filter" option for specific fields within a model. Only the fields with this option enabled will appear in the filter dropdown menus for that model.

3. **User Interface Integration:** The module seamlessly integrates with the existing Odoo filtering mechanism. Users will see the filtered fields in the dropdown menus as usual, but with only the selected fields available.

## Dependencies

This module depends on the following Odoo module:

- **base:** This module is a core Odoo module that provides the basic framework and functionalities. 

## Integration with Other Modules

The [SPP Custom Filter](SPP Custom Filter) module can be used with any other Odoo module. Its functionality is generic and can be applied to enhance the filtering experience for any model.

## Example Use Case

Consider a Beneficiary model with numerous fields, such as name, age, address, contact details, program enrollment status, payment history, etc. Displaying all these fields in the filter dropdown menu can be overwhelming. With the [SPP Custom Filter](SPP Custom Filter) module, administrators can choose to display only frequently used fields for filtering, such as name, program enrollment status, and payment status, simplifying the user interface.

## Conclusion

The [SPP Custom Filter](SPP Custom Filter) module provides a simple yet powerful solution to enhance the usability of Odoo's filtering system. By offering administrators granular control over filterable fields, the module improves user experience and streamlines data management within Odoo.
</file>

<file path="docs/reference/modules/spp_data_export.md">
# OpenSPP Data Export

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The PDS Data Export module enhances the functionality of the OpenSPP by providing a robust mechanism for exporting large datasets to Excel (.xlsx) format. This module directly addresses the limitations of Odoo's default export functionality when dealing with datasets exceeding the row limit of Excel 2007-2013 format (1,048,576 rows). 

## Purpose and Functionality

This module overrides the default `/web/export/xlsx` route, intercepting export requests and performing a pre-emptive check on the number of records to be exported. 

**Key features:**

* **Prevents system overload:** By calculating the number of records before generating the Excel report, the module prevents potential server timeouts and crashes that can occur when attempting to export excessively large datasets.
* **User-friendly error handling:**  If the record count exceeds the Excel row limit, the module raises a user-friendly error message, informing the user about the limitation and advising them to split the export into smaller chunks.
* **Seamless integration:**  The module seamlessly integrates with existing export functionalities, requiring no changes to user workflows. 

## Dependencies

* **web:** This module extends the core "web" module of Odoo, specifically overriding the default Excel export controller.

## Benefits

* **Improved system stability:**  Prevents server crashes due to large exports.
* **Enhanced user experience:** Provides clear error messages and guidance for managing large exports.
* **Data accessibility:** Ensures that users can reliably export data, even for large datasets.
</file>

<file path="docs/reference/modules/spp_dci_api_server.md">
# OpenSPP DCI API Server

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_dci_api_server](spp_dci_api_server) module provides a RESTful API that adheres to the DCI (Digital Convergence Initiative) specification within the OpenSPP platform. This API enables authorized external systems to securely interact with OpenSPP's registry data, particularly focusing on individual registrant information.

## Purpose

This module serves as a bridge between OpenSPP and external systems seeking to access and utilize registry data. It facilitates the following:

- **Data Exchange:** Enables secure and standardized data exchange between OpenSPP and DCI-compliant systems.
- **Interoperability:** Promotes interoperability by adhering to the DCI specification, allowing various systems to communicate seamlessly with OpenSPP.
- **Data Access Control:** Enforces strict authentication and authorization mechanisms, ensuring that only authorized systems can access sensitive registry information.

## Dependencies

- [g2p_registry_base](g2p_registry_base): The [spp_dci_api_server](spp_dci_api_server) module relies on the core registry functionality provided by the [g2p_registry_base](g2p_registry_base) module. This includes the management of registrants, their IDs, relationships, and other essential attributes.
- [spp_oauth](spp_oauth): This module leverages the OAuth 2.0 authentication and authorization mechanisms provided by the [spp_oauth](spp_oauth) module. External systems are required to authenticate using OAuth 2.0 before they can access the DCI API endpoints.
- [g2p_registry_individual](g2p_registry_individual): This module utilizes the individual-specific data structures and functionalities provided by the [g2p_registry_individual](g2p_registry_individual) module. This is crucial for retrieving and formatting individual registry data according to the DCI specification.

## Functionality and Integration

The [spp_dci_api_server](spp_dci_api_server) module exposes specific API endpoints for handling DCI-related requests:

1. **Authentication Endpoint (`/oauth2/client/token`)**:  This endpoint, handles the OAuth 2.0 authentication flow. External systems must authenticate using their client credentials to obtain an access token, which is required for accessing protected API endpoints.

2. **DCI Sync Search Endpoint (`/api/v1/registry/sync/search`)**: This endpoint receives search requests from external systems. These requests, formatted according to the DCI specification, include criteria for filtering individual registrants within OpenSPP.  The module processes these requests, retrieves matching registrant data, and returns the results in a standardized DCI response format.

    - **Integration with [g2p_registry_individual](g2p_registry_individual):** The module utilizes the `get_dci_individual_registry_data` method from the [g2p_registry_individual](g2p_registry_individual) module to retrieve and structure individual registry data according to the DCI format.
    - **Data Mapping:**  The module maps DCI attribute names to corresponding fields in the OpenSPP database schema, ensuring accurate data retrieval and formatting.
    - **Error Handling:** The module implements robust error handling, returning appropriate error codes and messages in the DCI response format for any invalid requests or data access issues.

## Conclusion

The [spp_dci_api_server](spp_dci_api_server) module is essential for integrating OpenSPP with external systems that adhere to the DCI specification. By providing secure, standardized API endpoints, the module facilitates efficient data exchange and interoperability while ensuring the privacy and security of sensitive registry information.
</file>

<file path="docs/reference/modules/spp_demo.md">
# OpenSPP Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

The `spp_demo` module serves as a demonstration and testing ground for the OpenSPP system, showcasing its capabilities with pre-populated data. It builds upon core OpenSPP modules to create a realistic simulation of social protection programs and registries in action.

## Purpose

* **Illustrate OpenSPP Functionality:** The module provides tangible examples of how various OpenSPP components work together, demonstrating data flow and interactions between modules.
* **Facilitate User Exploration:**  Pre-populated data allows users to explore the system's interface, features, and data structures without manually creating extensive test data. 
* **Accelerate Training:**  The demo module serves as a valuable tool for training users on OpenSPP, providing a controlled environment to practice workflows and tasks. 

## Dependencies and Integration

The `spp_demo` module relies heavily on the following OpenSPP modules:

* [theme_openspp_muk](theme_openspp_muk)  Applies a specific visual theme to the OpenSPP user interface for demonstration purposes.
* [g2p_registry_membership](g2p_registry_membership) (G2P Registry: Membership): Utilizes this module to establish and demonstrate relationships between individual and group registrants.
* [spp_custom_field](spp_custom_field) (OpenSPP Custom Field): Leverages this module to create and showcase custom fields added to registrant profiles, illustrating the flexibility of OpenSPP in capturing program-specific data.
* [queue_job](queue_job) (Queue Job):  Employs the Queue Job module to handle background tasks, demonstrating asynchronous processing for operations like data generation and potentially eligibility checks.
* [g2p_registry_individual](g2p_registry_individual) (G2P Registry: Individual):  Relies on this module to populate the system with sample individual registrant data.
* [spp_area](spp_area) (OpenSPP Area):  Integrates with this module to demonstrate the association of registrants and programs with geographical areas.
* [spp_custom_field_recompute_daily](spp_custom_field_recompute_daily) (OpenSPP Custom Field: Recompute Daily):  May utilize this module to showcase the automatic daily recomputation of specific custom fields, highlighting OpenSPP's ability to maintain up-to-date data. 
* [g2p_registry_base](g2p_registry_base) (G2P Registry: Base):  Builds upon the base registry module for core registrant management functionalities.
* [g2p_registry_group](g2p_registry_group) (G2P Registry: Groups): Leverages this module to create and manage sample groups of registrants.
* [spp_base_demo](spp_base_demo): This module provides basic demonstration data for the OpenSPP system, including users, gender options and products.
* [g2p_programs](g2p_programs) (G2P Programs):  Utilizes this module extensively to define and demonstrate social protection programs, eligibility criteria, program cycles, and potentially beneficiary enrollment and entitlement processes. 

## Additional Functionality 

* **Data Generation Utilities:**  The module includes Python scripts and functions within the `models/` directory to generate a variety of sample data, such as:
    * **Randomized Registrant Data:**  Creates individual and group registrants with realistic names, demographics, contact information, and relationships, often leveraging external libraries like `faker` for randomized data generation.
    * **Program Data:**  Generates demo programs with varying target types (individual, group), eligibility rules, and program cycles.  This may also include the creation of sample entitlements and payment records to simulate program activity. 
    * **Geographical Area Data:**  Populates the system with sample area hierarchies, linking registrants and programs to specific locations to demonstrate the geographical aspects of OpenSPP.

* **User Interface Integration:**  The module includes XML files within the `views/` directory that extend or modify the OpenSPP user interface, such as:
    * **Data Generation Actions:**  Adds buttons or menu items within relevant sections of the interface to trigger data generation scripts. This provides an easy way for users to populate the demo environment with sample data. 
    * **Custom Views:** May include custom views or modifications to existing views to highlight specific aspects of the demo data or showcase particular functionalities.  

## Conclusion

The `spp_demo` module is an essential component of the OpenSPP ecosystem for demonstration, testing, and training purposes. It provides a rich and interactive environment for users to explore the system's capabilities and understand how different modules work together to manage social protection programs and registries.
</file>

<file path="docs/reference/modules/spp_dms.md">
# OpenSPP Document Management System

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_dms](spp_dms) module provides a robust system for organizing and managing files within OpenSPP. This module is essential for maintaining a structured and easily accessible repository of documents related to social protection programs. 

## Features

* **Hierarchical Directories:**  Organize files logically into folders and subfolders for easy navigation and retrieval.
* **File Uploads:** Securely upload and store files of various formats within the system.
* **Metadata Management:**  Store essential information about each file, including file type, size, upload date, and more.
* **File Preview:** View thumbnails and previews of common file types directly within the interface.
* **Categorization:** Classify files using categories to streamline searching and filtering.
* **User Roles and Permissions:** Control access to directories and files based on user roles to ensure data security.

## Integration

While the [spp_dms](spp_dms) module has no direct dependencies on other modules, it plays a crucial role in enhancing the functionality of other OpenSPP modules by providing a centralized document repository. 

For instance, modules related to:

* **Beneficiary Management:**  Can utilize [spp_dms](spp_dms) to store important beneficiary documents, such as identification cards, proof of residency, or program-specific forms.
* **Payment Processing:** Can store payment records, receipts, or other financial documentation within [spp_dms](spp_dms) for easy auditing and reference. 
* **Monitoring and Evaluation:**  Can leverage the module to manage evaluation reports, data collection tools, and other program-related documents. 

By integrating seamlessly with other OpenSPP modules, [spp_dms](spp_dms) contributes to a more organized and efficient management of data and documents within social protection programs.
</file>

<file path="docs/reference/modules/spp_eligibility_sql.md">
# OpenSPP SQL Query Eligibility Manager 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP SQL Query Eligibility Manager** module. This module enhances the **[g2p_programs](g2p_programs)** module by introducing a flexible way to define program eligibility criteria using SQL queries. 

## Purpose

The **OpenSPP SQL Query Eligibility Manager** module enables program administrators to:

* **Define Eligibility with SQL**:  Use SQL queries to express complex eligibility criteria based on data stored in the OpenSPP database. This provides greater flexibility than pre-defined eligibility rules.
* **Validate SQL Queries**:  The module includes functionality to validate the syntax and structure of user-defined SQL queries, ensuring they are compatible with the database schema.
* **Test Eligibility Criteria**: Administrators can test SQL queries against the registrant database to preview the number of beneficiaries who would be eligible based on the defined criteria.
* **Automate Enrollment**:  The module can automatically enroll registrants who meet the criteria specified in the SQL query, streamlining the beneficiary enrollment process.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**:  This module relies on the base registry for access to registrant data, which is queried against the SQL-based eligibility criteria.

2. **[g2p_programs](g2p_programs)**: 
    * Extends the core program management functionality by providing an additional eligibility manager type specifically for SQL-based eligibility.
    * Integrates with program views to display the SQL query eligibility manager and its associated actions.

3. **[spp_programs](spp_programs)**: Builds upon OpenSPP Programs features to allow SQL-based eligibility for both cash and in-kind programs. 

4. **[queue_job](queue_job)**: Employs the queue job framework to handle the asynchronous execution of SQL queries and the enrollment of eligible registrants, particularly for large datasets.

## Additional Functionality

* **[g2p.program_membership.manager.sql](g2p.program_membership.manager.sql)**: A new eligibility manager model specifically designed to store and execute SQL queries for eligibility determination. 

* **SQL Query Validation**:  The module validates SQL queries for:
    * **Syntax Errors**: Checks for any syntax errors in the query.
    * **Schema Compatibility**: Verifies that the query references existing tables and columns within the OpenSPP database schema.
    * **Result Set**:  Ensures that the query returns a list of registrant IDs, which is required for determining eligibility. 

* **Test Query Functionality**:  Administrators can execute the SQL query in a test environment to:
    * **Preview Eligible Beneficiaries**:  See a count of how many registrants meet the defined criteria.
    * **Identify Potential Issues**:  Detect any unexpected results or errors before applying the query to the actual program enrollment.

* **Automated Enrollment**:  Once the SQL query is validated, the module can:
    * **Fetch Eligible Registrants**: Retrieve a list of registrant IDs who match the criteria.
    * **Create Program Memberships**: Automatically enroll eligible registrants in the associated program.

## Conclusion

The **OpenSPP SQL Query Eligibility Manager** module significantly enhances the flexibility and efficiency of managing program eligibility within OpenSPP. By leveraging the power of SQL queries, administrators can define complex eligibility rules and automate the beneficiary enrollment process, saving time and ensuring accuracy.
</file>

<file path="docs/reference/modules/spp_eligibility_tags.md">
# OpenSPP Tag Based Eligibility Manager

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Tag Based Eligibility Manager** module within the OpenSPP ecosystem. This module extends the eligibility management capabilities of OpenSPP, providing a flexible and efficient way to define eligibility criteria based on registrant tags and geographical areas.

## Purpose

The **OpenSPP Tag Based Eligibility Manager** module allows program administrators to:

* **Define eligibility rules using registrant tags:** Instead of manually selecting individual beneficiaries or relying solely on demographic data, programs can leverage the existing tagging system within OpenSPP to target specific groups of registrants based on shared characteristics, program participation history, or other relevant factors.
* **Incorporate geographical targeting:**  Administrators can further refine eligibility criteria by specifying geographical areas. This enables programs to target beneficiaries residing within specific districts or regions, enhancing the precision of program targeting and resource allocation. 
* **Simplify and automate eligibility verification:** By defining eligibility rules based on tags and areas, the module automates the process of identifying eligible beneficiaries. This reduces manual effort, minimizes errors, and ensures consistent application of eligibility criteria.

## Module Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base)(./g2p_registry_base.md))**:
    * Utilizes the tagging functionality of the base registry module to define eligibility rules based on registrant tags.
    * Leverages the geographical information associated with registrants, specifically their assigned areas, to apply area-based eligibility criteria.

2. **G2P Programs ([g2p_programs](g2p_programs)(./g2p_programs.md))**:
    * Extends the core program management module by introducing a new type of eligibility manager, the **Tag Based Eligibility Manager**.
    * Integrates seamlessly with existing program workflows, allowing administrators to select and configure the **Tag Based Eligibility Manager** for specific programs.

3. **OpenSPP Programs ([spp_programs](spp_programs)(./spp_programs.md))**: 
    * Leverages the functionality of the OpenSPP Programs module, particularly its handling of program memberships and beneficiary enrollment.
    * Ensures compatibility with both cash and in-kind entitlement programs, allowing for tag-based eligibility determination across different program types. 

## Additional Functionality

* **Tag Based Eligibility Manager Model (g2p.program_membership.manager.tags):** 
    * This model extends the base **Eligibility Manager** model within G2P Programs, introducing fields for selecting tags and areas to define eligibility criteria. 
    * Provides a user-friendly interface for administrators to configure tag-based eligibility rules, with clear visualization of the selected criteria.

* **Automated Eligibility Verification:**
    * When a program cycle is initiated, the **Tag Based Eligibility Manager** automatically identifies and flags registrants who meet the defined tag and area-based criteria as eligible.
    * This automated process streamlines beneficiary enrollment, saving time and ensuring accuracy in identifying qualified individuals or groups.

* **Dynamic Eligibility Updates:** 
    * As registrants' tags or area assignments change (e.g., due to data updates, program participation, or relocation), the module dynamically reassesses their eligibility status.
    * This ensures that eligibility remains current and reflects the most up-to-date information, minimizing instances of ineligible beneficiaries receiving benefits or eligible beneficiaries being excluded.

* **Improved Program Targeting and Efficiency:**
    * By leveraging tags and areas, programs can target specific segments of the population more effectively, ensuring that benefits reach the intended recipients.
    * This targeted approach enhances program impact and optimizes resource allocation by focusing on beneficiaries who are most likely to benefit from the program's interventions. 

## Conclusion

The **OpenSPP Tag Based Eligibility Manager** module empowers program implementers to define sophisticated eligibility criteria using a flexible and efficient tag-based approach. By seamlessly integrating with existing OpenSPP modules and automating key processes, it simplifies program administration, enhances targeting accuracy, and contributes to the overall effectiveness of social protection and agricultural support programs.
</file>

<file path="docs/reference/modules/spp_encryption.md">
# OpenSPP Encryption Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

The [spp_encryption](spp_encryption) module extends the encryption capabilities of OpenSPP by adding support for the [JWCrypto](https://jwcrypto.readthedocs.io/en/latest/) library. This module builds upon the foundation provided by the [g2p_encryption](g2p-encryption) and offers a concrete implementation of an encryption provider utilizing JWCrypto's functionalities.

## Purpose and Functionality

The primary purpose of this module is to enable secure encryption, decryption, signing, and verification of data within the OpenSPP ecosystem using JWCrypto. It provides the following functionalities:

- **JWCrypto Integration:** Seamlessly integrates the JWCrypto library into OpenSPP, enabling the use of its robust cryptographic functions.
- **Encryption and Decryption:** Implements encryption and decryption methods based on JWCrypto's JWE (JSON Web Encryption) standard for securely handling sensitive data.
- **JWT Signing and Verification:** Utilizes JWCrypto's JWT (JSON Web Token) capabilities to sign and verify data, ensuring data integrity and authenticity.
- **Key Management:** Provides functionalities to generate, store, and manage JWCrypto keys within the OpenSPP database.

## Integration and Usage

The [spp_encryption](spp_encryption) module extends the `g2p.encryption.provider` model introduced by the [g2p_encryption](g2p-encryption). It adds a new encryption provider type, "JWCrypto," which users can select and configure through the Odoo interface. 

Here's how this module integrates with other OpenSPP components:

1. **Dependency:** Modules requiring advanced encryption features, such as those dealing with sensitive beneficiary data or financial transactions, would declare a dependency on the [spp_encryption](spp_encryption) module.
2. **Configuration:** Administrators would configure a new encryption provider of type "JWCrypto" within the OpenSPP settings, providing the necessary JWCrypto key information.
3. **Utilization:** Modules requiring encryption can then utilize the configured JWCrypto provider through the standard encryption methods provided by the `g2p.encryption.provider` model.

## Example Usage Scenario

Let's consider a module responsible for handling beneficiary payment data. This module needs to encrypt sensitive financial information before storing or transmitting it. 

1. The module would depend on [spp_encryption](spp_encryption).
2. It would utilize the configured "JWCrypto" encryption provider.
3. Using the provider's `encrypt_data_jwcrypto` method, the module can securely encrypt the payment data.
4. Upon retrieval, the module would use the corresponding `decrypt_data_jwcrypto` method to decrypt the data.

## Benefits of using spp_encryption:

- **Enhanced Security:** Leverages JWCrypto's robust cryptographic algorithms to provide strong encryption and data protection.
- **Standardized Implementation:** Adheres to established standards like JWE and JWT, ensuring interoperability and security best practices.
- **Simplified Key Management:** Provides functionalities for generating and managing JWCrypto keys within the OpenSPP interface.
- **Extensibility:** Can be further extended to support additional JWCrypto features or customized encryption workflows.

By offering a dedicated JWCrypto-based encryption provider, the [spp_encryption](spp_encryption) module strengthens OpenSPP's security framework and provides developers with a reliable toolset for protecting sensitive data within their modules.
</file>

<file path="docs/reference/modules/spp_ent_trans.md">
# OpenSPP Entitlement Transactions

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document details the **OpenSPP Entitlement Transactions** module within the OpenSPP platform. This module is responsible for recording and managing transactions related to entitlement redemptions, providing a transparent and auditable history of benefit disbursement. It caters to both cash and in-kind entitlements, offering dedicated models and views for each type. 

## Purpose

The **OpenSPP Entitlement Transactions** module primarily focuses on:

* **Transaction Recording**: Captures detailed information for every entitlement redemption, including date, time, service point, user, and remaining entitlement value.
* **Audit Trail**: Provides a comprehensive history of entitlement transactions, enabling tracking of benefit disbursement, identifying potential issues, and supporting financial reconciliation.
* **Cash & In-Kind Support**: Offers dedicated models and views for cash-based and in-kind entitlement transactions, accommodating the specific data points required for each type.
* **Integration with Program & Registry Modules**: Seamlessly integrates with the [OpenSPP Programs](OpenSPP Programs)(#openspp-programs-module-documentation) module and relevant registry modules to link transactions back to specific entitlements, programs, and beneficiaries.

## Module Dependencies and Integration

1. **[spp_programs](spp_programs)**: 
    * Relies heavily on this module to access entitlement information. 
    * Links each transaction to its corresponding entitlement record, enabling tracking of redeemed amounts against total entitlement value.

2. **[g2p_registry_base](g2p_registry_base)**:
    * Utilizes the base registry module indirectly through the [OpenSPP Programs](OpenSPP Programs)(#openspp-programs-module-documentation) module.

    * Links transactions to the relevant registrant profiles, providing context and enabling analysis of benefit distribution at the beneficiary level.

3. **[g2p_programs](g2p_programs)**:
    * Integrates with program data to associate transactions with specific programs and cycles. 
    * Allows for program-level analysis of transaction trends, service point utilization, and overall program performance.

## Additional Functionality

* **Cash Entitlement Transactions Model (spp.entitlement.transactions)**:
    * Records transactions for cash-based entitlements, capturing details such as:
        * **Transaction UUID**:  Provides a unique identifier for each transaction.
        * **Card Number**:  Stores the beneficiary's card number used for redemption.
        * **Service Point**:  Identifies the location where the transaction occurred.
        * **User**: Records the system user who processed the transaction.
        * **Amount Charged**: Captures the amount of the entitlement redeemed in the transaction. 
        * **Value Remaining**: Tracks the remaining balance of the entitlement after the transaction.

* **In-Kind Entitlement Transactions Model (spp.inkind.entitlement.transactions)**:
    * Manages transactions for in-kind entitlements, including details like:
        * **Product**:  Specifies the particular good or service redeemed. 
        * **Quantity**: Records the number of units of the product dispensed.
        * **Quantity Remaining**: Tracks the remaining quantity of the entitlement after the transaction. 

* **Dedicated Tree Views**: 
    * Offers separate tree views for both cash and in-kind transactions, providing clear and organized displays of transaction data.
    * Views are filterable and searchable, enabling users to easily find and analyze specific transactions or trends.

* **Menu Integration**:
    * Integrates seamlessly into the OpenSPP menu structure, providing easy access to transaction data for authorized users. 

## Conclusion

The **OpenSPP Entitlement Transactions** module is a crucial component of OpenSPP, ensuring the accurate recording, tracking, and auditing of benefit disbursements. Its integration with core program and registry modules provides a holistic view of program operations, enabling better monitoring, evaluation, and ultimately, improved delivery of social protection benefits.
</file>

<file path="docs/reference/modules/spp_entitlement_basket.md">
# OpenSPP Entitlement Basket

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Entitlement Basket** module. This module extends OpenSPP's program management by introducing the concept of predefined "baskets" of goods and services that beneficiaries are entitled to receive.

## Purpose

The **OpenSPP Entitlement Basket** module aims to:

* **Define In-Kind Entitlement Baskets:** Create predefined sets of products (goods and services) representing a complete entitlement package.
* **Simplify In-Kind Entitlement Management:** Streamline the assignment of multiple products to beneficiaries using a single basket.
* **Integrate with Program Cycles and Inventory:** Seamlessly connect entitlement baskets to program cycles and leverage existing inventory management features.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**: Uses the base registry for core beneficiary information and links basket entitlements to beneficiary profiles.

2. **[g2p_programs](g2p_programs)**:  Extends program management by introducing a new entitlement manager type for basket distribution.

3. **[spp_programs](spp_programs)**: Leverages the in-kind entitlement model and inventory integration features. 

4. **[spp_service_points](spp_service_points)**: Associates entitlement baskets with service points for beneficiary redemption.

5. **[product](product)**:  Utilizes the product module to define the goods and services included within an entitlement basket.

6. **[stock](stock)**:  Integrates with the stock module to manage inventory levels of basket products, generate procurement requests, and track stock movements upon entitlement approval. 

## Additional Functionality

* **Entitlement Basket Model (spp.entitlement.basket):** Introduces a new model to define entitlement baskets, capturing:
    * **Products:** A list of products included in the basket.
    * **Quantity per Product:** The number of units of each product a beneficiary is entitled to.

* **Basket Entitlement Manager (g2p.program.entitlement.manager.basket):**  
    * A new entitlement manager type specifically for managing basket distribution within a program.
    * Associates a program cycle with a predefined entitlement basket.
    * Allows configuration of optional multipliers based on beneficiary attributes (e.g., number of family members).
    * Handles the generation of individual in-kind entitlements for each product in the basket based on beneficiary eligibility and multiplier settings.

* **Inventory Integration:**
    * When a basket entitlement is approved, the module leverages existing [spp_programs](spp_programs) functionality to:
        * Generate procurement requests for the required quantities of basket products within the designated warehouse. 
        * Trigger stock movements to transfer goods from the warehouse to the designated service point for beneficiary redemption.

* **Beneficiary Entitlement View:** Extends the beneficiary profile to display a history of received entitlement baskets and the individual product entitlements within each basket.

## Conclusion

The **OpenSPP Entitlement Basket** module simplifies the management and distribution of complex in-kind entitlements. By bundling products into predefined baskets, it streamlines program configuration, improves efficiency, and enhances transparency for both program administrators and beneficiaries. The integration with existing OpenSPP modules ensures a cohesive and robust system for managing diverse social protection programs.
</file>

<file path="docs/reference/modules/spp_entitlement_cash.md">
# OpenSPP Cash Entitlement

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Program Entitlement (Cash)** module. This module extends the **G2P Programs** module, providing specialized features for managing cash-based entitlements within social protection programs.

## Purpose

The **OpenSPP Program Entitlement (Cash)** module enables the definition, calculation, and management of cash entitlements for beneficiaries enrolled in social protection programs. It streamlines the process of determining eligibility, calculating entitlement amounts based on predefined rules, and facilitating the disbursement of funds.

## Module Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base)(LINK_TO_G2P_REGISTRY_BASE))**: This module utilizes the base registry to access and manage beneficiary data, ensuring that entitlements are linked to the correct individuals or households.

2. **G2P Programs ([g2p_programs](g2p_programs)(LINK_TO_G2P_PROGRAMS))**: This module builds upon the core program management features, including program creation, cycle management, and eligibility determination. The cash entitlement module extends this functionality by adding cash-specific entitlement management capabilities.

3. **OpenSPP Programs ([spp_programs](spp_programs)(LINK_TO_SPP_PROGRAMS))**:  This module provides the framework for managing both cash and in-kind entitlements. The cash entitlement module specializes in handling the complexities of cash-based distributions, integrating seamlessly with the broader entitlement management system. 

4. **Queue Job ([queue_job](queue_job)(LINK_TO_QUEUE_JOB))**: To enhance performance and user experience, this module employs the queue job framework for asynchronous processing of computationally intensive tasks, such as:
    * Calculating entitlement amounts for large numbers of beneficiaries.
    * Generating payment batches for disbursement.
    * Updating beneficiary records with entitlement and payment information.

## Additional Functionality

* **Cash Entitlement Manager Model (`g2p.program.entitlement.manager.cash`)**:
    * Extends the generic entitlement manager model (`g2p.program.entitlement.manager`) to provide cash-specific configurations and functionalities.
    * Allows program administrators to define flexible rules for calculating cash entitlement amounts, including:
        * **Fixed amounts**:  Distribute a predetermined sum to all eligible beneficiaries.
        * **Variable amounts**: Calculate entitlements dynamically based on beneficiary attributes (e.g., number of dependents, income level) using multipliers and conditions. 
        * **Maximum amounts**: Set upper limits on entitlement amounts to ensure equitable distribution of funds.

* **Entitlement Item Model (`g2p.program.entitlement.manager.cash.item`)**:
    * Defines individual entitlement rules within a cash entitlement manager.
    * Allows for multiple calculation rules to be combined within a single entitlement manager, providing granular control over entitlement distribution.

* **Automated Entitlement Calculation**:
    * Automates the process of calculating cash entitlements for eligible beneficiaries based on the defined rules, reducing manual effort and minimizing errors. 

* **Entitlement Validation and Approval**:
    * Provides mechanisms for reviewing and validating calculated entitlements before disbursement. 
    * Optionally integrates with user groups and permissions to enforce approval workflows and ensure accountability.

* **Fund Management**:
    * Can integrate with accounting modules to track program funds, monitor balances, and ensure sufficient resources for disbursement.
    * May include features to prevent overspending or to alert administrators of potential funding shortfalls.

* **Payment Processing**:
    * Facilitates the generation of payment batches for disbursing cash entitlements to beneficiaries through various channels, such as:
        * Bank transfers
        * Mobile money
        * Cash pickup points
    * Tracks payment status and provides reconciliation tools to manage disbursements effectively. 

## Conclusion

The **OpenSPP Program Entitlement (Cash)** module provides a specialized toolkit for managing cash-based social assistance within a broader social protection program. Its integration with other OpenSPP modules and its flexible rule-based system make it a valuable asset for organizations seeking to deliver cash transfers efficiently and transparently.
</file>

<file path="docs/reference/modules/spp_entitlement_in_kind.md">
# OpenSPP In-Kind Entitlement

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP In-Kind Entitlement ([spp_entitlement_in_kind](spp_entitlement_in_kind))** module, which extends the OpenSPP platform to manage the distribution of in-kind entitlements within social protection programs. 

## Purpose

The [spp_entitlement_in_kind](spp_entitlement_in_kind) module enhances the existing **[g2p_programs](g2p_programs)  (Programs)** module by introducing specific features and workflows for handling in-kind entitlements, where beneficiaries receive goods or services instead of cash transfers. 

## Role and Functionality 

This module builds upon the foundation established by its dependencies, focusing specifically on in-kind entitlement management:

* **[g2p_registry_base](g2p_registry_base) (G2P Registry: Base)**: Utilizes the base registry to identify and manage beneficiary information.
* **[g2p_programs](g2p_programs) (G2P Programs)**:  Extends the core program management features, leveraging existing program structures, cycles, and eligibility determination processes.
* **Product (product)**: Leverages the product module to define the goods or services offered as in-kind entitlements. 
* **Stock (stock)**: Integrates with the stock module to manage inventory, track stock movements, and potentially trigger procurements based on approved entitlements. 
* **[spp_service_points](spp_service_points) (OpenSPP Service Points)**: Allows for the designation of service points where beneficiaries can redeem their in-kind entitlements. 
* **Queue Job (queue_job)**: Employs the queue job framework to handle potentially resource-intensive operations, such as generating entitlements or updating inventory, asynchronously in the background.

## Key Features

1. **In-Kind Entitlement Definition:**
    * Extends the `g2p.entitlement.inkind` model from [g2p_programs](g2p_programs) to specifically manage in-kind entitlements.
    * Links entitlements to products from the **Product** module, specifying the quantity a beneficiary is eligible to receive.
    * Integrates with [spp_service_points](spp_service_points) to associate entitlements with designated redemption locations.

2. **Entitlement Manager Extension:**
    * Inherits from the `g2p.program.entitlement.manager` model in [g2p_programs](g2p_programs).
    * Introduces a new type of entitlement manager (`g2p.program.entitlement.manager.inkind`) designed for in-kind distributions. 
    * Allows configuration of inventory management options, linking to warehouses in the **Stock** module.
    * Provides the ability to define complex entitlement rules based on beneficiary attributes, ensuring accurate allocation of goods or services. 

3. **Inventory Management Integration:**
    * When in-kind entitlements are approved, the module can trigger stock movements in the **Stock** module, transferring goods from designated warehouses to service points. 
    * Facilitates inventory tracking and reconciliation, ensuring transparency in the distribution process.

4. **Beneficiary Redemption:**
    * While not directly handled by this module, it lays the groundwork for beneficiaries to redeem their entitlements at specified service points. 
    * Service points can use the existing **Stock** module functionality to record the outgoing delivery of goods to beneficiaries, completing the distribution cycle. 

## Benefits

* **Streamlined In-Kind Distribution:** Provides a structured approach to managing in-kind entitlements within existing social protection programs.
* **Inventory Control:** Leverages Odoo's inventory management capabilities to track stock levels, movements, and potential procurement needs.
* **Transparency and Accountability:** Enhances the transparency of in-kind distributions and facilitates accurate reporting on program operations. 
* **Improved Efficiency:** Automates key processes, such as entitlement generation and inventory updates, reducing manual effort and potential errors. 

## Conclusion

The **OpenSPP In-Kind Entitlement ([spp_entitlement_in_kind](spp_entitlement_in_kind))** module is a valuable addition to the OpenSPP platform, extending its capabilities to effectively manage and track the distribution of in-kind benefits. By integrating with core modules like **Stock** and **[spp_service_points](spp_service_points) (OpenSPP Service Points)**, it provides a comprehensive solution for organizations implementing programs that involve the delivery of goods or services to beneficiaries.
</file>

<file path="docs/reference/modules/spp_event_data_program_membership.md">
# OpenSPP Event Data Program Membership

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module enhances the functionality of OpenSPP by integrating the **Event Data** module ([spp_event_data](spp_event_data)) with the **G2P Programs** module ([g2p_programs](spp_event_data](g2p_programs](spp_event_data)) with the **G2P Programs** module ([g2p_programs)). It allows users to record and track program membership-related events within the OpenSPP system.

## Purpose

The **spp_event_data_program_membership** module serves to:

* **Record Program Membership Events:**  Log specific events related to program membership, such as enrollment, suspension, exit, and changes in eligibility status.
* **Link Events to Program Memberships:** Associate these events with the corresponding program membership records in the [g2p_programs](g2p_programs) module.
* **Provide an Event History:** Offer a comprehensive history of events associated with each program membership, facilitating tracking and auditing.

## Module Integration

1. **[spp_event_data](spp_event_data):** This module leverages the event data framework provided by the [spp_event_data](spp_event_data](spp_event_data](spp_event_data):** This module leverages the event data framework provided by the [spp_event_data) module to record and manage event information.
2. **[g2p_programs](g2p_programs):**  It integrates directly with the [g2p_programs](g2p_programs](g2p_programs](g2p_programs):**  It integrates directly with the [g2p_programs) module, linking event data to the relevant program membership records (`g2p.program_membership` model). 

## Additional Functionality

* **Program Membership Field in Event Data:**
    * Adds a `program_membership_id` field to the `spp.event.data` model, allowing users to directly associate an event with a specific program membership.
    * Includes a computed domain (`program_membership_id_domain`) to dynamically filter and display only relevant program memberships based on the selected partner.

* **Modified Event Data Views:**
    * Updates the event data form view (`view_spp_event_data_form_custom`) to include the new `program_membership_id` field. 
    * Enables users to select the relevant program membership when creating or editing an event.

* **Read-Only Event Data Fields on Registrant Form:**
    * Modifies the registrant form view (`view_groups_event_data_form_custom`) to display event data in read-only mode.
    * Prevents accidental modification of event data from the registrant's profile. 

## Usage Example

1. **Recording an Enrollment Event:** A program officer enrolls a beneficiary into a social assistance program. Using this module, they can create a new event of type "Enrollment," link it to the beneficiary's newly created program membership record, and record relevant details, such as the enrollment date. 

2. **Tracking Eligibility Changes:**  A beneficiary's eligibility status changes due to a change in their circumstances. A program officer can record this event, selecting "Eligibility Change" as the event type and associating it with the beneficiary's program membership.  

3. **Viewing Event History:**  Program staff can access a beneficiary's program membership record and view a chronological list of all events, providing a clear audit trail of their participation in the program.

## Conclusion

The **spp_event_data_program_membership** module enhances the tracking and management of program membership events within OpenSPP.  By integrating event data with program memberships, it improves data integrity, transparency, and the overall efficiency of program administration.
</file>

<file path="docs/reference/modules/spp_event_data.md">
# OpenSPP Event Data

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **[spp_event_data](spp_event_data)** module within the OpenSPP ecosystem. This module is designed to record and track specific events related to registrants, building upon the functionalities offered by the base registry modules.

## Purpose

The **[spp_event_data](spp_event_data)** module allows users to associate significant events with both individual and group registrants, enhancing the system's capacity to capture a chronological history of changes and actions. It aims to:

* Provide a structured way to log and store data about events impacting registrants.
* Link these events to the specific data entries they affect, creating a clear audit trail.
* Offer tools to view and navigate the event history of a registrant.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**: This module relies on the foundational structure and functionalities provided by the **[g2p_registry_base](g2p_registry_base](g2p_registry_base](g2p_registry_base)**: This module relies on the foundational structure and functionalities provided by the **[g2p_registry_base)** module, specifically leveraging:
    * **Registrant Data**: Utilizes the core registrant information to associate events with the correct individuals or groups.
2. **[g2p_registry_group](g2p_registry_group)**: Extends its functionality by allowing event data to be linked to group registrants.
3. **Contacts (res.partner)**:  Integrates with the standard Odoo Contacts module, enabling the module to link event data to the respective contact records, enriching the overall profile of the registrant.

## Additional Functionality

* **Event Data Model (spp.event.data)**:
    * Introduces a new data model to store event-specific information.
    * Includes fields to record:
        * Event type (automatically derived from the related data model).
        * Related document/record (using `Many2oneReference` for flexibility).
        * Registrar (person who recorded the event).
        * Collection date and optional expiry date.
        * Status of the event (active/inactive).
* **Automatic Event Type Calculation**:
    * Dynamically determines and displays the event type based on the linked data model, providing a clear and user-friendly representation of the event.
* **Event History on Registrant Forms**:
    * Adds a dedicated tab on both individual and group registrant forms to display their associated event history.
    * Enables users to directly access and review past events related to a specific registrant.
* **Event Creation Wizard**:
    * Provides a streamlined process for creating new event data entries through a dedicated wizard.
    * Simplifies data entry and ensures consistency in event logging.
* **Active Event Management**:
    * Implements logic to manage the active status of events.
    * Automatically ends the previous active event of the same type when a new one is created for the same registrant.
    * Provides a clear view of the current status of events related to a specific data point.

## Conclusion

The **[spp_event_data](spp_event_data)** module enhances OpenSPP by introducing a robust system for tracking and managing significant events throughout the lifecycle of registrants. Its tight integration with core registry modules and the Contacts module ensures that event data is seamlessly incorporated into the platform, enriching data integrity and providing a comprehensive view of registrant history.
</file>

<file path="docs/reference/modules/spp_event_demo.md">
# OpenSPP Event Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module, **[spp_event_demo](spp_event_demo)**, provides demonstration data and functionalities for the **[spp_event_data](spp_event_demo](spp_event_data](spp_event_demo)**, provides demonstration data and functionalities for the **[spp_event_data)** module within the OpenSPP ecosystem. It showcases how to extend and utilize the event tracking capabilities of OpenSPP for specific use cases. 

## Relationship to spp_event_data

This module directly depends on and builds upon the functionalities of the **[spp_event_data](spp_event_data)** module. While **[spp_event_data](spp_event_data)** provides the core structure for recording and managing events related to registrants, **[spp_event_demo](spp_event_data](spp_event_demo](spp_event_data)** module. While **[spp_event_data](spp_event_data)** provides the core structure for recording and managing events related to registrants, **[spp_event_demo)** demonstrates practical applications of this system through concrete examples.

## Additional Functionality and Demonstrations

1. **Predefined Event Types**:
    * Introduces several predefined event types, including:
        * **House Visit (spp.event.house.visit)**: Captures data collected during a household visit, including farm details, livestock numbers, and food security indicators.
        * **Phone Survey (spp.event.phone.survey)**:  Records information gathered through a phone-based survey, such as a summary and detailed description of the conversation.
        * **School Enrollment Record (spp.event.schoolenrollment.record)**:  Tracks school enrollment events, storing details about the school, enrollment type, and date.

2. **Data Models and Views**:
    * Defines specific data models for each event type, each with relevant fields for capturing data.
    * Provides user-friendly views (tree and form) for each event type, allowing for easy data entry, viewing, and management within the Odoo interface.

3. **Event Creation Wizards**:
    * Includes dedicated wizards for creating new events:
        * **Create Event: House Visit**:  Guides users through the process of logging a house visit event, including capturing specific data points.
        * **Create Event: Phone Survey**: Simplifies the recording of phone survey events.
        * **Create Event: School Enrollment**: Facilitates the logging of school enrollment records.

4. **Integration with Registrant Profiles**:
    * Extends the registrant profiles to display active events of each type, providing a quick overview of the latest events associated with a particular registrant.

## Example Scenario

This module demonstrates how a program might use the **[spp_event_data](spp_event_data)** module.  For example, a user could record a series of house visits with a beneficiary.  Each house visit would be linked to the beneficiary's profile and the program could then query for all beneficiaries who have had at least one house visit, or all beneficiaries who have not had a house visit in the last 6 months. 

## Conclusion

The **[spp_event_demo](spp_event_demo)** module serves as a practical guide and starting point for implementing custom event tracking within OpenSPP.  By providing concrete examples and pre-built components, it empowers users to leverage the full potential of the **[spp_event_data](spp_event_demo](spp_event_data](spp_event_demo)** module serves as a practical guide and starting point for implementing custom event tracking within OpenSPP.  By providing concrete examples and pre-built components, it empowers users to leverage the full potential of the **[spp_event_data)** module and tailor it to their specific program needs.
</file>

<file path="docs/reference/modules/spp_exclusion_filter.md">
# OpenSPP Exclusion Filter

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Exclusion Filter** module.  This module enhances the program creation process within OpenSPP by introducing exclusion filters during the program wizard. 

## Purpose

The **OpenSPP Exclusion Filter** module aims to:

* **Streamline Program Targeting**:  Simplify the process of excluding specific registrant groups during program creation, ensuring that benefits are directed to the intended population.
* **Improve Efficiency**:  Reduce manual effort required to identify and exclude ineligible registrants from new programs.
* **Enhance Program Accuracy**:  Minimize the risk of including ineligible beneficiaries by applying pre-defined exclusion criteria. 

## Module Dependencies and Integration

1. **[spp_programs](spp_programs)**: 
    * Integrates with the OpenSPP program creation wizard, adding a dedicated step for configuring exclusion filters.
    * Leverages program data, such as target criteria and program objectives, to guide the selection of relevant exclusion filters. 

2. **[g2p_registry_base](g2p_registry_base)**:
    * Utilizes registrant data, including demographics, tags, and relationships, to apply exclusion filters.
    * Accesses the registry to identify and flag registrants who meet the specified exclusion criteria. 

3. **[g2p_programs](g2p_programs)**:
    * Extends the functionality of OpenG2P's program creation process.
    * Ensures compatibility with existing program management features and workflows.

## Additional Functionality

* **Program Wizard Integration**:
    * Adds a dedicated step to the program creation wizard, allowing program managers to select and configure exclusion filters. 
    * Provides a user-friendly interface for defining exclusion criteria and previewing the potential impact on the target population.

* **Eligibility Manager Integration (Potentially)**: 
    * May integrate with existing eligibility managers to leverage pre-defined eligibility rules as exclusion criteria.
    * Could offer the flexibility to create exclusion filters based on combinations of eligibility criteria.

* **Automated Exclusion**:
    * Upon program creation, the module automatically applies the selected exclusion filters to the registry.
    * Flags registrants who meet the exclusion criteria, preventing them from being considered for enrollment in the program.

## Conclusion

The **OpenSPP Exclusion Filter** module streamlines program targeting by introducing a structured approach to excluding ineligible registrants during program creation. Its integration with the OpenSPP program wizard, reliance on registry data, and potential integration with eligibility managers enhance the efficiency and accuracy of program implementation.
</file>

<file path="docs/reference/modules/spp_farmer_registry_base.md">
# OpenSPP Farmer Registry Base

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `spp_farmer_registry_base` module serves as the foundation for managing farmer registries within the OpenSPP system. It builds upon several core OpenSPP modules to provide functionalities specific to farmer registration and farm data management. 

## Purpose

This module aims to:

* Extend the generic registry features to capture data relevant to farmers and their agricultural practices.
* Model the relationships between farmers, farms, land parcels, and agricultural activities.
* Integrate with GIS capabilities to visualize farm locations and land boundaries.

## Module Dependencies and Integration

1. [g2p_registry_membership](g2p_registry_membership): Used to manage memberships between individual registrants and groups.
2. [spp_base_gis](spp_base_gis): Provides the foundation for visualizing and interacting with geospatial data.
3. [spp_land_record](spp_land_record): Enables managing and visualizing land records, linking them to farms and registrants.
4. [g2p_registry_base](g2p_registry_base): Provides the basic structure for managing registrant data, relationships, and identification.
5. [g2p_registry_group](g2p_registry_group): Extends the base registry to handle groups of registrants, such as farmer cooperatives.
6. [g2p_registry_individual](g2p_registry_individual): Extends the base registry with functionalities for managing individual registrant data.

## Functionality and Integration Details

## Farmer Information

* Extends the `res.partner` model (from [g2p_registry_base](g2p_registry_base)) to include farmer-specific details like years of experience, formal agricultural training, household size, etc.
* Introduces a temporary model `spp.farmer` to store farmer-specific information that can be later transferred to the main `res.partner` model, ensuring data consistency.
* Integrates with [g2p_registry_individual](g2p_registry_individual) to leverage existing features for managing individual registrant profiles.

## Farm Management

* Introduces the `Farm` model (inheriting from `res.partner`) to represent individual farms.
* Links farms to land records using the `spp.land.record` model, enabling the tracking of land parcels associated with each farm.
* Allows recording details about farm types, sizes, legal status, and other relevant information.

## Agricultural Activities

* Introduces the `spp.farm.activity` model to record information about agricultural activities undertaken on each farm.
* Captures data on crop cultivation, livestock rearing, and aquaculture practices.
* Links activities to specific land parcels using the `spp.land.record` model, providing a granular view of land use within a farm.

## Farm Assets and Inputs

* Introduces models for managing farm assets (`spp.farm.asset`) and inputs like fertilizers (`spp.fertilizer`), chemicals (`spp.farm.chemical`), and feed items (`spp.feed.items`).
* Allows associating these assets and inputs with specific farms and, optionally, to specific land parcels within a farm.

## GIS Integration

* Leverages the [spp_base_gis](spp_base_gis) module to enable visualization of farm locations and land boundaries on a map.
* Provides a dedicated GIS view for `res.partner` to display farms and their associated land parcels.
* Utilizes GeoJSON representations of land records from [spp_land_record](spp_land_record) to display farm boundaries as data layers on the map.

## Additional Features

* **Extension Services:** Records details about extension services provided to farmers, linked to specific farms and optionally to specific land parcels.
* **Species Information:**  Includes a dedicated model (`spp.farm.species`) for managing information about crop, livestock, and aquaculture species relevant to the registry. 

## Conclusion

The `spp_farmer_registry_base` module, through its integration with various other OpenSPP modules, provides a comprehensive system for creating and managing detailed farmer registries.  It not only facilitates the collection of essential farmer and farm data but also enables spatial analysis and visualization, making it a powerful tool for agricultural development programs and initiatives.
</file>

<file path="docs/reference/modules/spp_farmer_registry_dashboard.md">
# OpenSPP Farmer Registry Dashboard

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `spp_farmer_registry_dashboard` module provides a suite of interactive dashboards and reports to visualize data from the OpenSPP Farmer Registry. It leverages the power of data visualization to offer insights into key metrics and trends related to registered farmers and their agricultural practices. 

## Purpose

This module aims to:

* **Enhance Data Exploration**:  Provide users with intuitive dashboards to easily explore and analyze farmer registry data.
* **Visualize Key Metrics**: Present aggregated statistics and trends in a visually appealing and understandable format.
* **Support Decision-Making**:  Equip stakeholders with the insights needed to make informed decisions regarding agricultural programs and interventions. 

## Module Dependencies and Integration

* **[spp_farmer_registry_base](spp_farmer_registry_base)** : The dashboard module heavily relies on the data models and functionalities provided by [spp_farmer_registry_base](spp_farmer_registry_base). It fetches data about farmers, farm groups, land records, agricultural activities, and other relevant information from this core module.
* **[g2p_registry_membership](g2p_registry_membership)** : Utilizes this module to display data related to group memberships, such as the number of farmers belonging to different types of farmer groups. 
* **[spp_farmer_registry_demo](spp_farmer_registry_demo)** :  While not a strict dependency, the dashboard module is particularly useful when used in conjunction with [spp_farmer_registry_demo](spp_farmer_registry_demo). The demo data provides a rich dataset for the dashboards to visualize, showcasing the module's capabilities.
* **spreadsheet_dashboard**: Leverages the `spreadsheet_dashboard` module to create dynamic and interactive dashboards. This dependency provides the framework for embedding charts and graphs directly within the Odoo interface.
* **[g2p_registry_base](g2p_registry_base)** :  Indirectly depends on this module through its reliance on [spp_farmer_registry_base](spp_farmer_registry_base).  The core registrant data structures and relationships defined in [g2p_registry_base](g2p_registry_base) are essential for the dashboard's functionality.
* **[g2p_registry_group](g2p_registry_group)** :  Utilized indirectly to access and display information about different types of farmer groups, which are defined and managed by this module.
* **[g2p_registry_individual](g2p_registry_individual)** : Also indirectly relied upon to access and visualize data related to individual farmers, such as their demographic information and registration details. 

## Additional Functionality

The `spp_farmer_registry_dashboard` module introduces the following key features:

* **Interactive Dashboards**: The module provides several pre-built dashboards, accessible through the Odoo menu:
    * **Farmer Registry by Month**: Visualizes the number of farmers registered each month, allowing users to track registration trends over time.
    * **Farmer Registry by Legal Status**: Displays the distribution of farmers based on the legal status of their farms (e.g., owned, leased, communal). 
    * **Farmer with/without Training Statistics**: Presents a comparative view of farmers who have received formal agricultural training versus those who have not. 
    * **Sustainable Land & Environmental Management Statistics**:  Visualizes data related to sustainable farming practices, providing insights into the adoption of environmentally friendly methods.
* **Customizable Reports**: The module includes customizable report templates that can be generated in various formats (e.g., PDF, XLSX).  These reports offer more detailed breakdowns of farmer data and can be tailored to specific reporting requirements.
* **Data Filtering and Aggregation**: The dashboards and reports offer filtering options, allowing users to focus on specific subsets of data. For instance, users can filter data by region, farm type, crop type, or other relevant criteria.

## Conclusion

The `spp_farmer_registry_dashboard` module transforms raw data from the OpenSPP Farmer Registry into actionable insights. By providing intuitive dashboards and customizable reports, it empowers stakeholders to analyze trends, identify patterns, and make informed decisions to enhance the effectiveness of agricultural programs and interventions.
</file>

<file path="docs/reference/modules/spp_farmer_registry_demo.md">
# OpenSPP Farmer Registry Demo

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_farmer_registry_demo](spp_farmer_registry_demo) module is a demonstration module for OpenSPP that provides pre-populated data for the farmer registry. It builds upon the [spp_farmer_registry_base](spp_farmer_registry_base) module and its dependencies to showcase the functionalities of the farmer registry with realistic sample data.

## Purpose

This module aims to:

* Populate the farmer registry with sample data, including farmers, groups, farm details, agricultural activities, and assets.
* Provide a starting point for users to explore the farmer registry and its various features.
* Demonstrate how different modules, such as [g2p_registry_membership](g2p_registry_membership), [queue_job](queue_job), and [spp_base_demo](spp_base_demo), integrate to create a comprehensive farmer registry system.

## Module Dependencies and Integration

* **[spp_farmer_registry_base](spp_farmer_registry_base):** This module depends heavily on [spp_farmer_registry_base](spp_farmer_registry_base), inheriting its models and views to extend them with demo data generation capabilities.
* **[g2p_registry_membership](g2p_registry_membership):** Leverages [g2p_registry_membership](g2p_registry_membership) for creating group memberships between individual farmers and farm groups.
* **[queue_job](queue_job):** Uses [queue_job](queue_job) to handle the generation of large datasets in the background, improving performance and user experience.
* **[g2p_registry_base](g2p_registry_base):** Depends on [g2p_registry_base](g2p_registry_base) for the basic registrant models and functionalities.
* **[g2p_registry_group](g2p_registry_group):** Uses [g2p_registry_group](g2p_registry_group) for creating and managing farm groups as registrants.
* **[spp_base_demo](spp_base_demo):** Inherits from [spp_base_demo](spp_base_demo) to include basic demo data, such as genders.
* **[g2p_registry_individual](g2p_registry_individual):** Utilizes [g2p_registry_individual](g2p_registry_individual) for creating individual farmer registrants.

## Additional Functionality

The [spp_farmer_registry_demo](spp_farmer_registry_demo) module introduces the following key functionalities:

* **Sample Data Generation:** The module includes a dedicated model, `spp.generate.farmer.data`, and a corresponding form view for generating sample farmer data. This form allows users to specify:
    * The number of farm groups to generate.
    * The locale for generating realistic data based on specific regions.
    * Once the data generation is triggered, the module creates a queue job that populates the database with realistic farmer data, including:
        * Farm Groups: Groups of farmers with detailed information like family name, national ID, contact details, and education level.
        * Individual Farmers: Members of farm groups with personal information and links to their respective groups.
        * Land Records: Land parcels associated with farm groups, including coordinates and geographical polygons.
        * Agricultural Activities: Details of crop, livestock, and aquaculture activities undertaken by each farm group, linked to specific land parcels.
        * Farm Details: Comprehensive information about farm types, sizes, legal status, infrastructure, technologies, and financial services utilized by each farm group.
        * Farm Assets: Data on farm machinery and other assets owned by each farm group, categorized by type and quantity.

* **Data Realism:**  The module utilizes external libraries like `faker` to generate realistic and region-specific data for names, contact details, and other attributes. This ensures that the sample data reflects real-world scenarios.
* **GIS Integration:** The demo data integrates with the GIS functionalities of [spp_farmer_registry_base](spp_farmer_registry_base) to visualize the generated farms and land parcels on a map, providing a visual representation of the farmer registry.

## Conclusion

The [spp_farmer_registry_demo](spp_farmer_registry_demo) module provides a valuable tool for understanding and demonstrating the functionalities of the OpenSPP farmer registry system. By populating the database with realistic sample data, it allows users to explore the system, understand its data structures, and test its various features without having to manually create large datasets. This module simplifies the process of getting started with OpenSPP and showcases the platform's capabilities for managing comprehensive and detailed farmer registries.
</file>

<file path="docs/reference/modules/spp_idpass.md">
# spp_idpass Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_idpass](spp_idpass) module extends the functionality of the OpenSPP system by providing a seamless way to generate and manage digital ID cards for registrants. It integrates with the existing registry system and leverages external ID Pass API services to produce printable ID cards. 

## Key Features

* **ID Card Generation:** Generates digital ID cards for individual registrants or groups using an external ID Pass API.
* **ID Card Storage:** Stores generated ID cards as PDF attachments on the registrant's profile within the system.
* **ID Pass API Integration:** Configurable settings for connecting with external ID Pass API services, including authentication and data transmission.
* **ID Card Design Customization:**  Allows for setting a file name prefix for generated ID cards and managing the expiry duration for issued IDs.

## Integration with Other Modules

* **[g2p_registry_base](g2p_registry_base):** The module relies on the base registry module for accessing and managing registrant information.
* **[g2p_registry_membership](g2p_registry_membership):**  Utilizes the membership module to handle ID card generation for groups, ensuring the correct identification of the group head. 

## Functionality and Workflow

1. **Configuration:** System administrators configure the connection to the ID Pass API by providing the necessary URLs, credentials, and other settings.
2. **ID Card Issuance:** Authorized users can initiate the ID card generation process for a registrant directly from the registrant's profile.
3. **Data Transmission:** The module securely transmits the required registrant data to the ID Pass API for card generation.
4. **ID Card Retrieval:** Upon successful generation, the module retrieves the ID card in PDF format from the API.
5. **ID Card Storage:**  The generated ID card is automatically attached to the corresponding registrant's profile and can be downloaded or printed as needed.

## Benefits

* **Improved Identification:**  Provides a standardized and verifiable identification method for program beneficiaries.
* **Enhanced Program Efficiency:** Streamlines the identification process, reducing administrative burden and potential errors.
* **Increased Transparency and Accountability:** Creates a digital record of issued ID cards, improving program monitoring and evaluation.

## Note:

This module requires an active subscription and integration with a compatible ID Pass API service.
</file>

<file path="docs/reference/modules/spp_idqueue.md">
# OpenSPP ID Queue

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP ID Queue** module within the OpenSPP ecosystem.  This module adds functionality for managing requests for printed identification cards for registrants. It integrates with other OpenSPP modules to provide a seamless workflow from ID request to printing and distribution.

## Purpose

The **OpenSPP ID Queue** module is designed to:

* **Streamline ID Card Requests**:  Provide a structured process for users to request printed ID cards for registrants, including the ability to select specific ID card templates.
* **Implement Approval Workflows**:  Incorporate optional approval steps for ID card requests, ensuring that requests are reviewed and authorized before generation.
* **Facilitate Batch Printing**:  Group ID card requests into batches for efficient printing and distribution, especially for large-scale programs.
* **Track ID Card Status**:  Monitor the progress of ID card requests through various stages (new, approved, generating, printed, distributed), providing transparency and accountability. 

## Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)** (G2P Registry: Base):  The ID Queue module relies on the **Registrant (res.partner)** model from the **G2P Registry: Base** module to identify and link ID card requests to specific registrants. 

2. **[spp_idpass](spp_idpass)** (OpenSPP ID PASS):  It integrates tightly with the **OpenSPP ID PASS** module, utilizing the predefined ID card templates and the ID generation mechanism.

3. **[queue_job](queue_job)** (Queue Job):  Leverages the **Queue Job** module for background processing of ID card generation, particularly when handling large batches, to avoid impacting system performance.

4. **[spp_area](spp_area)** (OpenSPP Area):  Integrates with the **OpenSPP Area** module to associate ID card requests with specific geographical areas, enabling location-based reporting and distribution management.

5. **[g2p_registry_group](g2p_registry_group)** (G2P Registry: Group): Incorporates functionality from the **G2P Registry: Group** module to support ID card requests and batch printing for groups of registrants.

## Additional Functionality

* **ID Request Queue (`spp.print.queue.id`)**:
    * Introduces a dedicated model to manage individual ID card requests, storing request details, associated registrant, selected template, request status, and approval information.
    * Provides functions to move requests through the workflow: approve, generate, print, distribute, and cancel.
    * Implements a messaging system to record actions taken on requests, enhancing auditability.

* **ID Print Batch (`spp.print.queue.batch`)**:
    * Enables the grouping of approved ID requests into batches for streamlined printing.
    * Offers functionalities to approve, generate, print, and mark batches as distributed.
    * Includes a status tracking system for batches, mirroring the individual request statuses.

* **Auto-Approve Configuration**:
    * Allows administrators to configure the system to automatically approve ID requests upon creation, potentially bypassing the manual approval step for specific workflows.

* **Registrant Integration**:
    * Extends the **Registrant (`res.partner`)** model to include a link to all associated ID card requests, providing a centralized view of a registrant's ID card history. 

## Conclusion

The **OpenSPP ID Queue** module enhances OpenSPP's ID card management capabilities by providing a structured and efficient system for handling ID card requests, approvals, batch printing, and distribution tracking.  Its integration with other core OpenSPP modules ensures a cohesive and streamlined experience for managing registrant identification within social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_import_dci_api.md">
# OpenSPP Import: DCI API

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_import_dci_api](spp_import_dci_api.md) module is an OpenSPP extension that enables the integration of external registries, particularly those adhering to the [DCI (Digital Convergence Initiative)](https://spdci.org/) standard, into the OpenSPP ecosystem. 

## Purpose

This module streamlines the process of importing and synchronizing registrant data from DCI-compliant registries into the OpenSPP registry. This facilitates efficient data sharing and interoperability between different systems. For more information, visit [Digital Convergence Initiative](https://spdci.org/).

## Key Features

* **API Endpoints:**
    *  Exposes RESTful API routes specifically designed for interacting with DCI-compliant systems. 
    *  Handles authentication and authorization for secure data exchange.
* **Data Mapping:**
    *  Maps incoming DCI data fields to the corresponding fields within the OpenSPP registry.
    *  Handles data transformations to ensure compatibility between the two systems.
* **Import Processes:**
    *  Provides automated workflows for importing new registrants and updating existing records.
    *  Includes data validation steps to maintain data integrity within the OpenSPP registry.

## Dependencies and Integration

## 1. G2P Programs ([g2p_programs](g2p_programs.md))

* **Integration:** Utilizes program definitions and eligibility criteria from [g2p_programs](g2p_programs.md) to potentially assign imported registrants to relevant programs based on their DCI attributes. 

## 2. SPP Programs ([spp_programs](spp_programs.md))

* **Integration:** Similar to [g2p_programs](g2p_programs.md), this module might utilize in-kind entitlement logic from [spp_programs](spp_programs.md) if the imported DCI data includes information relevant to in-kind benefits.

## 3. G2P Registry: Base ([g2p_registry_base](g2p_registry_base.md))

* **Integration:**  Relies heavily on [g2p_registry_base](g2p_registry_base.md) for core registry functionality:
    *   **Registrant Creation:** Creates new registrant records using the base model provided by [g2p_registry_base](g2p_registry_base.md).
    *   **ID Management:** Leverages `g2p.reg.id` from [g2p_registry_base](g2p_registry_base.md) to store and manage DCI-provided identifiers.
    *   **Relationships:**  Potentially utilizes the `g2p.reg.rel` model to establish relationships between imported registrants based on DCI data. 

## 4. SPP Registry Data Source ([spp_registry_data_source](spp_registry_data_source.md))

* **Integration:** Depends on [spp_registry_data_source](spp_registry_data_source.md) for:
    * **Data Source Configuration:** Retrieves connection details and API specifications of the external DCI registry from data source configurations defined in this module. 

## 5. G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual.md))

* **Integration:**  Extends the individual registrant model (`res.partner`) from [g2p_registry_individual](g2p_registry_individual.md):
    *   **Data Population:** Populates individual-specific fields within the OpenSPP registry using mapped DCI data (e.g., name, birthdate, gender). 

## Additional Functionality

## CRVS Integration

The module includes specialized components for interacting with CRVS (Civil Registration and Vital Statistics) systems, which are often DCI-compliant. These components include:

* **Location Management:**
    *   Models CRVS-specific location hierarchies (`spp.crvs.location.type`, `spp.crvs.location`).
    *   Imports and synchronizes location data from the CRVS system.
* **Beneficiary Fetching:**
    *   Provides tools (`spp.fetch.crvs.beneficiary`) to search and retrieve beneficiary data from CRVS systems based on specific criteria.
    *   Supports complex search queries using logical operators and field filters. 
* **Data Import and Processing:**
    *   Processes retrieved CRVS data, creating or updating registrant records in OpenSPP (`spp.crvs.imported.individuals`).
    *   Handles the creation of family groups and relationships based on CRVS data. 

## Conclusion

The [spp_import_dci_api](spp_import_dci_api) module enhances the OpenSPP platform by enabling seamless data exchange with external DCI-compliant registries, including specialized integration with CRVS systems. This promotes interoperability, streamlines data management, and expands the potential reach of OpenSPP implementations. For more information, visit [Digital Convergence Initiative](https://spdci.org/).
</file>

<file path="docs/reference/modules/spp_import_match.md">
# OpenSPP Import Match

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

The [spp_import_match](spp_import_match) module enhances the data import functionality within OpenSPP by enabling the matching of imported records with existing records in the database. This helps prevent duplicate entries and ensures data integrity during import processes.

## Purpose

The primary goals of the [spp_import_match](spp_import_match) module are:

- **Prevent Duplicate Records:** Avoid creating duplicate entries for existing registrants or entities during data imports.
- **Improve Data Accuracy:**  Ensure that imported data is linked to the correct existing records, enhancing overall data quality.
- **Streamline Import Processes:** Provide a mechanism for automating record matching, reducing manual reconciliation efforts.

## Dependencies and Integration

1. **[queue_job](queue_job):** This module leverages the [queue_job](queue_job](queue_job](queue_job):** This module leverages the [queue_job) module to handle asynchronous import processes. This enables the processing of large datasets in the background, preventing system slowdowns.

2. **[g2p_registry_base](g2p_registry_base):**  The [spp_import_match](spp_import_match) module extends the functionality of the [g2p_registry_base](g2p_registry_base](g2p_registry_base](g2p_registry_base):**  The [spp_import_match](spp_import_match) module extends the functionality of the [g2p_registry_base) module. It specifically interacts with the models and functionalities related to managing registrant data and relationships.

3. **[base_import](base_import):** The core import functionality is inherited and extended from Odoo's built-in [base_import](base_import) module. [spp_import_match](base_import](spp_import_match](base_import):** The core import functionality is inherited and extended from Odoo's built-in [base_import](base_import) module. [spp_import_match) enhances this with capabilities for record matching during the import process.

## Functionality and Integration

* **Import Matching Rules (spp.import.match):**  This model defines the rules for matching imported data with existing records.  Users can define matching criteria based on various fields and conditions. 
    * It allows specifying which model to match against, ensuring the flexibility to work with different data types.
    * Users can set up multiple fields to match on, creating a robust system for identifying potential duplicates.
    * Conditional matching based on specific import values adds another layer of precision to the process.

* **Field Mapping (spp.import.match.fields):**  This model handles the mapping of fields between the imported data and the target model's fields.
    * It allows for matching on both simple fields and sub-fields within relational fields, supporting complex data structures. 
    * The module validates the uniqueness of fields chosen for matching, preventing configuration errors.

* **Integration with Data Import:** The module seamlessly integrates with the standard Odoo import process. During import, if matching rules are defined for the target model, the module attempts to find existing records that match the imported data.  This matching process is integrated into both standard imports and asynchronous imports handled by the [queue_job](queue_job) module.

* **Overwriting Existing Data:** The module provides an option to overwrite existing data with imported data when a match is found. This allows users to update existing records with new information from imports while still leveraging the matching capabilities to prevent duplicates.

## Workflow Example

1. **Define Matching Rules:** An administrator configures import matching rules for the `res.partner` model (used for registrants) in the `spp.import.match` model. They specify that matching should occur based on the "National ID Number" and "Date of Birth" fields.

2. **Import Data:**  A user initiates a data import for a list of potential beneficiaries. The import file includes fields for "National ID Number", "Date of Birth", and other relevant information.

3. **Record Matching:** During the import process, the [spp_import_match](spp_import_match) module utilizes the defined rules to compare the imported data with existing registrant records.  If a match is found based on the "National ID Number" and "Date of Birth," the module prevents the creation of a duplicate record.

4. **Data Update (Optional):**  If the "Overwrite Match" option is enabled in the matching rules, the module updates the existing registrant's record with any new information from the import file. 

## Conclusion

The [spp_import_match](spp_import_match) module significantly enhances data management within OpenSPP by providing a robust and configurable system for matching imported records with existing data. This contributes to a more accurate, reliable, and efficient data ecosystem for social protection programs.
</file>

<file path="docs/reference/modules/spp_irrigation.md">
# OpenSPP Irrigation

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The OpenSPP Irrigation module enhances the OpenSPP platform by providing tools for managing and visualizing irrigation infrastructure. It builds upon the GIS capabilities provided by the [OpenSPP Base GIS Module](OpenSPP Base GIS Module)(./spp_base_gis.md) to represent irrigation assets spatially. 

This module is particularly valuable for programs and projects that involve:

- **Irrigation Management:** Tracking and monitoring irrigation infrastructure like reservoirs, canals, and potentially even individual irrigation systems. 
- **Water Resource Planning:** Visualizing water sources and their distribution networks to aid in resource allocation and planning.
- **Impact Assessment:** Analyzing the geographic reach of irrigation systems and their impact on agricultural productivity.

## Functionality

The Irrigation module introduces the following key features:

- **Irrigation Asset Model:** A new model (`spp.irrigation.asset`) is introduced to store information about various types of irrigation infrastructure. This model includes fields for:
    - **Name/ID:** A unique identifier for the asset.
    - **Category:**  Classifies the asset (e.g., reservoir). More categories can be added as needed.
    - **Total Capacity:**  Relevant for storage assets like reservoirs.
    - **Coordinates (GeoPoint):**  Stores the precise location of the asset on the map.
    - **Geo Polygon (GeoPolygon):**  Allows defining the area covered by the asset, particularly useful for reservoirs or irrigated zones.
    - **Irrigation Sources/Destinations (Many2Many):**  Establishes relationships between irrigation assets to represent how water flows within the network. 

- **GIS Integration:**  Leveraging the [OpenSPP Base GIS Module](OpenSPP Base GIS Module)(./spp_base_gis.md), the Irrigation module enables:
    - **Visualization:** Irrigation assets can be displayed on the map as points (using coordinates) or polygons (using the GeoPolygon field).
    - **Data Layers:** Users can create dedicated data layers to represent different types of irrigation assets with specific colors, icons, or other styling options.
    - **Spatial Analysis:**  The module allows users to perform spatial queries to find assets within a specific region, identify assets near other points of interest (e.g., farms), and analyze the proximity of irrigation infrastructure to agricultural lands.

## Integration with Other Modules

The OpenSPP Irrigation module is designed to work seamlessly with other modules in the OpenSPP ecosystem:

- **[OpenSPP Base GIS Module](OpenSPP Base GIS Module)(./spp_base_gis.md):** Provides the foundation for GIS visualization and spatial data management.
- **Farmer Registry:** The irrigation assets can be linked to specific farmers or agricultural plots in a farmer registry to understand which farmers have access to irrigation. 
- **Program Targeting and Monitoring:** Information about irrigation access can be factored into program eligibility criteria, and the effectiveness of irrigation interventions can be monitored spatially. 

## Example Use Case

Consider an agricultural development program that aims to improve water access for farmers. The Irrigation module can be used to:

1.  **Map Existing Infrastructure:**  Record the locations and details of existing reservoirs, canals, and other irrigation assets in the program area.
2.  **Plan New Interventions:**  Visualize the locations of water sources and plan the development of new irrigation infrastructure to reach underserved areas.
3.  **Target Beneficiaries:**  Identify farmers located within the service area of specific irrigation systems for program participation.
4.  **Monitor Impact:** Track changes in agricultural productivity in areas with improved irrigation access over time.

## Conclusion

The OpenSPP Irrigation Module is a valuable tool for managing irrigation data, analyzing its spatial distribution, and integrating this information with other OpenSPP modules for improved program planning, targeting, and impact assessment.
</file>

<file path="docs/reference/modules/spp_land_record.md">
# OpenSPP Land Record 

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The **OpenSPP: Land Record** module extends OpenSPP's capabilities to manage and visualize land records. Building upon the [G2P Registry: Base](G2P Registry: Base) and [OpenSPP Base GIS](G2P Registry: Base](OpenSPP Base GIS](G2P Registry: Base) and [OpenSPP Base GIS) modules, it provides a framework for recording land parcels, ownership details, lease agreements, and visualizing these records geospatially. 

## Purpose

This module is designed to:

* Record essential details of land parcels, including size, coordinates, and usage.
* Link land parcels to specific farms and registrants in the OpenSPP system.
* Track land ownership and lease arrangements.
* Visualize land records on maps, leveraging the GIS capabilities of OpenSPP. 

## Functionality and Integration

**OpenSPP: Land Record** extends existing modules with the following features:

1. **Land Record Model (`spp.land.record`):**  This core model stores information about each land parcel, including:

    * **Link to Farm:** Connects the land record to a specific farm (`res.partner`) in the system.
    * **Parcel Details:** Records the parcel's name/ID, acreage, coordinates (point and polygon), and land use type.
    * **Ownership and Lease:**  Links to owner and lessee records (using `res.partner`), along with lease start and end dates. 

2. **Integration with [G2P Registry Base](G2P Registry Base):**  

    * Leverages the `res.partner` model from [G2P Registry Base](G2P Registry Base) to link land records with existing farms, owners, and lessees.
    * Benefits from the robust identification, relationship management, and tagging features provided by [G2P Registry Base](G2P Registry Base). 

3. **Geospatial Visualization:**

    * Integrates with the [OpenSPP Base GIS](OpenSPP Base GIS) module to visualize land records on maps.
    * Provides a `get_geojson` method to generate GeoJSON representations of land records, enabling their display as data layers on maps.
    * Allows users to visualize land parcels, ownership boundaries, and other land-related information in a spatial context.

## Example Use Cases:

* **Land Tenure Mapping:**  Visualize landholding patterns within a region, identifying potential issues related to land fragmentation, insecure tenure, or land disputes.
* **Program Targeting:** Design targeted interventions by identifying farmers or beneficiaries based on land use, size of holdings, or ownership status.
* **Monitoring Land Use Change:** Track changes in land use over time (e.g., conversion of forest to agricultural land), supporting environmental monitoring and sustainable land management initiatives.

## Conclusion

The **OpenSPP: Land Record** module enhances OpenSPP's capacity to manage and analyze land-related data.  By integrating with core registry and GIS functionalities, it provides a valuable tool for policymakers, program implementers, and researchers working on land governance, agricultural development, and social protection in the context of low- and middle-income countries.
</file>

<file path="docs/reference/modules/spp_manual_entitlement.md">
# OpenSPP Manual Entitlement

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Manual Entitlement** module, which extends the OpenSPP system to allow for manual entitlement creation within social protection programs. 

## Purpose

The **OpenSPP Manual Entitlement** module aims to:

* **Enable Manual Entitlement Creation:** Provide a mechanism for program administrators to manually generate entitlements for beneficiaries in cases where automated processes are not suitable. This is particularly useful for programs with specific eligibility criteria or where beneficiary data might not be readily available for automated processing.

* **Integrate with Existing Program Cycles:**  Seamlessly integrate with the existing program cycle structure in OpenSPP, allowing for manual entitlement creation within defined cycle periods.

* **Enhance Flexibility in Entitlement Management:**  Offer a more flexible approach to entitlement management, accommodating situations where automated rules might not cover all beneficiary scenarios. 

## Dependencies and Integration

1. **Queue Job** ([queue_job](queue_job)): Utilizes the Queue Job module for asynchronous processing of entitlement creation, preventing performance issues when handling large numbers of beneficiaries.

2. **G2P Registry: Base** ([g2p_registry_base](g2p_registry_base)):  Depends on the G2P Registry: Base module to access and manage registrant data, ensuring that entitlements are linked to the correct beneficiary profiles.

3. **OpenSPP Registrant Import** ([spp_registrant_import](spp_registrant_import)): Integrates with the OpenSPP Registrant Import module to potentially streamline the process of importing beneficiary lists for manual entitlement creation. 

4. **G2P Programs** ([g2p_programs](g2p_programs)):  Extends the G2P Programs module by adding functionality to create manual entitlements within the existing program and cycle structures.

## Additional Functionality

* **Manual Entitlement Wizard:** 
    * Introduces a wizard that guides users through the manual entitlement creation process.
    * Allows selection of a specific program cycle for which to create entitlements.
    * Provides an interface to either select existing beneficiaries or import a list of beneficiaries for entitlement generation.
    * Includes a step to review and confirm entitlement details before creation.

* **Manual Entitlement Manager:**
    * Extends the `g2p.program.entitlement.manager.default` model to include a flag `is_manual_cash`.
    * Adds a method `manual_prepare_entitlements` to handle the creation of entitlements based on data provided through the wizard.

* **Cycle View Extension:**
    * Modifies the program cycle view to include a button to trigger the manual entitlement wizard.
    * Provides a visual cue within the cycle view to indicate if manual entitlement is enabled for the program. 

## Conclusion

The **OpenSPP Manual Entitlement** module enhances the flexibility of OpenSPP's entitlement management system. By enabling manual entitlement creation, it empowers program administrators to handle situations where automated rules might not be sufficient, ensuring that all eligible beneficiaries receive their entitled benefits.  This module contributes to a more inclusive and adaptable social protection program implementation.
</file>

<file path="docs/reference/modules/spp_oauth.md">
# OpenSPP API: Oauth

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_oauth](spp_oauth) module provides authentication functionality for the OpenSPP API. It allows external applications and services to securely access and interact with OpenSPP data and functionalities using industry-standard OAuth 2.0 protocols.

## Purpose

This module serves as the central authentication hub for the OpenSPP API, ensuring secure and controlled access to sensitive program data. It enables:

- **Secure Authentication:**  Utilizes OAuth 2.0 standards to authenticate API requests, protecting against unauthorized access.
- **Token-Based Access:** Grants access tokens to authorized applications, allowing them to make API calls on behalf of users or with specific permissions.
- **API Security:** Enforces authentication and authorization rules for all incoming API requests, preventing unauthorized data access and manipulation.

## Dependencies

- **base:** The [spp_oauth](spp_oauth) module inherits basic Odoo functionalities from the core `base` module.

## Functionality and Integration

While the [spp_oauth](spp_oauth) module doesn't introduce new user interfaces or data models, it works behind the scenes to secure the OpenSPP API. Here's how it integrates:

1. **API Endpoints:** Other OpenSPP modules that expose API endpoints will depend on [spp_oauth](spp_oauth) to handle the authentication and authorization of incoming API requests.

2. **OAuth 2.0 Flows:** This module implements various OAuth 2.0 flows, enabling different application types to authenticate and obtain access tokens. This could include client credentials flow for machine-to-machine communication or authorization code flow for user-authorized access.

3. **Token Management:**  [spp_oauth](spp_oauth) manages the lifecycle of access tokens, including generation, validation, and revocation, ensuring that only valid tokens can access protected resources.

## Conclusion

The [spp_oauth](spp_oauth) module plays a crucial role in securing the OpenSPP ecosystem by providing robust authentication and authorization mechanisms for the OpenSPP API. It ensures that only authorized applications and users can access and interact with sensitive social protection program data.
</file>

<file path="docs/reference/modules/spp_openid_vci_group.md">
# OpenSPP OpenID VCI Group

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The `spp_openid_vci_group` module extends the functionality of the [spp_openid_vci](spp_openid_vci) module to enable the issuance of Verifiable Credentials (VCs) specifically for groups of registrants, building upon the group management capabilities provided by the [g2p_registry_group](g2p_registry_group) module to enable the issuance of Verifiable Credentials (VCs) specifically for groups of registrants, building upon the group management capabilities provided by the [g2p_registry_group](g2p_registry_group) module. This module leverages the existing VC issuance framework to provide a streamlined process for issuing VCs that represent a group's identity and attributes.

## Purpose

This module's primary purpose is to:

- **Issue Group-Specific VCs:**  Generate and issue VCs that contain information relevant to a registered group, such as the group's name, type, members, or other relevant attributes.
- **Integrate with Group Management:** Seamlessly integrate with the group management functionality provided by the [g2p_registry_group](g2p_registry_group) module, allowing users to issue VCs directly from a group's profile.

## Role and Integration

The `spp_openid_vci_group` module works in conjunction with the following modules:

- **[spp_openid_vci](spp_openid_vci):** Inherits the core VC issuance logic, issuer management, and QR code generation functionality from this module, ensuring consistency in the issuance process for both individuals and groups. 
- **[g2p_registry_group](g2p_registry_group):**  Fetches group-related data, such as group type and member information, to populate the claims within the VCs.  The module also integrates into the group profile view to provide a user-friendly way to issue VCs.

## Additional Functionality

- **Group VCI Issuer Type:** Introduces a new "GroupRegistry" issuer type within the VCI issuer settings, allowing administrators to configure issuers specifically for generating group-related VCs.
- **Group-Specific VC Issuance:** Modifies the VC issuance logic to accommodate group-related data, ensuring that the issued VCs contain information specific to the group, such as group name, type, and potentially a list of members.
- **Group Profile Integration:**  Adds a button to the group profile view within the [g2p_registry_group](g2p_registry_group) module to initiate the VC issuance process directly from the group's record.

## Example Usage Scenario

1. **Configuration:**  An administrator configures a VCI issuer with the type "GroupRegistry" and specifies the data fields for the group VC, including the group name, type, and any other relevant attributes.
2. **Data Retrieval:** When a user initiates the VC issuance process for a group, the module retrieves the necessary information from the group's record, including the group's name, type, and potentially a list of its members.
3. **VC Generation:** The module utilizes the inherited functionality from [spp_openid_vci](spp_openid_vci) to generate the VC, populating it with the retrieved group-specific data. The VC is then digitally signed to ensure its integrity. 
4. **QR Code Generation:** A QR code representing the issued VC is generated and associated with the group's record.
5. **Presentation on Group Profile:** The generated VC or its QR code representation can be displayed on the group's profile within the registry, allowing for easy access and verification.

## Conclusion

The `spp_openid_vci_group` module enhances OpenSPP's Verifiable Credential issuance capabilities by extending them to groups of registrants. It leverages the existing VC infrastructure and seamlessly integrates with the group management functionality to provide a streamlined process for issuing and managing group-specific VCs. This integration further strengthens OpenSPP's ability to provide secure and verifiable digital identities within its ecosystem, encompassing both individual and group-level representations.
</file>

<file path="docs/reference/modules/spp_openid_vci_individual.md">
# OpenSPP OpenID VCI Individual

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module extends the OpenSPP platform's Verifiable Credentials (VC) capabilities to specifically handle VC issuance for **individual registrants**. It seamlessly integrates the OpenID Connect for Verifiable Presentations (OpenID4VP) and Decentralized Identifiers (DIDs) framework with individual registrant data managed within the OpenSPP system.

## Purpose

The `spp_openid_vci_individual` module aims to:

- **Bridge Individual Data with VCs:**  Connect the VC issuance process directly to individual registrant profiles, allowing for the generation of VCs containing individual-specific attributes.
- **Streamline Issuance for Individuals:**  Provide a simplified and dedicated interface within the individual registrant profile for issuing VCs, enhancing user experience.

## Module Dependencies and Integration

1. **[spp_openid_vci](spp_openid_vci)**: This module inherits core functionalities from [spp_openid_vci](spp_openid_vci`](`spp_openid_vci`](`spp_openid_vci)**: This module inherits core functionalities from [`spp_openid_vci`), including:
   - **VCI Issuer Management:** Leverages the existing infrastructure for managing VCI issuers and their configurations.
   - **VC Generation and Signing:** Relies on the parent module's capabilities to generate, sign, and encode VCs based on defined templates and fetched registrant data.
   - **QR Code Generation:** Utilizes the same QR code generation mechanism to visually represent issued VCs for individuals.

2. **[g2p_registry_individual](g2p_registry_individual)**: This module integrates with the individual registry to access and utilize individual-specific data, such as:
   - **Individual Attributes:** Fetches data fields like full name, birthdate, gender, and other relevant attributes from the individual's registry profile to populate the claims within the VC.
   - **Issuance Interface:** Extends the individual registrant's profile view to include an "Issue Card" button, providing a direct and contextual point for VC issuance. 

## Additional Functionality

This module enhances the VC issuance process for individuals by:

- **Contextual Issuance Button:** Introduces an "Issue Card" button directly within the individual registrant's profile view in the registry, making the issuance process more intuitive and user-friendly.
- **Seamless Data Flow:** Automatically retrieves the necessary individual-specific attributes from the [g2p_registry_individual](g2p_registry_individual) module during VC generation, streamlining the issuance workflow.

## Example Usage Scenario

1. An administrator configures a VCI issuer within the [spp_openid_vci](spp_openid_vci) module, defining the format and data fields for a "Proof of Identity" VC intended for individual registrants. 
2. A user navigates to an individual's profile within the OpenSPP registry.
3. The user clicks the "Issue Card" button, which initiates the VC issuance process using the pre-configured "Proof of Identity" template.
4. The module automatically fetches the individual's name, birthdate, and other relevant attributes from the [g2p_registry_individual](g2p_registry_individual) data.
5.  A VC containing the individual's information is generated, signed, and encoded into a QR code, ready for display on a digital card or printed ID. 

## Conclusion

The `spp_openid_vci_individual` module simplifies the issuance and management of Verifiable Credentials for individual registrants within the OpenSPP ecosystem. By tightly integrating with the VC infrastructure and individual registry, it empowers organizations to extend the benefits of verifiable credentials to individuals, enhancing trust and streamlining identity verification processes.
</file>

<file path="docs/reference/modules/spp_openid_vci.md">
# OpenSPP OpenID VCI

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_openid_vci](spp_openid_vci.md) module enhances the functionality of the OpenSPP platform by enabling the issuance of Verifiable Credentials (VCs) to registrants. These VCs, based on OpenID Connect for Verifiable Presentations (OpenID4VP) and Decentralized Identifiers (DIDs), provide a secure and verifiable way to represent claims about a registrant's identity or attributes. 

This module builds upon the capabilities provided by several other modules, including [spp_encryption](spp_encryption.md), [g2p_openid_vci](g2p_openid_vci.md), [g2p_registry_base](g2p_registry_base.md), and [g2p_encryption_rest_api](g2p_encryption_rest_api.md), to offer a comprehensive VC issuance solution. 

## Purpose

This module aims to:

- **Issue Verifiable Credentials:** Generate and issue standardized VCs containing information drawn from the registry data. 
- **Generate QR Codes:**  Create scannable QR codes that encode the issued VCs, allowing for easy verification using mobile devices.
- **Provide a User Interface:** Offer an intuitive interface within the OpenSPP backend for managing VCI issuers and issuing VCs to registrants.

## Role and Integration

The [spp_openid_vci](spp_openid_vci.md) module relies on the foundational elements provided by its dependencies:

- **[spp_encryption](spp_encryption.md):** Leverages this module to digitally sign issued VCs, ensuring their authenticity and integrity.
- **[g2p_openid_vci](g2p_openid_vci.md):**  Utilizes the core VC issuance logic and issuer management functionalities provided by this module.
- **[g2p_registry_base](g2p_registry_base.md):**  Fetches the necessary registrant data (name, address, etc.) from this module to populate the claims within the VCs.
- **[g2p_encryption_rest_api](g2p_encryption_rest_api.md):** This module is not directly utilized by [spp_openid_vci](spp_openid_vci.md) but is essential for external systems to interact with the encryption and VC verification mechanisms.

## Additional Functionality

This module extends the capabilities of its dependencies by adding:

- **VC QR Code Generation:**  It generates and stores QR code representations of issued VCs, directly associating them with registrant records. 
- **ID Card Template:** Includes a customizable ID card template that incorporates the VC QR code, providing a tangible representation of a registrant's verifiable credentials. 
- **Issuance Wizard:** Introduces a user-friendly wizard within the registrant's profile to guide the VC issuance process. This wizard allows users to select the appropriate VCI issuer and generate the VC and corresponding QR code.

## Example Usage Scenario:

1. **Configuration:**  An administrator configures a VCI issuer within the [g2p_openid_vci](g2p_openid_vci.md) module to represent their organization and defines the format and data fields for the VC, including the scope of the credential (e.g., proof of address).
2. **Data Fetching:** When a user initiates the VC issuance process for a registrant, the module retrieves the relevant information from the registrant's profile managed by [g2p_registry_base](g2p_registry_base.md).
3. **VC Generation and Signing:** The module leverages the [g2p_openid_vci](g2p_openid_vci.md) module to construct the VC, populating it with the fetched data. The VC is then digitally signed using the encryption provider configured in the [spp_encryption](spp_encryption.md) module.
4. **QR Code Generation:** A QR code, encoding the signed VC, is generated. This QR code is then associated with the registrant's record.
5. **ID Card Printing (Optional):** Users can opt to print an ID card for the registrant, which includes the generated QR code. This provides a physical credential that can be easily verified using a QR code scanner.

## Conclusion

The [spp_openid_vci](spp_openid_vci) module enhances OpenSPP by providing a streamlined and user-friendly way to issue and manage Verifiable Credentials. By integrating seamlessly with other key modules, it enables organizations to leverage the power of VCs to enhance trust and streamline data sharing within their ecosystems and with external parties.
</file>

<file path="docs/reference/modules/spp_pmt.md">
# OpenSPP Proxy Means Testing

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Proxy Means Testing (spp_pmt)** module, which extends the OpenSPP framework to incorporate Proxy Means Testing (PMT) functionalities. This module allows program implementers to calculate a PMT score for groups of registrants based on specific criteria, aiding in the identification and prioritization of beneficiaries for social protection programs. 

## Purpose

The **spp_pmt** module aims to:

* **Enable Proxy Means Testing**:  Provide the tools to calculate a PMT score for groups of registrants, using weighted criteria relevant to the specific program context.
* **Customize PMT Criteria**:  Allow administrators to define and configure the criteria used in the PMT calculation, tailoring the assessment to their program's needs.
* **Integrate with Existing Registry Data**:  Leverage existing data from the OpenSPP registry modules to perform the PMT calculation, minimizing data duplication and ensuring consistency. 

## Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)** :  The **spp_pmt** module depends on the **G2P Registry: Base** module for access to core registrant data, including group memberships.  It utilizes this data to determine the individuals associated with each group and to retrieve their relevant attributes for the PMT calculation.

2. **[g2p_registry_group](g2p_registry_group)** :  This module leverages the group representation and group kind functionality provided by the **G2P Registry: Group** module. It integrates with group forms to display the calculated PMT score.

3. **[spp_custom_fields_ui](spp_custom_fields_ui)** :  The **spp_pmt** module relies on the **OpenSPP: Custom Fields UI** module to enable the configuration of PMT-specific criteria.  This integration allows administrators to define which custom fields are relevant to the PMT calculation and assign weights to these fields based on their relative importance.

4. **[spp_area](spp_area)** : This module integrates with the **OpenSPP Area** module to factor in geographical variations in the PMT calculation. This allows for more nuanced and context-specific assessments, recognizing that certain criteria may have varying weights depending on the location.

## Additional Functionality

* **PMT Calculation Logic**:  Introduces the core logic for calculating the PMT score. This logic takes into account the following:
    * **Group Memberships**:  Identifies all individuals belonging to a particular group.
    * **Custom Field Weights**:  Retrieves the weights assigned to relevant custom fields, as defined in the **[spp_custom_fields_ui](spp_custom_fields_ui)** module.
    * **Area-Specific Weights**:  Factors in any geographical variations in the weights assigned to custom fields, using data from the **[spp_area](spp_area)** module. 
    * **Score Aggregation**:  Calculates a weighted average of the relevant criteria for each individual within a group, then aggregates these individual scores to determine the overall PMT score for the group.

* **PMT Score Display**:  Extends the group view in the **[g2p_registry_group](g2p_registry_group)** module to display the calculated PMT score for each group. This allows users to quickly assess the relative need of different groups based on the defined PMT criteria.

* **Customizable Criteria**:
    * Leverages the flexibility of the **[spp_custom_fields_ui](spp_custom_fields_ui)** module to enable administrators to define and configure the criteria used in the PMT calculation. 
    * Allows for the inclusion of both individual-level and group-level custom fields in the calculation, providing a comprehensive assessment.

## Conclusion

The **OpenSPP Proxy Means Testing (spp_pmt)** module adds a valuable tool for targeting and prioritizing beneficiaries in social protection programs.  By integrating seamlessly with other OpenSPP modules, it leverages existing registry data and customizable configuration options to provide a flexible and context-specific PMT calculation.
</file>

<file path="docs/reference/modules/spp_pos.md">
# OpenSPP POS

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document details the **OpenSPP POS ([spp_pos](spp_pos))** module within the OpenSPP ecosystem. This module extends the functionality of the Odoo Point of Sale (POS) system to integrate with OpenSPP's core modules, enabling the redemption of entitlements and management of beneficiary transactions at designated points of sale.

## Purpose

The [spp_pos](spp_pos) module bridges the gap between beneficiary entitlements and their realization at physical or virtual points of service. Its primary objectives are:

* **Entitlement Redemption**:  Allows beneficiaries to conveniently redeem their entitled benefits (e.g., cash transfers, in-kind goods) at POS terminals.
* **Secure Identification**:  Integrates with beneficiary identification mechanisms within OpenSPP to ensure secure and accurate transaction processing.
* **Real-time Validation**: Verifies entitlement validity and beneficiary eligibility in real-time at the point of sale.
* **Transaction Tracking**: Records all entitlement redemption transactions, linking them to specific beneficiaries, programs, and POS locations.
* **Offline Capability**:  Supports offline functionality to handle situations where internet connectivity is unreliable, ensuring service continuity. 

## Module Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**:
    * Relies on the base registry for accessing beneficiary data, such as unique identification details and active program participation. This information is essential for beneficiary authentication during POS transactions.

2. **Point of Sale (point_of_sale)**:
    * Extends the core Odoo POS module with additional features tailored for social protection programs.
    * Integrates seamlessly with the existing POS interface, minimizing disruptions to established workflows. 

3. **G2P Programs ([g2p_programs](g2p_programs))**:
    * Interfaces with the G2P Programs module to retrieve and validate entitlement information.
    * Utilizes entitlement data, including type, amount, validity period, and redemption status, to process transactions accurately.

4. **Product (product)**:
    * Leverages the Product module to manage goods or services that can be redeemed using entitlements.
    * Allows for flexible configuration of products specifically designated for social protection programs.

## Additional Functionality

* **Entitlement Product Type**: Introduces a dedicated product type within Odoo to represent entitlements. This categorization distinguishes entitlement redemptions from regular product sales within the POS system.

* **POS Interface Enhancements**: Extends the POS interface with specific features for entitlement redemption:
    * **Beneficiary Identification**:  Provides mechanisms for beneficiary authentication, such as scanning QR codes linked to their OpenSPP profiles or manual entry of identification details.
    * **Entitlement Selection**:  Displays available entitlements for the identified beneficiary, allowing POS operators to select and apply them to the transaction.
    * **Real-time Validation**: Upon entitlement selection, the module communicates with the G2P Programs module to validate its authenticity, current status, and available balance. 
    * **Transaction Completion**:  Processes the redemption, deducting the redeemed amount from the entitlement balance and generating a transaction record within both the POS and OpenSPP systems.

* **Offline Mode Operations**: In scenarios with limited or no internet connectivity:
    * The module enables offline transaction processing by storing entitlement data locally. 
    * Once connectivity is restored, offline transactions are synchronized with the central OpenSPP system, ensuring data consistency and accurate reporting. 

## Conclusion

The [spp_pos](spp_pos) module plays a crucial role in the OpenSPP ecosystem by bridging the gap between entitled benefits and their practical utilization. By integrating with core OpenSPP modules and extending the Odoo POS system, it enables secure, transparent, and efficient delivery of social protection benefits at designated points of service. This integration streamlines the beneficiary experience while providing program administrators with real-time visibility into program utilization and impact.
</file>

<file path="docs/reference/modules/spp_program_id.md">
# OpenSPP Program ID

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Program ID** module, an extension to the OpenSPP platform. This module enhances the existing **OpenG2P: Programs** functionality by adding unique, system-generated IDs to each program for improved tracking and reference.

## Purpose

The **OpenSPP Program ID** module aims to:

* **Provide Unique Program Identification**:  Generate and assign a distinct ID to each program, allowing for easy identification and reference.
* **Enhance Data Management**:  Improve the organization and management of program data by introducing a standardized identification system.
* **Facilitate Integration**: Enable seamless integration with other systems or modules by providing a consistent program identifier.

## Module Dependencies and Integration

1. **[spp_programs](spp_programs)**: 
    * Leverages the core program management features provided by the OpenSPP Programs module.
    * Extends program models and views to incorporate the program ID field.

2. **[g2p_programs](g2p_programs)**: 
    * Builds upon the program structure and functionality provided by the G2P Programs module.
    * Integrates with program views to display the generated program ID.

## Additional Functionality

* **Program ID Generation**: 
    * Automatically generates a unique program ID using a defined sequence (`program.id.sequence`) upon program creation.
    * Ensures that each program has a distinct identifier.

* **Program ID Field**: 
    * Introduces a new field, `program_id`, in the `g2p.program` model to store the generated unique ID.
    * Makes the `program_id` field read-only to prevent accidental modification.

* **View Integration**:
    * Integrates the `program_id` field into relevant program views:
        * **Search Filter**: Adds `program_id` as a search filter option in the program list view.
        * **List View**: Displays the `program_id` alongside other program details in the program list view. 
        * **Form View**: Shows the `program_id` prominently within the program form view.

## Conclusion

The **OpenSPP Program ID** module enhances the OpenSPP platform by providing a simple yet powerful mechanism for uniquely identifying programs. This enhancement contributes to better data management, easier referencing, and smoother integration with other systems, ultimately improving the efficiency and usability of the OpenSPP platform.
</file>

<file path="docs/reference/modules/spp_programs_compliance_criteria.md">
# OpenSPP Programs: Compliance Criteria

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Programs: Compliance Criteria** module, an extension to the OpenSPP framework. This module adds functionality to manage compliance criteria within social protection programs. 

## Purpose

The **OpenSPP Programs: Compliance Criteria** module allows program administrators to define and enforce additional eligibility requirements beyond the initial criteria defined in the [g2p_programs](g2p_programs) module. This ensures that beneficiaries continuously meet specific conditions throughout their program participation. 

## Module Dependencies and Integration

1. [g2p_registry_base](g2p_registry_base): Leverages basic registrant information and relationships defined in the base registry module.

2. [g2p_programs](g2p_programs): 
    * Extends the program management features by introducing compliance managers and actions related to compliance checks. 
    * Integrates with program cycles to apply compliance filtering during beneficiary enrollment and cycle management.

3. [spp_area](spp_area): Utilizes geographical area information to define compliance criteria based on a beneficiary's location.

4. [spp_programs](spp_programs): Works in conjunction with the OpenSPP Programs module to apply compliance criteria to both cash and in-kind programs.

5. [spp_eligibility_sql](spp_eligibility_sql): Integrates with the SQL-based eligibility manager to allow for complex, dynamic compliance criteria based on SQL queries.

6. [spp_eligibility_tags](spp_eligibility_tags): Utilizes tag-based eligibility rules as potential compliance criteria, adding another layer of flexibility.

## Additional Functionality

* **Compliance Managers (spp.compliance.manager)**: A new model that links to specific eligibility managers (SQL-based, Tag-based, etc.) and defines them as compliance criteria for a program. 
* **Program Compliance Configuration (g2p.program)**: Extends the program model to include a list of compliance managers, defining the specific criteria that beneficiaries must meet.
* **Cycle-level Compliance Filtering (g2p.cycle)**: Adds actions to program cycles, allowing administrators to trigger compliance checks and filter beneficiaries accordingly. 
* **Automated Compliance Verification**: Provides configurable options to automate compliance checks:
    * **On Cycle Membership Creation**:  Automatically verifies compliance when a registrant is initially added to a program cycle.
    * **On Entitlement Creation**:  Verifies compliance before an entitlement is generated for a beneficiary.
* **Beneficiary State Management**:  Transitions beneficiaries between 'enrolled' and 'paused' states within a program cycle based on their compliance status.

## Conclusion

The **OpenSPP Programs: Compliance Criteria** module adds a crucial layer of control and flexibility to program management within OpenSPP. By allowing administrators to define and enforce ongoing compliance criteria, it ensures program integrity, targets benefits more effectively, and strengthens accountability within social protection programs.
</file>

<file path="docs/reference/modules/spp_programs_sp.md">
# OpenSPP Programs: Service Points Integration

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP Programs (Service Points Integration)** module, which extends the OpenSPP platform to integrate the management of service points within social protection programs. This module enables programs to link entitlements and beneficiaries with designated service points, streamlining the delivery of benefits and improving program efficiency. 

## Purpose

The [spp_programs_sp](spp_programs_sp) module bridges the functionality of the [OpenSPP Programs](OpenSPP Programs) module and the [OpenSPP Service Points](OpenSPP Service Points) module, providing a seamless way to incorporate service point information into program operations. This integration is particularly beneficial for programs involving in-kind distributions or requiring beneficiaries to interact with designated service providers.

## Role and Functionality

Building upon its dependencies, this module focuses on enhancing program management with service point integration:

* **[OpenSPP Service Points](spp_service_points)**: This module provides the framework for managing service point data, including location, contact information, and operational status. The [spp_programs_sp](spp_programs_sp) module leverages this data to associate service points with programs and entitlements.
* **[OpenSPP Programs](spp_programs)**:  This module defines the core structure and management of social protection programs, including program cycles, eligibility criteria, and entitlement management. The [spp_programs_sp](spp_programs_sp) module extends this functionality to incorporate service point information into the entitlement generation and distribution process.
* **[OpenSPP Program Entitlement (Cash)](spp_entitlement_cash)**: This module specializes in managing cash-based entitlements. The [spp_programs_sp](spp_programs_sp) module extends this to optionally link cash entitlements with service points, potentially for cash pickup or other service-related interactions. 
* **[OpenSPP In-Kind Entitlement](spp_entitlement_in_kind)**: This module manages the distribution of in-kind benefits. The [spp_programs_sp](spp_programs_sp) module enhances this by associating in-kind entitlements with specific service points for beneficiary redemption.
* **[G2P Programs](g2p_programs)**:  This module provides the foundational program management features upon which [OpenSPP Programs](OpenSPP Programs) builds. The [spp_programs_sp](spp_programs_sp) module inherits this foundation, extending it with service point integration. 

## Key Features

1. **Program Configuration:**
    * Extends the `g2p.program` model from [G2P Programs](G2P Programs) to include a configuration option (`store_sp_in_entitlements`) that determines whether service points should be stored with entitlements.
    * This allows program administrators to enable or disable service point integration based on the specific needs of the program.

2. **Entitlement Manager Enhancement:**
    * Modifies the entitlement manager models (`g2p.program.entitlement.manager.default`, `g2p.program.entitlement.manager.cash`, `g2p.program.entitlement.manager.inkind`) to include service point information when generating entitlements.
    * If enabled in the program configuration, the entitlement manager will automatically associate the beneficiary's designated service points with their entitlement records. 

3. **Entitlement Model Extension:**
    * Extends the `g2p.entitlement` and `g2p.entitlement.inkind` models from [G2P Programs](G2P Programs) and [OpenSPP In-Kind Entitlement](OpenSPP In-Kind Entitlement) respectively, adding a field (`service_point_ids`) to store the service points linked to the entitlement. 

4. **User Interface Integration:**
    * Modifies the program configuration view to include the `store_sp_in_entitlements` option.
    * Extends the entitlement views to display the associated service points, providing visibility into the designated redemption locations.

## Benefits

* **Targeted Benefit Delivery:**  Enables programs to direct beneficiaries to specific service points for receiving benefits, improving the efficiency of distribution and reducing confusion.
* **Enhanced Service Provision:** Facilitates the coordination of services by linking entitlements with service providers, allowing for better tracking and management of service delivery.
* **Improved Data Management:** Integrates service point information directly into the entitlement management process, ensuring data consistency and facilitating more comprehensive reporting and analysis. 
* **Streamlined Operations:**  Automates the association of service points with entitlements, reducing manual data entry and minimizing errors.

## Conclusion

The [OpenSPP Programs (Service Points Integration)](OpenSPP Programs (Service Points Integration)) module enhances the OpenSPP platform by seamlessly integrating service point management with the core program functionalities. This integration is particularly valuable for programs involving in-kind distributions, service provision, or requiring designated points of interaction between beneficiaries and program implementers. By connecting beneficiaries, entitlements, and service providers, this module contributes to a more efficient, transparent, and beneficiary-centric approach to social protection program delivery.
</file>

<file path="docs/reference/modules/spp_programs.md">
# OpenSPP Programs

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Programs** module.  This module extends the **OpenG2P: Programs** functionality, introducing in-kind entitlement management alongside existing cash-based features.

## Purpose

The **OpenSPP Programs** module aims to:

* **Manage In-Kind Entitlements**:  Introduce the concept of in-kind entitlements alongside cash entitlements, allowing programs to distribute goods and services.
* **Integrate with Inventory**: Link in-kind entitlements to the Odoo Inventory module, enabling stock management, procurement, and tracking of distributed items.
* **Enhance Existing Program Features**: Extend OpenG2P's program management with capabilities tailored for in-kind distributions.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)** : Leverages the base registry for core registrant information and extends it by adding in-kind entitlement tracking to registrant profiles.

2. **[g2p_programs](g2p_programs)**: 
    * Builds upon the core program management features, including program creation, cycle management, and eligibility determination.
    * Extends program views to incorporate in-kind entitlement data and actions.

3. **[spp_area](spp_area)**: Integrates with the area module to associate service points for in-kind entitlement redemption with specific geographical areas.

4. **Product (product)**: Utilizes the product module to define the goods and services offered as part of in-kind entitlements, leveraging existing product information and categorization.

5. **Stock (stock)**: 
    * Links in-kind entitlements to the stock module, enabling the generation of stock movements upon entitlement approval.
    * Allows for the tracking of inventory levels, procurement needs, and the flow of goods from warehouses to beneficiaries.

## Additional Functionality

* **In-Kind Entitlement Model (g2p.entitlement.inkind)**: Introduces a new model specifically for managing in-kind entitlements, capturing data such as:
    * **Product**: The specific good or service being distributed.
    * **Quantity**: The number of units entitled to the beneficiary.
    * **Unit Price**: The value of each unit for accounting and reporting.
    * **Warehouse**:  The location from which the item will be distributed.
    * **Service Point**: The designated point where beneficiaries can redeem their entitlements.

* **Inventory Integration**:
    * When an in-kind entitlement is approved:
        * A procurement request is automatically generated within the stock module.
        * Stock movements are triggered to transfer the goods from the warehouse to the designated service point.

* **Extended Program Views**:
    * Program views are modified to display both cash and in-kind entitlement counts.
    * New tabs and fields within program forms provide visibility into in-kind entitlement details. 

* **Registrant Profile Enhancements**:
    * Registrant profiles now include a dedicated section for tracking in-kind entitlements, listing past and current entitlements.
    * Provides a consolidated view of a registrant's benefits, encompassing both cash and in-kind distributions. 

* **Reporting**:
    * The module includes new reports specifically designed for in-kind entitlements, providing insights into:
        * Distribution of goods and services.
        * Inventory levels and procurement needs.
        * Service point activity and redemption rates.

## Conclusion

The **OpenSPP Programs** module significantly expands the OpenG2P platform's capabilities by incorporating in-kind entitlement management.  This integration with inventory management and the enhancements to existing program features make OpenSPP a comprehensive solution for managing a wider range of social protection and agricultural support programs.
</file>

<file path="docs/reference/modules/spp_registrant_import.md">
# OpenSPP Registrant Import

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document describes the **OpenSPP Registrant Import** module, which enhances the import functionality within the OpenSPP system, specifically focusing on streamlining the process of importing registrant data. It builds upon the existing import capabilities and introduces features to improve data mapping and ID management.

## Purpose

The **OpenSPP Registrant Import** module aims to:

* **Simplify Data Mapping**: Provide a more intuitive way to map imported data fields to corresponding fields in OpenSPP's registrant models. This reduces the complexity of data preparation and ensures accurate data import.
* **Enhance ID Management**: Introduce a mechanism to generate and assign unique OpenSPP IDs (spp_id) to registrants during the import process. This ensures data integrity and facilitates efficient tracking and management of registrants within the system. 

## Dependencies and Integration

1. **OpenSPP Base** ([spp_base](spp_base)):  Inherits core functionalities from the **OpenSPP Base** module, including access to registrant models and configurations. 

2. **OpenSPP Service Points** ([spp_service_points](spp_service_points)): Leverages the **OpenSPP Service Points** module to associate imported service point data with existing service points in the system using unique IDs. 

3. **OpenSPP Area** ([spp_area](spp_area)): Integrates with the **OpenSPP Area** module to link imported registrant data to specific geographical areas based on unique IDs.

4. **G2P Registry: Group** ([g2p_registry_group](g2p_registry_group)): Works in conjunction with the **G2P Registry: Group** module to facilitate the import of group registrant data and manage group IDs. 

5. **G2P Registry: Individual** ([g2p_registry_individual](g2p_registry_individual)):  Integrates with the **G2P Registry: Individual** module to import individual registrant data and assign individual-specific IDs. 

## Additional Functionality

* **Unique ID Generation and Assignment**: 
    * Automatically generates unique OpenSPP IDs (spp_id) for registrants during import if an ID is not provided in the import file.
    * Adheres to a predefined format for spp_id based on the registrant type (individual, group, service point, area) ensuring consistency.

* **Improved Data Mapping**:
    * Enhances the existing import mapping interface to allow users to directly map columns from their import file to the corresponding fields in OpenSPP's registrant models. 
    * Provides visual cues and validation during the mapping process to minimize errors and ensure accurate data association.

## Conclusion

The **OpenSPP Registrant Import** module streamlines the process of importing registrant data into the OpenSPP system. By simplifying data mapping and automating unique ID generation and assignment, this module enhances data integrity, reduces manual effort, and improves the overall efficiency of data management within OpenSPP.
</file>

<file path="docs/reference/modules/spp_registrant_tag.md">
# OpenSPP Registrant Tags

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Registrant Tags** module within the OpenSPP ecosystem. This module extends the tagging capabilities of the [g2p_registry_base](g2p_registry_base) module, enabling more organized and efficient management of registrant data.

## Purpose

The **OpenSPP Registrant Tags** module aims to:

* Provide a user-friendly interface for creating and managing tags specifically for registrants.
* Enhance the organization and categorization of registrants within the OpenSPP system.
* Facilitate efficient searching and filtering of registrants based on assigned tags.

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base)**: This module builds upon the foundational registry functionalities provided by the **G2P Registry: Base** module. It leverages the existing tagging infrastructure within that module to ensure seamless integration.

## Functionality

The **OpenSPP Registrant Tags** module primarily focuses on providing a dedicated interface for managing registrant tags. This includes:

* **Creating New Tags**: Users can easily define and create new tags relevant to categorizing registrants based on specific criteria (e.g., program eligibility, demographic information, geographic location).
* **Assigning Tags to Registrants**:  When adding or editing registrant information, users can select and assign relevant tags from the available list. 
* **Filtering and Searching by Tags**:  The module enables users to quickly search for registrants associated with specific tags.  This streamlines data management and analysis within the registry.

## Conclusion

The **OpenSPP Registrant Tags** module, while seemingly simple, provides valuable functionality for organizing and managing large datasets of registrants within OpenSPP. By offering a focused approach to registrant tagging, it enhances the usability and efficiency of the overall registry system.
</file>

<file path="docs/reference/modules/spp_registry_data_source.md">
# OpenSPP Data Source

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The SPP Data Source module provides a framework for integrating external data sources into the OpenSPP system. This module enables OpenSPP to connect to and retrieve data from external systems, including farmer registries, social protection programs, and other relevant data sources.

## Purpose

This module aims to streamline the process of importing and utilizing external data within the OpenSPP ecosystem. By providing a centralized configuration point for external data sources, this module simplifies the data integration process for system administrators and developers.

## Key Features

- **Data Source Configuration:** The module allows administrators to define and configure external data sources within OpenSPP. Each data source configuration can include:
    - **Name:** A descriptive name for the data source.
    - **URL:** The base URL of the external system's API endpoint.
    - **Authentication Type:** The authentication method used by the external API (e.g., Basic Authentication, Bearer Authentication, API Keys).
    - **URL Paths:** Specific endpoints within the API for accessing different resources.
    - **Parameters:** Key-value pairs representing required parameters for API requests.
    - **Field Mapping:** A mapping between fields in OpenSPP and corresponding fields in the external data source.

- **Data Retrieval and Integration:** The module provides utilities for retrieving data from configured data sources using the defined authentication methods and parameters. The field mapping configuration ensures that the retrieved data is correctly mapped to the relevant fields within OpenSPP.

- **Code Reusability:** The module promotes code reusability by providing a consistent and standardized approach to accessing external data sources. Developers can leverage these features to integrate new data sources without rewriting boilerplate code.

## Integration with Other Modules

The SPP Data Source module acts as a foundational component for other OpenSPP modules that require integration with external data sources. For example:

- **[Module Name](Module Name):** Can leverage the data source configurations and retrieval mechanisms provided by this module to import data from external farmer registries.
- **[Module Name](Module Name):** Can use this module to connect to social protection program databases and retrieve beneficiary information.

## Conclusion

The SPP Data Source module plays a crucial role in extending the functionality and reach of the OpenSPP platform. By enabling seamless integration with external data sources, this module empowers OpenSPP to provide a more comprehensive and data-driven approach to managing social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_registry_group_hierarchy.md">
# OpenSPP Registry Group Hierarchy

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module builds upon the existing OpenSPP group and membership management functionalities to introduce a hierarchical structure for groups. It allows groups to be nested within other groups, creating a parent-child relationship between them.  This hierarchy is beneficial for representing complex organizational structures within social protection programs or farmer registries. 

## Purpose

The **SPP Registry Group Hierarchy** module aims to:

* **Enable Group Nesting**: Allow groups to be members of other groups, creating a multi-level hierarchical structure.
* **Flexible Membership**:  Allow both individuals and groups to be members of a group, providing flexibility in representing different organizational models.
* **Enhanced Data Management**: Improve the organization and management of groups by providing a visual representation of the group hierarchy. 

## Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**: Inherits core registry functionalities for managing registrant information, IDs, and relationships. 

2. **G2P Registry: Group ([g2p_registry_group](g2p_registry_group))**: Leverages the group model to represent both parent and child groups within the hierarchy. 

3. **G2P Registry: Individual ([g2p_registry_individual](g2p_registry_individual))**: Uses the individual model to maintain individual memberships within groups, regardless of the group's position in the hierarchy. 

4. **G2P Registry: Membership ([g2p_registry_membership](g2p_registry_membership))**:  Extends the membership functionality to allow groups to be members of other groups, establishing the parent-child relationship.

## Additional Functionality 

* **Flexible Group Membership (`g2p.group.kind`)**:
    * Introduces a new field (`allow_all_member_type`) in the `g2p.group.kind` model.
    * This field allows administrators to define whether a specific group type can have both individual and group members.

* **Dynamic Individual Domain (`g2p.group.membership`)**:
    * Modifies the individual selection field within the `g2p.group.membership` model to dynamically adjust its options based on the group's type.
    * If a group type allows both individual and group members, the individual selection field will display all registrants (excluding the group itself to prevent circular relationships).
    * If a group type only allows individual members, the field will display only individuals.

* **Unified Member View (`g2p.group.membership`)**:
    * Introduces a modified form view for `g2p.group.membership`.
    * This view provides a unified interface for managing both individual and group memberships within a parent group.
    * It dynamically displays relevant information based on whether the member is an individual or another group.

* **Enhanced User Interface**:
    * Extends the group form view to visually represent the group hierarchy, allowing users to easily navigate between parent and child groups.
    * Provides clear indicators of a group's parent and child groups.

## Conclusion

The **SPP Registry Group Hierarchy** module adds significant value to OpenSPP by introducing the concept of nested groups. This allows for a more accurate and organized representation of complex structures commonly found in social protection programs and farmer cooperatives.  The module integrates seamlessly with existing OpenSPP components, providing a user-friendly experience for managing multi-level group structures.
</file>

<file path="docs/reference/modules/spp_scan_id_document.md">
# OpenSPP Registry: Scan ID Document

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the functionality of the **OpenSPP Registry - Scan ID Document** module. This module enhances the registrant registration process by enabling users to scan physical ID documents directly into a registrant's profile. 

## Purpose

The **OpenSPP Registry - Scan ID Document** module aims to:

* **Streamline data entry:** Eliminate the need for manual input of ID document details, reducing errors and saving time.
* **Improve data accuracy:** Capture information directly from the source, ensuring the fidelity of ID data.
* **Enhance user experience:** Provide a convenient and intuitive way for users to associate scanned ID documents with registrant records. 

## Module Dependencies and Integration

1. **[g2p_registry_base](g2p_registry_base):** Utilizes the base registrant model to store and manage the scanned ID document data.
2. **[g2p_registry_individual](g2p_registry_individual):** Integrates with the individual registrant form to provide a seamless document scanning experience. 

## Additional Functionality

* **ID Document Scanning Widget:** Introduces a new widget ("id_document_reader") on the individual registrant form. This widget allows users to initiate the scanning process for physical ID documents. 
* **Data Extraction and Storage:**  Upon scanning, the module extracts relevant information from the ID document, such as name, date of birth, and ID number. This extracted data is then automatically populated into the corresponding fields within the registrant's profile. 
* **Document Image Storage:** The scanned ID document is stored as an image file linked to the registrant's record, allowing for future reference and verification.

## User Interface Changes

The module adds a new button labeled "Scan Document" to the individual registrant form. Clicking this button activates the ID document scanning widget, enabling users to scan physical documents directly into the system.
</file>

<file path="docs/reference/modules/spp_service_point_device.md">
# OpenSPP Service Point Device

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP Service Point Device** module, which extends the functionality of the **[spp_service_points](spp_service_points)** module to manage terminal devices associated with each service point. It allows for the registration and tracking of devices used at service points, including their model, Android version, and active status.

## Purpose

The **OpenSPP Service Point Device** module aims to:

* **Track Terminal Devices:**  Maintain a record of all terminal devices used at each service point within the OpenSPP system.
* **Manage Device Information:** Store relevant details about each device, such as the model, Android version, and a unique external identifier.
* **Monitor Device Status:** Track the active status of devices to identify and manage any inactive or unavailable devices.
* **Integrate with Service Points:** Seamlessly connect device information to its corresponding service point for centralized management and reporting.

## Dependencies and Integration

1. **[spp_service_points](spp_service_points)**: This module directly builds upon the **OpenSPP Service Points** module. It utilizes the `spp.service.point` model to link devices to their respective service points using the `service_point_id` field.

## Additional Functionality

* **Device Management (spp.service.point.device):**
    * Introduces a new model (`spp.service.point.device`) specifically for managing terminal device information.
    * Provides fields to capture device-specific details like model, Android version, external identifier, and active status.
    * Enables users to activate or deactivate devices and provides a visual indicator of their status.

* **Service Point Integration:**
    * Extends the `spp.service.point` model with a new button to access and manage the associated terminal devices.
    * Offers a dedicated view to list and manage all devices linked to a specific service point.

## Conclusion

The **OpenSPP Service Point Device** module enhances the OpenSPP system by providing a structured way to manage and monitor terminal devices deployed at various service points. By centralizing device information and linking it to service points, this module contributes to better hardware resource management and supports the efficient operation of social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_service_points.md">
# OpenSPP Service Points

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This document outlines the **OpenSPP Service Points** module, which adds functionality to manage service points and their agents within the OpenSPP ecosystem. It enables the registration and tracking of service points, their associated areas, offered services, and their connection to company entities and their respective contacts.

## Purpose

The **OpenSPP Service Points** module is designed to:

* **Manage Service Point Information**: Store and manage details about each service point, including their name, location, contact information, and operational status.
* **Associate Service Points with Areas**: Link service points to specific geographical areas defined in the [spp_area](spp_area) module, enabling location-based management and reporting.
* **Define and Assign Service Types**:  Categorize service points based on the types of services they provide, facilitating targeted program delivery and monitoring.
* **Connect with Company Entities**: Establish a relationship between service points and formal company entities within the system.
* **Manage User Accounts for Contacts**: Facilitate the creation and management of user accounts for individuals associated with the company linked to a service point.

## Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base))**: Leverages the core registrant management features provided by the **G2P Registry: Base** module.  This includes the use of the `res.partner` model to represent both companies and individuals associated with service points.

2. **OpenSPP Area ([spp_area](spp_area))**: Integrates with the **OpenSPP Area** module to associate service points with specific geographic areas.  The `area_id` field on the `spp.service.point` model links a service point to an area defined in the **OpenSPP Area** module.

3. **Phone Validation (phone_validation)**: Utilizes the **Phone Validation** module to ensure phone numbers associated with service points are properly formatted and validated.

4. **Auth Signup (auth_signup)**: Integrates with the **Auth Signup** module to streamline the creation of user accounts for contacts associated with companies linked to service points.

## Additional Functionality

* **Service Point Management (spp.service.point)**: 
    * Introduces a dedicated model (`spp.service.point`) for storing and managing service point data.
    * Tracks service point operational status (active/disabled) and maintains a history of status changes.
    * Provides functionality to disable and enable service points, recording reasons for disabling. 

* **Service Type Definition (spp.service.type)**:
    * Includes a model (`spp.service.type`) for defining and managing different categories of services offered by service points.

* **User Account Creation**:
    * Offers a streamlined process to automatically create user accounts for contacts associated with the company linked to a service point.
    * Assigns appropriate security groups to newly created users to manage access permissions.

## Conclusion

The **OpenSPP Service Points** module streamlines the management of service points and their agents within the OpenSPP system. It provides a structured approach to track service point details, connect them to geographical locations and company entities, and manage user accounts for individuals involved in service delivery. This contributes to a more organized and efficient operation of social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_starter.md">
# OpenSPP Starter Module

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

This module serves as the starting point for configuring and launching a new OpenSPP instance. It doesn't introduce any specific business logic or data models related to social protection programs or farmer registries. Instead, it focuses on providing a basic setup and customization options for the OpenSPP platform.

## Functionality

* **Configuration:** The module allows administrators to enable or disable the display of a custom menu entry that directs users to the OpenSPP modules and functionalities.
* **User Interface:** It can replace the standard Odoo "Management" menu with a dedicated OpenSPP menu, guiding users towards the relevant features for managing social protection programs and farmer registries.

## Dependencies

* **base:** This module depends on the Odoo base module, inheriting its functionality for menus and user interface elements.

## Integration

The [spp_starter](spp_starter) module doesn't directly integrate with other specific modules related to social protection or farmer registries. However, it acts as a foundation upon which other modules can build and extend the platform's capabilities. By modifying the menu structure and providing configuration options, it prepares the system for the installation and utilization of more specialized modules. 

## Key Components

* **ir.config_parameter:** Utilizes configuration parameters to control the visibility of the OpenSPP menu entry, allowing administrators to customize the user experience based on the specific implementation needs.
* **ir.ui.menu:** Inherits from the `ir.ui.menu` model to override the default menu visibility, replacing the standard "Management" menu with an OpenSPP-specific menu when configured.

## Usage

Once the module is installed, administrators can configure the visibility of the OpenSPP menu entry by accessing the system parameters. Depending on the chosen configuration, users will see either the standard Odoo "Management" menu or a custom OpenSPP menu, guiding them to the relevant sections for managing social protection programs and farmer registries.
</file>

<file path="docs/reference/modules/spp_user_roles.md">
# OpenSPP User Roles

```{warning}

**Work in Progress**: This document is actively being developed and updated. Content may be incomplete or subject to change.
```

## Overview

The [spp_user_roles](spp_user_roles.md) module enhances the user role management capabilities of OpenSPP, providing a more granular and context-aware approach to user permissions. It builds upon the base user role system in Odoo and introduces the concept of "local" roles, allowing administrators to assign permissions based on specific geographical areas.

## Purpose

This module aims to:

- **Define Local Roles:** Introduce the concept of roles that are specific to a particular geographical area (e.g., Center Area).
- **Restrict User Access:**  Limit the access of users with local roles to data and operations within their assigned areas.
- **Enhance Data Security:** Improve data security by ensuring that users can only view and modify information relevant to their assigned locations. 

## Dependencies and Integration

1. **G2P Registry: Base ([g2p_registry_base](g2p_registry_base.md)):**  This module indirectly depends on the `res.partner` model from the G2P Registry: Base module, as it modifies the access rules for registrant data based on a user's assigned areas.

2. **G2P Registry: Group ([g2p_registry_group](g2p_registry_group.md)):**  Similar to the Base module, it impacts access to group registrant data based on area assignments.

3. **G2P Programs ([g2p_programs](g2p_programs.md)):**  The module's area-based access control can be applied to program-related data, ensuring that users with local roles only see and manage programs operating within their designated areas.

4. **OpenSPP Area ([spp_area](spp_area.md)):**  The module heavily relies on the area hierarchy defined in the [spp_area](spp_area.md) module. Local roles are directly associated with specific areas, and user access is restricted accordingly.

5. **OpenSPP ID Queue ([spp_idqueue](spp_idqueue.md)):**  Integrates with the ID Queue module to control access to ID card requests and batches based on area assignments, ensuring that users only manage requests originating from their designated locations.

6. **Base User Role (base_user_role):**  Extends the base Odoo module for user role management, inheriting its core functionalities and adding the area-based restrictions.

7. **OpenSPP API ([spp_api](spp_api.md)):**  The module's access control mechanism is integrated with the OpenSPP API, ensuring that API requests from users with local roles are filtered to return only data within their authorized areas.

## Additional Functionality

* **Role Type (role_type):** 
    * Adds a new field to the `res.users.role` model to distinguish between "global" roles (with system-wide access) and "local" roles (restricted to specific areas).

* **Local Area (local_area_id):** 
    * Introduces a field in the `res.users.role.line` model to associate local roles with specific areas.
    * This field is only visible and editable for roles marked as "local."

* **Center Area IDs (center_area_ids):**
    * Adds a computed field to the `res.users` model to store the areas assigned to a user through their local roles.

* **Area-Based Data Filtering:**
    * Modifies the search methods for models like `res.partner` to automatically include area-based filters when accessed by users with local roles. 
    * Ensures that users only see data relevant to their assigned areas.

* **API Integration:**
    * Integrates with the OpenSPP API to enforce area-based access control for API requests.
    * API responses for users with local roles are automatically filtered to include only data within their authorized locations.

## Conclusion

The [spp_user_roles](spp_user_roles) module significantly enhances the security and granularity of user permissions in OpenSPP. By introducing local roles and area-based access control, it ensures that users can only access and manage information within their designated geographical areas. This is particularly crucial for large-scale programs with decentralized operations, where different teams or individuals are responsible for specific regions.
</file>

<file path="docs/reference/technical/audit_logs.md">
# Audit Logs

The ability to audit the actions performed by users is a key feature of OpenSPP. It allows to track the
changes made to the system and to the data stored in the system. It is also part of the architecture
priniciples of OpenSPP.

We recommend using the [Audit Trail by Smile](https://apps.odoo.com/apps/modules/15.0/smile_audit/) module.

## Installing

Smile Audit installed using the technical name `smile_audit`

## Configuration

After installation, the administrator can configure the audit rules required by the specific OpenSPP
implementation. Detailed configuration instructions are available in the
[Smile Audit documentation](https://apps.odoo.com/apps/modules/15.0/smile_audit/).
</file>

<file path="docs/reference/technical/backup.md">
# Backup and Recovery

Backup and Recovery encompasses strategies and techniques designed to protect and restore data, applications, and infrastructure in the event of data loss, {term}`corruption`, or disasters in OpenSPP deployments. This process is essential for maintaining data integrity, ensuring availability, and facilitating business continuity. As data is critical for business operations, the loss of data can disrupt business activities, incur financial penalties, harm reputation, and even lead to legal consequences. An effective Backup and Recovery strategy mitigates these risks by ensuring that data is not permanently lost and can be recovered quickly to minimize downtime.

The key advantages are:

1. Ensures minimal disruption to business operations in case of data loss.
2. Protects the integrity and reliability of data.
3. Meets legal and regulatory {term}`data protection` requirements.
4. Reduces the risk associated with data breaches and cyber threats.

In the implementation of OpenSPP, the backup can be implemented at different layers

1. Infrastructure Layer

   This layer focuses on the physical and virtual components of an IT environment, including servers, network equipment, and storage systems.

   - Backup Methods: Full system backups, snapshots, and replication.
   - Challenges: Managing the sheer volume of data and ensuring minimal impact on performance during backup operations.

2. Application Layer

   The application layer encompasses the specific data and configurations of OpenSPP.

   - Backup Considerations: It's important to capture application states and configurations, ensuring applications can be restored to a specific point in time.
   - Challenges: Countries often have unique backup requirements and may require specialized tools.

3. Database Layer

   This layer Involves protecting the data stored in databases.

   - Backup Techniques: Includes consistent backups, log backups, and hot/cold backups.
   - Challenges: Ensuring data consistency and managing the recovery of large databases without impacting performance.

As a product, OpenSPP considers Backup and Recovery tools to be out of scope, but implementing a robust strategy is still possible and recommended as follows.

1. Assessment and Planning

   - Identify critical data points. Understand the impact of data loss on different segments of the business.
   - Establish clear Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO).

2. Choosing Backup Solutions

   - Select solutions that cater to the diverse environments within OpenSPP.
   - Choose solution(s) that offer automation and scalability to adapt to growing data needs.

3. Regular Backups and Testing

   - Implement a backup schedule that aligns with business needs without impacting system performance.
   - Regular backup drills should be done to ensure data can be restored effectively.

4. Secure Backup Storage

   - Utilize offsite or cloud storage for added security and flexibility.
   - Ensure backups are encrypted, and access is tightly controlled.

5. Monitoring and Maintenance
   - Implement monitoring tools to track backup processes and alert for any failures.
   - Regularly update the backup solutions and adapt strategies to accommodate changes.

While OpenSPP does not inherently provide Backup and Recovery functionalities, integrating a comprehensive and tailored Backup and Recovery strategy is crucial for safeguarding data. This approach ensures resilience in the face of data loss and supports the continuity of business operations.
</file>

<file path="docs/reference/technical/cycle_manager.rst">
***************************************
Cycle Manager
***************************************

.. currentmodule:: odoo.addons.g2p_programs.models.managers.cycle_manager

:mod:`odoo.addons.g2p_programs.models.managers.cycle_manager` provides the class  :class:`BaseCycleManager` define the interface
for this manager. :class:`DefaultCycleManager` is the default implementation of this class that should be used
in most of the cases.


.. autoclass:: BaseCycleManager
    :members:

.. autoclass:: DefaultCycleManager
    :members:
    :undoc-members:
</file>

<file path="docs/reference/technical/deduplication_manager.md">
# Deduplication Manager

The deduplication manager allows to define how {term}`beneficiaries` are deduplicated within a program.
</file>

<file path="docs/reference/technical/eligibility_manager.rst">
***************************************
Eligibility Manager
***************************************
.. currentmodule:: odoo.addons.g2p_programs.models.managers.eligibility_manager

The eligibility manager verifies if a :term:`beneficiary<beneficiary>` is eligible for a given program. The :term:`eligibility<eligibility>`
determination can be based on data stored in OpenSPP or on an external system using API calls.

:mod:`odoo.addons.g2p_programs.models.managers.eligibility_manager` provides the class  :class:`BaseEligibilityManager` define
the interface for this manager. :class:`DefaultEligibilityManager` is the default implementation of this class
that should be used in most of the cases.


.. autoclass:: BaseEligibilityManager
    :members:
</file>

<file path="docs/reference/technical/entitlement_manager.rst">
***************************************
Entitlement Manager
***************************************
.. currentmodule:: odoo.addons.g2p_programs.models.managers.entitlement_manager

The entitlement manager determines what a :term:`beneficiary<beneficiary>` is entitled to for a given cycle.


:mod:`odoo.addons.g2p_programs.models.managers.entitlement_manager` provides the class  :class:`BaseEntitlementManager` define
the interface for this manager. :class:`DefaultCashEntitlementManager` is the default implementation of this class
for cash distribution.

The :class:`BaseEntitlementManager` can be extended to implement any other type of distribution such as ``in-kind``.


.. autoclass:: BaseEntitlementManager
    :members:

.. autoclass:: DefaultCashEntitlementManager
    :members:
    :undoc-members:
</file>

<file path="docs/reference/technical/index.md">
# Technical Reference

This section contains detailed technical specifications and references.

```{toctree}
:maxdepth: 2
:caption: Contents

security
backup
performance
monitoring
audit_logs
cycle_manager
deduplication_manager
eligibility_manager
entitlement_manager
notification_manager
program_manager
```
</file>

<file path="docs/reference/technical/monitoring.md">
# Monitoring

## Real-time Monitoring and Alerting Mechanisms

OpenSPP supports real-time monitoring of various data sources including logs, metrics, and events through the use of advanced tools such as Zabbix and Sentry. This ability to monitor in real-time allows for prompt detection of potential issues, enabling faster response times and reducing potential downtime.

Moreover, the solution incorporates a sophisticated alerting mechanism via Zabbix. This proactive approach notifies administrators in case of anomalies or breaches in predetermined thresholds. This immediate alert system allows for a more efficient and responsive approach to identifying and addressing issues as they arise, thereby reducing the potential impact on the system and users.

## Customizable Alert Rules and Thresholds

OpenSPP also provides customization options for alert rules and threshold levels via Zabbix. The system’s adaptability allows organizations to tailor their monitoring and alerting system to fit their specific needs and expectations. The ability to customize these parameters ensures that the system remains sensitive to the operational context, providing the most relevant and timely alerts to administrators.

## Visualization and Reporting Capabilities

To facilitate a deep understanding of monitored data and to help administrators identify trends and patterns, OpenSPP includes detailed visualization and reporting capabilities via Zabbix and Grafana. These robust tools allow for the generation of detailed, easy-to-understand visualizations and reports. The analytical prowess of these tools aids in the comprehension of complex data, aiding in decision-making processes.
</file>

<file path="docs/reference/technical/notification_manager.rst">
***************************************
Notification Manager
***************************************
.. currentmodule:: odoo.addons.g2p_programs.models.managers.notification_manager

The notification managers allow notifying :term:`beneficiaries<beneficiaries>` of some events happening in the programs or cycles.

:mod:`odoo.addons.g2p_programs.models.managers.notification_manager` provides the class  :class:`BaseNotificationManager` define
the interface for this manager. :class:`SMSNotificationManager` is the default implementation.

.. autoclass:: BaseNotificationManager
    :members:

.. autoclass:: SMSNotificationManager
    :members:
    :undoc-members:

.. autoclass:: SMSTemplate
    :members:
    :undoc-members:
</file>

<file path="docs/reference/technical/performance.md">
# Performance Optimization

In large-scale deployment of OpenSPP, performance optimization is pivotal. This article delves into several key areas that architects & developers should focus on to enhance the performance of their deployment of OpenSPP. These areas include various strategies to ensure smoother operations.

## Indexing

Indexing plays a crucial role in optimizing database queries. By creating indexes on columns frequently used in search queries, the database can retrieve data more efficiently. This is particularly vital in large-scale applications where databases can become vast and complex. Proper indexing reduces the data scanned during a query, leading to faster response times and reduced load on the database server.

## Caching

Caching is a technique used to store frequently accessed data in a separate database runs on memory. It significantly reduces the load on the database and improves the application's response time. There are various caching strategies, such as in-memory caching or distributed caching, which can be employed based on the application's needs and the nature of the data. Currently, we recommended to use Redis for large scale deployments.

## Database Maintenance

Regular database maintenance is essential for ensuring optimal performance. This includes tasks such as updating statistics, rebuilding indexes, and cleaning up via vacuum in Postgres. These tasks help in keeping the database operations smooth and efficient, thereby enhancing the overall performance of the application.

## Code Optimizations

Optimizing the codebase is another critical aspect of performance enhancement. This involves refactoring inefficient code, reducing complexities, and eliminating unnecessary computations. Developers should adopt best practices such as writing clean, concise code, using efficient algorithms and reducing unnecessary looping.

## Conclusion

In conclusion, performance optimization in deployments is multifaceted, encompassing various technical aspects such as indexing, caching, database maintenance, code optimizations, etc. By paying attention to these areas, architects and developers can significantly enhance the efficiency and responsiveness.
</file>

<file path="docs/reference/technical/program_manager.rst">
***************************************
Program Manager
***************************************
.. currentmodule:: odoo.addons.g2p_programs.models.managers.program_manager

The program manager determines which registrants/groups are included in the program.


:mod:`odoo.addons.g2p_programs.models.managers.program_manager` provides the class  :class:`BaseProgramManager` define
the interface for this manager. :class:`DefaultProgramManager` is the default implementation.

.. autoclass:: BaseProgramManager
    :members:

.. autoclass:: BaseProgramManager
    :members:
</file>

<file path="docs/reference/technical/security.md">
# Security Implementations & Practices

This page delves into the implementation and practices of OpenSPP, highlighting its adherence to the principles of zero-trust architecture, user {term}`authentication`, input/output validation, session management, cryptographic management, file management, and robust logging.

OpenSPP has been designed around the zero-trust architecture principle. This principle involves the fundamental premise of not automatically trusting anything inside or outside its perimeters. Instead, it verifies everything trying to connect to its systems before granting access. This approach fortifies OpenSPP's security framework, protecting it from both internal and external threats.

The solution accommodates multiple authentication systems, allowing for integration with external ID systems such as Keycloak, MOSIP. This multi-authentication support facilitates seamless interaction with various identity systems while ensuring user authenticity. Moreover, OpenSPP clearly articulates each functionality’s scope and role capabilities, effectively decoupling them from the main business logic, thereby promoting system clarity and integrity.

OpenSPP promotes sophisticated tools for monitoring user behavior, devices, and services. It supports log analysis and event monitoring, enabling proactive {term}`identification` and response to potential security incidents. This level of surveillance enhances the platform's overall security, providing real-time insights into system activities.

In OpenSPP, data inputs are strongly typed, sanitized, and parameterized, ensuring input validation. This process prevents malicious data from entering the system, thereby guarding against potential vulnerabilities. Additionally, the solution meticulously sanitizes and encodes all outputs, including error messages, to prevent unintended disclosure of confidential or internal {term}`information`.

OpenSPP ensures secure session management by utilizing well-vetted algorithms that generate random session identifiers. These algorithms create new session identifiers upon re-authentication and terminate session identifiers post-logout, reinforcing the overall security framework.

It uses cryptographic algorithms vetted for encryption/hashing during data transit or at rest. The encryption keys are generated, protected, and stored securely. Depending on a country's requirements during implementation, a Hardware Security Module (HSM) or SoftHSM can be deployed for added cryptographic security.

In the realm of file management, OpenSPP whitelists file formats and limits file sizes for uploaded documents, ensuring system efficiency and security. Additionally, OpenSPP is designed not to store confidential data while logging, safeguarding sensitive information from potential exposure.

OpenSPP has a configurable logging mechanism covering all assets, with selectable log levels per configurations. This robust logging mechanism is integral to the platform's security strategy, offering valuable insights into system activities.

OpenSPP is committed to maintaining its security posture by conducting regular vulnerability assessments and penetration testing (VAPT) of its applications, APIs, and infrastructure. Security assessments are carried out during the development stage and post-deployment, ensuring that the platform consistently adheres to the highest security standards.

## Privacy

The following section elaborates on OpenSPP's consent management framework and its emphasis on {term}`data privacy` principles.

A comprehensive consent management framework lies at the core of OpenSPP’s user-centric approach. This built-in mechanism ensures that user consent is sought, stored, and managed appropriately. By actively incorporating user consent into its operations, OpenSPP ensures that users retain control over their data, fostering trust and transparency.

OpenSPP promotes the conduct of regular privacy risk assessments. These assessments identify potential privacy risks and provide insights into how to mitigate them. Regular assessments not only uphold the integrity of the system but also instill confidence among users regarding safeguarding their data.

OpenSPP adheres to the principles of data minimization, where it is designed to collect only the minimum amount of data necessary to fulfill a given task. This principle is integral to OpenSPP's data handling policy and ensures that unnecessary or excessive data is not collected or retained. This strategy reduces the potential exposure of user data, thereby enhancing the privacy protection OpenSPP offers.

Recognizing the importance of the right to be forgotten, OpenSPP has mechanisms to cater to requests for data deletion or anonymization. This feature empowers users to control their data post-submission and significantly reinforces user trust in the system.

## Data

One of the core facets of OpenSPP's design is its robust approach toward data management and security. This section provides a detailed exploration of how OpenSPP handles various aspects of data, emphasizing its commitment to integrity, security, and efficiency.

Data anonymization is a fundamental principle that OpenSPP aligns with, taking substantial measures to protect sensitive and identifiable data. The solution incorporates various principles such as minimizing identifiability, protecting sensitive data, ensuring data security, and implementing constant data monitoring. However, OpenSPP acknowledges that there's a need for more extensive implementation of data anonymization principles. Strategies, including data masking and randomization, are planned for future deployment, fortifying OpenSPP's commitment to preserving data privacy.

At the architectural level, OpenSPP's logical data architecture facilitates layers of separation across various data types, including transactional, workflow, operational, audit, analytical, and Master Data Management (MDM) data. This segregation is accomplished by distributing data across multiple tables per specific business requirements, allowing for enhanced data management and improved system performance.

OpenSPP is built with a strong emphasis on data security and integrity. The solution supports encryption for data both at rest and in motion, which prevents unauthorized access and ensures data confidentiality. Measures such as strong authentication, access control, data backup, and recovery plans, along with regular monitoring and auditing of data, are implemented to guarantee data integrity. OpenSPP plans to implement additional data integrity checks like checksums, hashes, and digital signatures, further enhancing the security framework.

Security for data-in-motion is achieved through support for Transport Layer Security (TLS) via encryption, authentication, and access control. The solution can also support advanced protective measures like intrusion detection systems (IDS) and network segmentation based on the specific deployment requirements of the country.

The solution is designed to handle varying data demands, including scenarios of low latency-high volume and vice versa. This flexibility ensures optimal system performance regardless of the use case or business/implementation requirements, enabling OpenSPP to cater to various scenarios.


---

## Merged Content



### Content from docs/explanation/security_archi.md

# Security Architecture

![](images/security_architecture.jpg)

The OpenSPP platform can operate in a cloud environment as well as an on-prem environment while ensuring security and management across several key security domains, as listed below,

1. Identity and Access Management (IAM): This involves managing user identities and controlling access to resources within the platform to prevent unauthorized access.

2. API Security: This domain focuses on securing APIs to ensure that interaction between different software applications remains secure.

3. Backups/Disaster Recovery: This area is dedicated to securing data by creating backups and planning for quick recovery in case of a disaster.

4. Physical Security: Measures are in place to protect the platform’s physical assets, including hardware and facilities.

5. Secure Communication: The platform enforces secure communication protocols to protect data in transit.

6. Application Security: This pertains to measures and protocols that are designed to protect the platform's applications from threats and vulnerabilities.

7. Database Security: Ensures the protection of databases against compromises of their integrity, confidentiality, and availability.

8. Network Security: Involves protecting the integrity and usability of network and data, both on-site and off-site.

9. Perimeter Security: A defense mechanism for the outermost boundaries of the platform to detect and prevent attacks.

10. Audit Logs: Keeping detailed logs to track user activities that can be reviewed during security audits.

11. Security Information and Event Management (SIEM) Adaptor: This adoptor feeds data into the SIEM.

12. Infrastructure Security: Measures to protect the platform’s infrastructure, including systems, networks, and data centers.

13. SOC/NOC: Continuous observation of the platform's systems and networks to quickly identify and address potential security issues.

14. User Education and Awareness Training: Equipping users with the knowledge and skills to protect the platform and its data.

15. Key Management: Handling cryptographic keys within a cryptosystem, including their generation, exchange, storage, use, destruction, and replacement.

16. Data Loss Prevention (DLP): Strategies to prevent sensitive data from being accessed, used, or disclosed by unauthorized users.

17. Policy/Process Procedure: Establishing and maintaining policies and procedures that govern the operation and use of the platform.

18. Risk Management & Compliance: Identifying, assessing, and controlling threats to the platform's operations.

19. Incident Response and Recovery: A dedicated framework for addressing security breaches effectively, ensuring swift action and restoration of normal operations following an incident.

20. Red Teaming: This critical security practice involves challenging the platform’s defenses by simulating sophisticated cyber-attacks, ensuring vulnerabilities are identified and mitigated proactively.

Each domain is interconnected and plays a crucial role in maintaining the integrity and resilience of the OpenSPP platform. At the foundational layer, these security domains are influenced by the specific country's context. The implementation of security measures varies, with some being fully realized and others partially, all driven by the unique requirements of each country.

The above can be taken as a framework for the implementer to understand the holistic picture but OpenSPP zeroes in on the product-centric aspects, catering to the immediate needs and applications of its users.
</file>

<file path="docs/reference/glossary.rst">
*****************************************
OpenSPP Glossary
*****************************************


.. _A:

A
^
.. glossary::

   Administrator-driven approach for intake and registration (aka supply-driven approach or en masse registration approach)
       Approaches sometimes used to register groups of :term:`household<household>` to be assessed and considered for potential inclusion in one or more programs. Three key features characterize administrator-driven approaches: (1) the impetus for initiating the engagement is driven by administrators, not the people being registered (state ≥ people); (2) :term:`registration<registration>` is usually carried out en masse (groups or cohorts of households); and (3) timing: the timetable for administrator-driven approaches is typically driven by financing and capacity, not by the timing or needs of specific households. See also on-demand approach.

       | 🇫🇷 Approche impulsée par les gestionnaires de programmes pour l'accueil et l'enregistrement (aussi appelée approche axée sur l'offre ou approche d'enregistrement collectif)
       | 🇪🇸 Enfoque dirigido por las administraciones de programas para la recepción y el registro (también conocido como enfoque impulsado por la oferta o enfoque de registro masivo)
       | 🇸🇦 النهج الذي يقوده المسؤولون للقبول والتسجيل (المعروف أيضًا بالنهج القاذم علي العرض أو نهج التسجيل الجماعي)

   Appeals
       :term:`grievance<grievance>` about the correctness of decisions made by the programs. It may be a simple administrative error by the program, or involve fundamental issues of :term:`eligibility<eligibility>` and entitlement, which can involve misinterpretation of the law by program; refusal of benefit or service; miscalculation of :term:`entitlements<entitlements>`; or wrong categorization of the potential :term:`beneficiaries<beneficiaries>`.

       | 🇫🇷 Réclamations/plaintes
       | 🇪🇸 Apelaciones
       | 🇸🇦 استئنافات

   Applicants
       Individuals, families, or :term:`household<household>` who apply for :term:`benefits<benefits>` and :term:`services<services>` at their own initiative. See also :term:`registrant<registrant>`.

       | 🇫🇷 Demandeurs
       | 🇪🇸 Solicitantes
       | 🇸🇦 مقدمو الطلبات

   Assessment of needs and conditions
       Systematic processes for determining the needs and conditions of registered individuals, families, or :term:`household<household>` for the purposes of (1) determining potential :term:`eligibility<eligibility>` for specific programs and/or (2) informing the determination of :term:`benefits<benefits>` and :term:`services<services>` that may be rendered by the programs.

       | 🇫🇷 Évaluation des besoins et des conditions de vie
       | 🇪🇸 Evaluación de las necesidades y condiciones de vida
       | 🇸🇦 تقييم الاحتياجات والظروف

   Assistance unit
       The focus of an intervention. It can be an individual, a :term:`family<family>`, or a :term:`household<household>`.

       | 🇫🇷 Unité d'assistance
       | 🇪🇸 Unidad de asistencia
       | 🇸🇦 وحدة المساعدة

   Authentication
       Process of establishing confidence that a person is who they claim to be. Digital authentication generally involves a person electronically presenting one or more “authentication factors” to “assert” their identity—that is, to prove that they are the same person to whom the identity or credential was originally issued.

       | 🇫🇷 Authentification
       | 🇪🇸 Autenticación
       | 🇸🇦 المصادقة

.. _B:

B
^
.. glossary::

   Beneficiary operations management
       Stage along the :term:`social protection<social protection>` :term:`delivery chain<delivery chain>` that involves the activity of continuously engaging and collecting :term:`information<information>` from the field or other sources (such as other databases), which is then processed through a set of protocols, recorded, and used to make decisions. This simple pattern of engaging, collecting, processing, and deciding is the common thread that ties together the set of activities that occur continuously in the implementation of a program. :term:`beneficiary<beneficiary>` operations management includes three main functions, which are implemented simultaneously: beneficiary data management, monitoring of :term:`conditionalities<conditionalities>`, and implementation of a mechanism for the redress of :term:`grievance<grievance>`.

       | 🇫🇷 Gestion des opérations des bénéficiaires
       | 🇪🇸 Gestión de las operaciones de los beneficiarios
       | 🇸🇦 إدارة عمليات المستفيدين

   Beneficiary registry
       Database of :term:`beneficiaries<beneficiaries>` of a :term:`social protection<social protection>` program. It is also a component of the :term:`beneficiary operations management<beneficiary operations management>` system. These :term:`beneficiary<beneficiary>` registries contain :term:`information<information>` on program beneficiaries. Registries that contain information on beneficiaries of multiple programs are known as integrated beneficiary registries.

       | 🇫🇷 Registre des bénéficiaires
       | 🇪🇸 Registro de beneficiarios
       | 🇸🇦 سجل المستفيدين

   Beneficiary
   Beneficiaries
       In the context of :term:`social protection<social protection>`, beneficiaries are the individuals or :term:`household<household>` targeted by a programme to benefit from a transfer. See also: Recipients

       | 🇫🇷 Bénéficiaire, bénéficiaires
       | 🇪🇸 Beneficiario, beneficiarios
       | 🇸🇦 المستفيد، المستفيدين

   Benefits
   Entitlements
       Something tangible that is given by :term:`social protection<social protection>` programs to individuals, families, or :term:`household<household>`. They may be in the form of :term:`cash transfers<cash transfers>` or in-kind (such as food stamps, food rations, and subsidies). They may be noncontributory :term:`social assistance<social assistance>` programs that are financed by general revenues, or they may be financed by direct contributions as a form of :term:`social insurance<social insurance>`.

       | 🇫🇷 Prestations
       | 🇪🇸 Beneficios
       | 🇸🇦 فوائد

   Biometric identification
       Process of searching against a biometric enrollment database to find and return the biometric reference identifier(s) attributable to a single individual. The comparison may be either a one-to-one (1:1) matching—commonly referred to as “biometric verification”—where comparison is done against a single template, or one-to-many (1:N) matching, where comparison is done against multiple templates.

       | 🇫🇷 Identification biométrique
       | 🇪🇸 Identificación biométrica
       | 🇸🇦  المعرف الحيوي

   Biometrics or biometric data
       Physiological or behavioral characteristics that are unique to an individual (e.g., fingerprints, voice patterns) and that can be used as a means of automatic verification of identity.

       | 🇫🇷 Biométrie ou données biométriques
       | 🇪🇸 Biometría o datos biométricos
       | 🇸🇦  القياسات الحيوية/يانات القياس الحيوي

.. _C:

C
^
.. glossary::

   Case management
       The term "case management" is particularly problematic as it is used differently by various professions (for example, by social workers, health care workers, and IT specialists). Further, some may use the term “case management” to mean what we call :term:`beneficiary operations management<beneficiary operations management>`. Some practitioners use the term case management to mean social work (covering awareness, :term:`intermediation<intermediation>`, referrals, and counseling). Others use the term to refer to an integrated approach to managing clients all along the :term:`delivery chain<delivery chain>` (through the entire “life of the case,” as some practitioners call it). To avoid confusion, we avoid the term.

       | 🇫🇷 Gestion des cas
       | 🇪🇸 Gestión social individualizada
       | 🇸🇦 إدارة الحالات

   Cash transfers
       Money distributed to individuals, families, or :term:`household<household>`. Cash transfers are direct, regular, and predictable noncontributory cash payments that help :term:`beneficiaries<beneficiaries>` to raise and smooth incomes. The term encompasses a range of instruments (e.g., :term:`social pensions<social pensions>`, child grants, public works programs, unconditional or conditional cash transfers, etc.) and a spectrum of design, implementation, and financing options.

       | 🇫🇷 Transferts en espèces
       | 🇪🇸 Transferencias monetarias
       | 🇸🇦 التحويلات النقدية

   Categorical targeting
       :term:`targeting<targeting>` mechanism in which :term:`eligibility<eligibility>` is defined for groups of the population on the basis of specific observable characteristics, such as age. Examples include :term:`social pensions<social pensions>` for the elderly, :term:`child allowance<child allowance>`, birth allowances, :term:`family allowance<family allowance>`, and orphan :term:`benefits<benefits>`.

       | 🇫🇷 Ciblage catégoriel
       | 🇪🇸 Focalización categórica
       | 🇸🇦 الاستهداف الفئوي

   Census-sweep registration method
       Mass :term:`registration<registration>` of :term:`household<household>` into the :term:`social registry<social registry>`. With the census sweep approach, all or most households in specific areas (or the entire country) are registered en masse. In contrast to the on-demand approach (see below), with the census-sweep approach, enumerator teams go to the communities and conduct intake and registration using door-to-door methods.

       | 🇫🇷 Méthode d'enregistrement basée sur un recensement
       | 🇪🇸 Método de registro mediante barrido censal
       | 🇸🇦 طريقة التسجيل بالمسح الإحصائي

   Child allowance
       Cash benefit provided to families based on the presence and number of children in the :term:`family<family>`. The benefit may vary by the ordinal position of the child, the age of the child, or the employment status of the parent. :term:`eligibility<eligibility>` can be universal or based on an assessment of socioeconomic status (such as means testing).

       | 🇫🇷 Allocation pour enfant
       | 🇪🇸 Asignación por hijo
       | 🇸🇦 علاوة الطفل

   Child protective services (CPS)
       :term:`services<services>` provided for the protection of children who are at risk of, or experiencing, neglect (physical or emotional) or abuse (physical, sexual, or emotional). The focus is on the safety of the child, but support may also be provided to parents or other :term:`family<family>` members to strengthen families and promote safe, nurturing homes for the children.

       | 🇫🇷 Services de protection de l'enfance (SPE)
       | 🇪🇸 Servicios de protección a la infancia (SPI)
       | 🇸🇦 خدمات حماية الطفولة (KHD)

   Child support
       Financial support provided by a nonresident, noncustodial parent for the support of a child.

       | 🇫🇷 Pension alimentaire pour enfants
       | 🇪🇸 Manutención infantil
       | 🇸🇦 دعم الطفل

   Child welfare services
       :term:`social services<social services>` for children at-risk and their families, including child protective :term:`services<services>`, adoption and foster care, :term:`family<family>` preservation, and care services (home, community, or residential/institutional care).

       | 🇫🇷 Aide à l'enfance
       | 🇪🇸 Servicios de bienestar de menores
       | 🇸🇦 خدمات رعاية الطفولة

   Civil registration
       The continuous, permanent, compulsory, and universal recording of the occurrence and characteristics of vital events (e.g., live births, deaths, fetal deaths, marriages, and divorces) and other civil status events pertaining to the population as provided by decree, law, or regulation, in accordance with the legal requirements in each country.

       | 🇫🇷 Inscription à l'état civil
       | 🇪🇸 Registro civil
       | 🇸🇦 التسجيل المدني

   Community-based targeting
       Mechanism by which local communities are given discretion to determine which individuals, families, or :term:`household<household>` will be selected as :term:`beneficiaries<beneficiaries>` of a particular program—or to determine which would be registered into a :term:`social registry<social registry>` for further assessment of their needs and conditions and eventual consideration for potential :term:`eligibility<eligibility>` in social programs.

       | 🇫🇷 Ciblage communautaire
       | 🇪🇸 Focalización comunitaria
       | 🇸🇦 التوجيه المجتمعي

   Complaint
       :term:`grievance<grievance>` about the quality or type of processes for delivering :term:`benefits<benefits>` and/or :term:`services<services>`. They can arise due to delays, wait times, long lines, excessive documentation requirements, program staff behavior, public office accommodation, lack of :term:`information<information>` about the program decisions, difficulty accessing :term:`social protection<social protection>` benefits and/or services, and so on.

       | 🇫🇷 Réclamation
       | 🇪🇸 Reclamo
       | 🇸🇦 شكوى

   Compliance and noncompliance (of conditionalities)
       Compliance refers to the carrying out of specific :term:`conditionalities<conditionalities>` or :term:`co-responsibilities<co-responsibilities>` required for participation in the program by :term:`beneficiaries<beneficiaries>`. Noncompliance refers to the failure to carry out said conditionalities.

       | 🇫🇷 Conformité et non-conformité (aux conditionnalités)
       | 🇪🇸 Cumplimiento e incumplimiento (de las condicionalidades)
       | 🇸🇦 الامتثال وعدم الامتثال (للشروط)

   Compliance period
       The period in each :term:`conditionalities monitoring cycle<conditionalities monitoring cycle>` during which :term:`beneficiaries<beneficiaries>` would be observed for compliance monitoring (in other words, when they would be expected to comply).

       | 🇫🇷 Période de conformité
       | 🇪🇸 Período de cumplimiento
       | 🇸🇦 فترة الالتزام

   Compliance rates
       A performance indicator that measures the number of individuals complying with required :term:`conditionalities<conditionalities>` for a program (numerator) as a share (%) of total individuals monitored (denominator). This indicator is usually monitored for individuals within a specific categorical group, such as school-age children, pregnant/lactating mothers, and so on.

       | 🇫🇷 Taux de conformité
       | 🇪🇸 Índices de cumplimiento
       | 🇸🇦 معدلات الالتزام

   Compliance verification period
       The time period during which :term:`compliance verification processing<compliance verification processing>` is carried out within each :term:`conditionalities monitoring cycle<conditionalities monitoring cycle>`. The allotted period may differ from the actual time taken to carry out all the steps, which would be measured through a process evaluation (and could be more or less than the time allotted).

       | 🇫🇷 Période de vérification de la conformité
       | 🇪🇸 Período de verificación del cumplimiento
       | 🇸🇦 مدة التحقق من الامتثال

   Compliance verification processing
       The process of verifying that :term:`beneficiaries<beneficiaries>` have complied with program :term:`conditionalities<conditionalities>`. This process could include preparation and distribution of :term:`beneficiary<beneficiary>` lists; gathering, recording, entering, processing, and transmittal of data on compliance (or on noncompliance); and taking decisions as to whether beneficiaries have complied with the conditionalities.

       | 🇫🇷 Processus de vérification de la conformité
       | 🇪🇸 Procesamiento de la verificación del cumplimiento
       | 🇸🇦 معالجة التحقق من الامتثال

   Conditional cash transfers (CCTs)
       :term:`social assistance<social assistance>` programs that make receipt of :term:`benefits<benefits>` conditional upon :term:`beneficiary<beneficiary>` actions (such as school attendance or health care visits), typically with the objectives of reducing poverty and providing incentives for investing in human capital.

       | 🇫🇷 Transferts monétaires conditionnels (TMC)
       | 🇪🇸 Transferencias monetarias condicionadas (TMC)
       | 🇸🇦 التحويلات النقدية الشرطية

   Conditionalities monitoring
       The monitoring of :term:`beneficiary<beneficiary>` :term:`household<household>` members’ compliance with :term:`conditionalities<conditionalities>` and processing of associated data. This is the “umbrella term” that covers compliance monitoring periods and :term:`compliance verification period<compliance verification period>`/processes.

       | 🇫🇷 Contrôle des conditionnalités
       | 🇪🇸 Monitoreo de las condicionalidades
       | 🇸🇦 رصد الشروط

   Conditionalities monitoring cycle
       The recurring period that begins with the latest roster of :term:`beneficiary<beneficiary>` :term:`household<household>`, with :term:`information<information>` on pertinent :term:`family<family>` members (inputs), and ends with a revised beneficiary roster that updates with information on compliance for that cycle, as well as any decisions on consequences for noncompliance (outputs), which would link back to the payroll for the next payment cycle (outputs). The :term:`conditionalities monitoring<conditionalities monitoring>` cycle includes both the :term:`compliance period<compliance period>` and the :term:`compliance verification period<compliance verification period>`.

       | 🇫🇷 Cycle de contrôle des conditionnalités
       | 🇪🇸 Ciclo de monitoreo de las condicionalidades
       | 🇸🇦 دورة رصد المشروطيات/الشروط

   Conditionalities monitoring rates
       A performance indicator that measures the number of individuals for which the program monitors :term:`conditionalities<conditionalities>` compliance :term:`information<information>` (numerator) as a share (percent) of total individuals in that category (denominator). This indicator is usually monitored for individuals within a specific categorical group, such as school-age children, pregnant/lactating mothers, and so on.

       | 🇫🇷 Taux de contrôle des conditionnalités
       | 🇪🇸 Índices de monitoreo de las condicionalidades
       | 🇸🇦 معدلات رصد الشروط

   Conditionalities
   co-responsibilities
       The set of obligations that each :term:`beneficiary<beneficiary>` :term:`household<household>` must comply with in order to continue receiving cash :term:`benefits<benefits>`. Common examples include school attendance, health visits, and labor/work efforts.

       | 🇫🇷 Conditionnalités (ou « coresponsabilités »)
       | 🇪🇸 Condicionalidades (también conocidas como corresponsabilidades)
       | 🇸🇦 الشروط (المعروفة أيضا باسم «المسؤوليات المشتركة»)

   Corruption
       Commonly involves manipulation of :term:`beneficiary<beneficiary>` rosters, for example, registering :term:`ineligible<ineligible>` :term:`beneficiaries<beneficiaries>` to garner political support, staff accepting illegal payments from eligible or ineligible beneficiaries, or diversion of funds to ghost beneficiaries or other illegal channels.

       | 🇫🇷 Corruption
       | 🇪🇸 Corrupción
       | 🇸🇦 الفساد

.. _D:

D
^
.. glossary::

   Data dictionary
       A repository that contains descriptions of all data objects consumed or produced by the software. An organized listing of all data elements that are pertinent to the system, with precise, rigorous definitions so that both user and system analyst will have a common understanding of inputs, outputs, components of stores, and (even) intermediate calculations.

       | 🇫🇷 Dictionnaire de données
       | 🇪🇸 Diccionario de datos
       | 🇸🇦 قاموس البيانات

   Data integration
       Combines data from different sources and provides users with a unified view of these data for service integration. When :term:`services<services>` are provided by multiple suppliers, the service integration challenge is to seamlessly integrate them into end-to-end services that operate as a single IT service delivery model. Data integration involves the practice of applying architectural techniques and tools to provide access and delivery of data with varied data types and structures in order to meet the data needs of the applications and business processes within an organization.

       | 🇫🇷 Intégration des données
       | 🇪🇸 Integración de datos
       | 🇸🇦 دمج البيانات

   Data privacy
       The appropriate and permissioned use and governance of :term:`personal data<personal data>`.

       | 🇫🇷 Confidentialité des données
       | 🇪🇸 Privacidad de los datos
       | 🇸🇦 خصوصية البيانات

   Data protection
       The securing of collected :term:`information<information>`. Data protection is fundamental to ensuring :term:`data privacy<data privacy>`.

       | 🇫🇷 Protection des données
       | 🇪🇸 Protección de datos
       | 🇸🇦 حماية البيانات

   Data validation
       Quality control processes to ensure that data are valid (complete, accurate, and consistent). It is the process of comparing data with a set of rules to find out if data are reasonable. There are many types of data validation, including the following:- Format check. Data are formatted correctly (e.g., date format of dd/mm/yyyy).- Presence check. Data have been entered into a field.  - Range check. Value falls within the specified range (e.g., IB grades can only range between 0 and 7).- Type check. Correct data type has been entered (e.g., age should be a number).

       | 🇫🇷 Validation des données
       | 🇪🇸 Validación de datos
       | 🇸🇦 تصديق بيانات‏

   Data verification
       Quality control processes to ensure that data values match :term:`information<information>` in other administrative systems (via cross-checking). It is the process of checking that the data entered exactly matches the original/authoritative source to find out if data are accurate.

       | 🇫🇷 Vérification des données
       | 🇪🇸 Verificación de datos
       | 🇸🇦 التحقق من البيانات

   Decentralization
   decentralized
       Assignment of policy responsibility and/or decision-making authority to a subnational (state, regional) or local (municipality, county) level of government from a higher level of government (including a transfer of such responsibilities from central to subnational or from subnational to local).

       | 🇫🇷 Décentralisation
       | 🇪🇸 Descentralización, o descentralizado

       | 🇸🇦 اللامركزية

   Decision on benefits and service packages
       Setting benefit levels (for cash or in-kind :term:`benefits<benefits>`) and/or defining the service package (for :term:`services<services>`) that will be provided to eligible :term:`beneficiaries<beneficiaries>` of social program(s) and establishing and notifying beneficiaries of such decisions (and any associated conditions on their participation).

       | 🇫🇷 Décisions relatives à l'ensemble des prestations et des services
       | 🇪🇸 Determinación del paquete de beneficios y servicios
       | 🇸🇦 قرار بشأن المزايا وحزم الخدمات

   Deconcentration
   deconcentrated
       The process whereby a central organization transfers some of its responsibilities to lower-level units within its jurisdiction.

       | 🇫🇷 Déconcentration
       | 🇪🇸 Desconcentración, o desconcentrado
       | 🇸🇦 اللامركزة أو اللامركزة

   Deduplication
       A technique to detect duplicate identity records. Biometric data—including fingerprints and iris scans—are commonly used to de-duplicate identities in order to identify false or inconsistent identity claims and to establish uniqueness.

       | 🇫🇷 Déduplication
       | 🇪🇸 Deduplicación
       | 🇸🇦 إلغاء التكرار

   Delivery chain
       :term:`social protection<social protection>` (including labor) :term:`benefits<benefits>` and :term:`services<services>` pass through common implementation phases along the delivery chain, including :term:`outreach<outreach>`, intake and :term:`registration<registration>`, :term:`assessment of needs and conditions<assessment of needs and conditions>`, :term:`eligibility<eligibility>` and :term:`enrollment decisions<enrollment decisions>`, determination of benefits or service package, :term:`notification and onboarding<notification and onboarding>`, provision of payments or services, and :term:`beneficiary operations management<beneficiary operations management>`.

       | 🇫🇷 Chaîne de mise en œuvre
       | 🇪🇸 Cadena de implementación
       | 🇸🇦 سلسلة التوصيل

   Delivery chain process mapping
       A management tool for mapping the sequencing of implementation processes across actors (institutions) or levels of government. Important for establishing uniqueness and clarity of roles, and useful for mapping the “as-is” processes and potential “to-be” vision for reforms. In addition to mapping the sequencing by actor, there may be a time dimension (calendar of implementation cycles).

       | 🇫🇷 Cartographie de la chaîne de mise en œuvre
       | 🇪🇸 Mapeo del proceso de la cadena de implementación
       | 🇸🇦 رسم خريطة لعملية سلسلة التوصيل

   Delivery systems
       See :term:`social protection<social protection>` Delivery systems.

       | 🇫🇷 Systèmes de mise en œuvre
       | 🇪🇸 Sistemas de implementación
       | 🇸🇦 أنظمة التوصيل

   Designated recipient
       The individual in the :term:`beneficiary<beneficiary>` :term:`family<family>` or :term:`household<household>` who is designated as the grantee or recipient of :term:`benefits<benefits>` when they are paid out (for :term:`authentication<authentication>` and payment purposes). A designated recipient should be named for all benefits for which the :term:`assistance unit<assistance unit>` is a group (family or household). A designated recipient may also be needed for individual-based benefits if the beneficiary requires some guardian to act on their behalf (such as with orphans or severely :term:`disabled<disabled>` individuals).

       | 🇫🇷 Récipiendaire désigné
       | 🇪🇸 Destinatario designado
       | 🇸🇦 المستلم المعين

   Disabled
       Persons with disabilities include those who have long-term physical, mental, intellectual, or sensory impairments which, in interaction with various barriers, may hinder their full and effective participation in society on an equal basis with others (International Labour Organization). An individual with a disability is defined as a person who (1) has a physical or mental impairment that substantially limits one or more major life activities; (2) has a record of such an impairment; or (3) is regarded as having such an impairment.

       | 🇫🇷 Personnes handicapées
       | 🇪🇸 Personas en condición de discapacidad
       | 🇸🇦 معاق

   Discouraged workers (aka available potential job seekers)
       Persons not currently in the labor market who want to work but do not actively seek work because they view job opportunities as limited, or because they have restricted labor mobility, or face discrimination, or face structural, social, or cultural barriers. They are also called “available potential job seekers," or "hidden :term:`unemployed<unemployed>`," and are considered part of the potential labor force.

       | 🇫🇷 Travailleurs découragés (ou demandeurs d'emploi potentiels disponibles)
       | 🇪🇸 Trabajadores desmotivados (también denominados potenciales buscadores de empleo disponibles)
       | 🇸🇦 العمال المثبطين (ويعرف أيضًا باسم الباحثين المحتملين عن عمل)

   Dynamic data or transactional data
       Data that change as a result of an event (a transaction). The data have a time dimension, a numerical value, and refer to one or more reference data objects such as orders, invoices, and payments.

       | 🇫🇷 Données dynamiques ou transactionnelles
       | 🇪🇸 Datos dinámicos o datos transaccionales
       | 🇸🇦 بيانات ديناميكية أو بيانات المعاملات

.. _E:

E
^
.. glossary::

   Effectiveness
       It is central to the performance of :term:`delivery systems<delivery systems>`. As defined by the OECD/DAC (Organisation for Economic Co-operation and Develelopment/Development Assistance Committee) evaluation criteria, effectiveness is a measure of the extent to which a program or activity attains its objective. In this Sourcebook, an effective system is not only one that reaches, registers, and provides :term:`benefits<benefits>` and :term:`services<services>` to most of the :term:`intended population<intended population>`, but is also a system that is inclusive because it accommodates the specific needs of vulnerable populations and those who face access barriers. Consequently, the evaluation criterion of inclusion is embedded within effectiveness to reflect this logic.

       | 🇫🇷 Efficacité
       | 🇪🇸 Eficacia
       | 🇸🇦 فعالية

   Efficiency
       Another important dimension of the performance of :term:`delivery systems<delivery systems>`, albeit one that is difficult to measure. Ensuring that outcomes are achieved at reasonable costs, including moving clients through the various phases of the :term:`delivery chain<delivery chain>` at minimal cost in terms of time and money both for administrators and clients, is critical to evaluating performance. Alternative measures of efficiency include processing times for various phases or stages along the delivery chain.

       | 🇫🇷 Efficience
       | 🇪🇸 Eficiencia
       | 🇸🇦 الكفاءة

   Eligibility
       Eligibility in the context of :term:`social protection<social protection>` refers to the criteria that determine who can access social protection programs. These criteria vary based on the specific program's goals and the context in which it operates.

       | 🇫🇷 Éligibilité
       | 🇪🇸 Elegibilidad
       | 🇸🇦 الأهلية

   Eligibility criteria
       :term:`eligibility<eligibility>` criteria in :term:`social protection<social protection>` refer to the specific conditions or requirements that individuals or :term:`household<household>` must meet to qualify for assistance or :term:`benefits<benefits>` under social protection programs. These criteria are crucial in ensuring that support is targeted effectively towards those who need it most.

       | 🇫🇷 Critères d'éligibilité
       | 🇪🇸 Criterios de elegibilidad
       | 🇸🇦 معايير الأهلية

   Employment incentives
       are strategies or measures designed to encourage individuals to seek, obtain, or retain employment. These incentives are often part of broader :term:`social protection<social protection>` policies and programs.

       | 🇫🇷 Incitations à l'emploi
       | 🇪🇸 Incentivos al empleo
       | 🇸🇦 حوافز العمل

   Enrollment decisions
       Decisions taken by social program administrators to admit individuals, families, and/or :term:`household<household>` into that specific program. Those decisions usually consider the :term:`assessment of needs and conditions<assessment of needs and conditions>`, :term:`eligibility criteria<eligibility criteria>`, as well as other program-specific factors (such as fiscal space).

       | 🇫🇷 Décisions d'inscription
       | 🇪🇸 Decisiones de inscripción
       | 🇸🇦 قرارات التسجيل

.. _F:

F
^
.. glossary::

   Family
       A family is defined for operational purposes as “a group of two people or more related by birth, marriage, or adoption and residing together; all such people (including related subfamily members) are considered as members of one family.”

       | 🇫🇷 Famille
       | 🇪🇸 Familia
       | 🇸🇦 الأسرة

   Family allowance
       See :term:`child allowance<child allowance>`.

       | 🇫🇷 Allocation familiale
       | 🇪🇸 Asignación familiar
       | 🇸🇦 علاوة الاسرة

   Foundational identification system
       A system for proving (or “authenticating”) an individual’s unique identity. It uses a minimal set of attributes, such as biographic and biometric data, to exclusively describe an individual and, on that basis, to provide government-recognized identity credentials. It is “foundational” relative to various functional systems and databases (e.g., education, health) on which it relies, but it is a parallel and complementary component (along with, for instance, the :term:`civil registration<civil registration>` system) of the larger ecosystem.

       | 🇫🇷 Système d'identification fondamental
       | 🇪🇸 Sistema básico de identificación
       | 🇸🇦 نظام التعريف الأساسي

   Fraud
       Occurs when a claimant deliberately makes a false statement or conceals or distorts relevant :term:`information<information>` regarding program :term:`eligibility<eligibility>` or level of :term:`benefits<benefits>`.

       | 🇫🇷 Fraude
       | 🇪🇸 Fraude
       | 🇸🇦 الاحتيال

.. _G:

G
^
.. glossary::

   Geographic targeting mechanisms
       A means of focusing interventions on individuals, families, or :term:`household<household>` living in a certain area.

       | 🇫🇷 Mécanismes de ciblage géographique
       | 🇪🇸 Mecanismos de focalización geográfica
       | 🇸🇦 آليات التوجيه الجغرافي

   Grievance
       Refers to two distinct categories: (1) :term:`complaint<complaint>`, and (2) :term:`appeals<appeals>`, and any other feedback from the general population, the :term:`intended population<intended population>`, :term:`registrant<registrant>`, :term:`applicants<applicants>`, :term:`beneficiaries<beneficiaries>`, or other stakeholders of the :term:`social protection<social protection>` program.

       | 🇫🇷 Réclamation
       | 🇪🇸 Reclamo
       | 🇸🇦 شكوى

   Grievance redress mechanism (GRM)
       A formalized way to accept, sort, assess, and resolve :term:`complaint<complaint>`, :term:`appeals<appeals>`, and queries from the program :term:`beneficiaries<beneficiaries>` and other stakeholders. The GRM is composed of a set of institutional structures, mandated rules, procedures, and processes through which complaints, appeals, and queries about the :term:`social protection<social protection>` program(s) are resolved.

       | 🇫🇷 Mécanisme de gestion des réclamations (MGR)
       | 🇪🇸 Mecanismo de quejas y reclamos (MQR)
       | 🇸🇦 آلية تسوية الشكاوى (ATS)

   Guaranteed minimum income (GMI) programs
       :term:`social assistance<social assistance>` programs that differentiate benefit amounts according to the difference between specific incomes of each :term:`beneficiary<beneficiary>` :term:`household<household>` and an established amount, with the objective of ensuring at least that “guaranteed minimum income” level.

       | 🇫🇷 Programme de revenu minimum garanti (RMG)
       | 🇪🇸 Programas de ingreso mínimo garantizado (IMG)
       | 🇸🇦 برامج الحد الأدنى المضمون للدخل (GMI)

.. _H:

H
^
.. glossary::

   Hard-to-serve individuals or families
       In general, hard-to-serve individuals or families face multiple risks and constraints, and the complexity that arises with that multiplicity makes it hard to serve them with labor and :term:`social services<social services>`, requiring coordinated or integrated service approaches to help them reduce their social risks and narrow their distance to the labor market.

       | 🇫🇷 Personnes ou familles difficiles à servir
       | 🇪🇸 Personas o familias difíciles de atender
       | 🇸🇦 الأفراد أو الأسر الذين يصعب خدمتهم

   Home care services
       Supportive care :term:`services<services>` that are provided to individuals or families in the home. Care may be provided by professional caregivers who provide daily assistance to ensure the activities of daily living are met, or by licensed healthcare professionals who provide medical treatment needs.

       | 🇫🇷 Service de soins à domicile
       | 🇪🇸 Servicios de cuidado a domicilio
       | 🇸🇦 خدمات الرعاية المنزلية

   Horizontal and vertical coordination
       Horizontal coordination involves multiple actors at the same hierarchical administrative level (e.g., coordination across peer-level central agencies or coordination across local actors). Vertical collaboration involves multiple actors across administrative levels (e.g., between centraland local-level actors).

       | 🇫🇷 Coordination horizontale et verticale
       | 🇪🇸 Coordinación horizontal y vertical
       | 🇸🇦 التنسيق الأفقي والرأسي

   Household
       Any individual or group of individuals who are living as one economic unit, who buy food and make meals together.

       | 🇫🇷 Ménage
       | 🇪🇸 Hogar
       | 🇸🇦 منزل

   Human-centered design
       The continual process of understanding and meeting user needs. More specifically, human-centered design is a multidisciplinary approach to solving the needs and problems of the end-user (people) and the government’s capabilities for transformation.

       | 🇫🇷 Conception centrée sur l'humain
       | 🇪🇸 Diseño centrado en las personas
       | 🇸🇦 التصميم المركز حول الإنسان

   Hybrid means testing (HMT)
       A type of socioeconomic assessment that combines means testing with :term:`proxy means testing<proxy means testing>` by gathering :term:`information<information>` on a :term:`household<household>`’s observable income as verifiable welfare (as in means testing) and information on certain household assets to predict nonverifiable welfare (as in proxy means testing).

       | 🇫🇷 Évaluation hybride des ressources (EHR)
       | 🇪🇸 Comprobación híbrida de los medios de vida (CHM)
       | 🇸🇦 اختبار الهجين (EHT)

.. _I:

I
^
.. glossary::

   Identification
       Action or process of identifying a person (cf. “:term:`authentication<authentication>`”). In its initial occurrence, it typically involves the assignation of an identity number (which is often unique) and the issuance of an identity credential which, alone or with the support of some other authentication factor (e.g., biometrics), is subsequently used to prove or authenticate a person’s identity.

       | 🇫🇷 Identification
       | 🇪🇸 Identificación
       | 🇸🇦 هوية

   Identity assurance
       Ability to determine with a degree of certainty—or level of assurance (LoA)—that a claim to a particular identity made by some person or entity can be trusted to actually be the claimant’s “true” identity.

       | 🇫🇷 Assurance d'identité
       | 🇪🇸 Garantía de identidad
       | 🇸🇦 ضمان الهوية

   Identity proofing
       Process of establishing that a subject is who he or she claims to be.

       | 🇫🇷 Vérification d'identité
       | 🇪🇸 Prueba de identidad
       | 🇸🇦 إثبات الهوية

   Inactive
       Individuals considered “outside the labor force,” neither employed nor :term:`unemployed<unemployed>`, that is, not actively seeking work. There are a variety of reasons why some individuals do not participate in the labor force; such persons may be occupied in caring for :term:`family<family>` members; they may be retired, sick, :term:`disabled<disabled>`, or attending school; they may believe no jobs are available; or they may simply not want to work.

       | 🇫🇷 Inactifs
       | 🇪🇸 Personas inactivas
       | 🇸🇦 غير نشط

   Individualized action plan (IAP)
       Also referred to as a service plan, :term:`family<family>` action plan, mutual responsibilities agreement, or personal progression plan, it is an agreement between a caseworker and :term:`beneficiary<beneficiary>` that typically includes a summary of the individual assessment including profiling results; goals and agreed steps toward the goals; :term:`benefits<benefits>` (if any); the list of :term:`services<services>` assigned or referred; required actions and commitments of both parties (the beneficiary and the caseworker); rules and procedures regarding sanctions for noncompliance with required actions; beneficiary rights and responsibilities; and :term:`information<information>` on :term:`grievance<grievance>` redress mechanism (GRM) procedures. During the enrollment onboarding phase, the IAP would be signed by both the beneficiary and the caseworker.

       | 🇫🇷 Plan d'action individualisé (PAI)
       | 🇪🇸 Plan de acción individualizado (PAI)
       | 🇸🇦 خطة العمل الفردية (IAP)

   Ineligible
       Refers to a state or condition where a person, entity, or item does not meet the set criteria or requirements to qualify for a particular status, benefit, program, or activity.

       | 🇫🇷 Inéligible
       | 🇪🇸 Inelegible
       | 🇸🇦 غير مؤهل

   Information
       Data become “information” when analyzed and possibly combined with other data in order to extract meaning and to provide context.

       | 🇫🇷 Informations
       | 🇪🇸 Información
       | 🇸🇦 معلومات

   Information security
       The practice of defending electronic or physical :term:`information<information>` from unauthorized access, use, disclosure, disruption, modification, perusal, inspection, recording, or destruction. Information security relates to the preservation of confidentiality, integrity, and availability of information, in addition to other properties such as authenticity, accountability, nonrepudiation and reliability (ISO/IEC 27000:2009). Information security ensures that only authorized users (confidentiality) have access to accurate and complete information (integrity) when required (availability).

       | 🇫🇷 Sécurité de l'information
       | 🇪🇸 Seguridad de la información
       | 🇸🇦 أمن المعلومات

   Information systems
       A discrete set of :term:`information<information>` resources, such as personnel, equipment, funds, and :term:`information technology<information technology>`, organized for the collection, processing, maintenance, use, sharing, dissemination, or disposition of information.

       | 🇫🇷 Système d'information
       | 🇪🇸 Sistemas de información
       | 🇸🇦 أنظمة المعلومات

   Information technology
       Any equipment or interconnected system or subsystem of equipment that is used in the automatic acquisition, storage, manipulation, management, movement, control, display, switching, interchange, transmission, or reception of data or :term:`information<information>` by the executive agency.

       | 🇫🇷 Technologie de l'information
       | 🇪🇸 Tecnología de la información
       | 🇸🇦 تكنولوجيا المعلومات

   Institutional care services
       A type of treatment provided to an individual in a formal residential environment by an institute, other :term:`family<family>`, or other organized form aiming at providing care :term:`services<services>` (social or health services).

       | 🇫🇷 Services de soins institutionnels
       | 🇪🇸 Servicios de cuidado institucional
       | 🇸🇦 خدمات الرعاية المؤسسية

   Integrated beneficiary registry
       "Integrated :term:`beneficiary<beneficiary>` registries incorporate data from programme beneficiary registries of several different schemes. They provide a consolidated overview of data collected by different programmes, showing “who receives what” :term:`benefits<benefits>` (focusing on :term:`beneficiaries<beneficiaries>` alone). These are also variously described as ‘single registry’ or ‘unified :term:`beneficiary registry<beneficiary registry>`’. [Definition adapted from https://socialprotection.org/learn/glossary/I]"

       | 🇫🇷 Registre de bénéficiaires intégré
       | 🇪🇸 Registro integrado de beneficiarios
       | 🇸🇦 سجل المستفيدين المتكامل

   Integrated information management framework
       A framework that integrates all of an organization's systems and processes, enabling an organization to work as a single unit with unified objective. It links :term:`information<information>` across different :term:`services<services>`/systems and integrates information across agencies for a given user.

       | 🇫🇷 Cadre intégré de gestion de l'information
       | 🇪🇸 Marco integrado de gestión de la información
       | 🇸🇦 إطار إدارة المعلومات المتكامل

   Intended population
       The group of individuals, families, or :term:`household<household>` who are meant to be included as potential :term:`beneficiaries<beneficiaries>` of a program. Also referred to as a "":term:`target group<target group>`.""

       | 🇫🇷 Population ciblée
       | 🇪🇸 Población objetivo
       | 🇸🇦 السكان المستهدفون

   Intermediation
       An integrated service-provision approach used in both labor and :term:`social services<social services>`. Intermediation is a service in its own right—and it also connects people (workers) to other :term:`services<services>`. It is the process of informing clients about a range of :term:`benefits<benefits>` and services relevant to their needs, and directing them to the corresponding access point, based on agreed protocols with service provider agencies, sometimes with individualized action plans (IAPs), to help them overcome multiple socioeconomic barriers. Intermediation connects the demand and supply of social or labor services. The role of the mediator (social caseworker or public employment officer) is to correctly identify the needs of the participant (demand side—through risk screening and profiling) and then to identify the availability of services and service providers (supply side) and then connect them with referrals and counter-referrals (monitoring and follow-up) on the basis of an action plan, protocols, service contracts, and service standards.

       | 🇫🇷 Intermédiation
       | 🇪🇸 Intermediación
       | 🇸🇦 الوساطة

.. _L:

L
^
.. glossary::

   Labor markets
       Actual pools of skilled or unskilled labor available within local, national, or global economies, and activities intended to reduce risk and to improve the :term:`efficiency<efficiency>` of the labor market and to increase the employability of workers, including employment security and protection. Includes employment and advisory :term:`services<services>`, :term:`training<training>` and retraining, and labor market :term:`information systems<information systems>`, including the design, purchase, and implementation of computer software and hardware.

       | 🇫🇷 Marchés du travail
       | 🇪🇸 Mercados laborales
       | 🇸🇦 أسواق العمل

   Long-term unemployment
       Refers to those who have been :term:`unemployed<unemployed>` for more than a certain time period, such as 52 weeks (1 year, International Labour Organization, Organisation for Economic Co-operation and Development) or 27 weeks (US Bureau of Labor Statistics).

       | 🇫🇷 Chômage de longue durée
       | 🇪🇸 Desempleo de largo plazo (DLP)
       | 🇸🇦 البطالة طويلة الأجل

.. _M:

M
^
.. glossary::

   Master data
       A single source of common business data that are agreed upon and shared across the organization, and are used across multiple systems, applications, and processes. Examples include data about customers, products, employees, suppliers, materials, vendors, and so on.

       | 🇫🇷 Données de base
       | 🇪🇸 Datos maestros
       | 🇸🇦 البيانات الرئيسية

   Means testing (MT)
       A methodology that determines potential :term:`eligibility<eligibility>` or computes benefit levels based upon some assessment of the incomes and assets of a :term:`family<family>` or :term:`household<household>`.

       | 🇫🇷 Évaluation des ressources (ER)
       | 🇪🇸 Comprobación de los medios de vida (CM)
       | 🇸🇦 اختبار الوساذل

   Metadata
       Data that describes other data.

       | 🇫🇷 Métadonnées
       | 🇪🇸 Metadatos
       | 🇸🇦 البيانات الوصفية

   Migrant worker
       A person who is to be engaged, is engaged, or has been engaged in remunerated activity in a state or country of which he or she is not a citizen.

       | 🇫🇷 Travailleur migrant
       | 🇪🇸 Trabajador migrante
       | 🇸🇦 عامل مهاجر

.. _N:

N
^
.. glossary::

   Notification and onboarding
       Notification involves informing :term:`applicants<applicants>` of their :term:`enrollment decisions<enrollment decisions>` (in, wait-listed, or out), and onboarding involves finalizing the enrollment process for those who have been selected (conducting orientation, collecting additional :term:`information<information>`, providing option to opt-out, etc.).

       | 🇫🇷 Notification et intégration
       | 🇪🇸 Notificación e incorporación en el sistema
       | 🇸🇦 إشعار والاندماج في النظام

.. _O:

O
^
.. glossary::

   On-demand approach for intake and registration
       Approach that allows anyone to apply and register their :term:`information<information>` to be considered for potential inclusion in one or more programs. Three key features characterize on-demand approaches: (1) the impetus for initiating the engagement is driven by the clients (not the “state”), who take the initiative to apply; (2) specific clients engage on their own; and (3) timing: with the on-demand approach, specific clients engage in intake and :term:`registration<registration>` on their own timing. While on-demand approaches are driven largely by the way intake and registration is carried out, they also influence other phases of the :term:`delivery chain<delivery chain>`. See also administrator-driven approach.

       | 🇫🇷 Approche à la demande pour l'accueil et l'enregistrement
       | 🇪🇸 Enfoque por demanda para la recepción y el registro
       | 🇸🇦 النهج حسب الطلب للتسجيل والتسجيل

   One-stop shops/service centers
       One form of “integrated service provision” whereby all :term:`services<services>` are co-located, so the client needs to go to only one place for support. In some cases, these may be for both labor and social :term:`benefits<benefits>` and services together. In other cases, they may be for labor services separately (e.g., job centers). Other modalities combine social and health benefits and services (such as the “department of health and human services” that is common in the United States and Australia).

       | 🇫🇷 Guichets uniques/centres de services
       | 🇪🇸 Ventanillas únicas/centros de servicios integrados
       | 🇸🇦 متاجر/مراكز خدمات شاملة

   Open-source software
       Software developed by informal collaborative networks of programmers and are usually free. Anyone is freely licensed to use, copy, study, distribute, and change the software in any way, and the source code is openly shared so that people are encouraged to voluntarily improve the design of the software.19 For more details and examples of open-source software, visit https://opensource.com/ resources/what-open-source.

       | 🇫🇷 Logiciel open source
       | 🇪🇸 Software de código abierto
       | 🇸🇦 البرمجيات مفتوحة المصدر

   Outreach
       Deliberate efforts to reach and inform :term:`intended population<intended population>` and vulnerable groups about :term:`social protection<social protection>` programs and :term:`delivery systems<delivery systems>` so that they are aware, informed, able, and encouraged to engage.

       | 🇫🇷 Sensibilisation
       | 🇪🇸 Difusión
       | 🇸🇦 التوعية

   Outsourcing
       An arrangement where an entity decides to contract out the supply of :term:`services<services>` (sometimes goods) necessary to its operation to another entity, which then carries out the work using its own staff and equipment.

       | 🇫🇷 Externalisation
       | 🇪🇸 Externalización
       | 🇸🇦 التعهيد

   Oversight and controls
       Measures, tools, and systems to prevent, detect, deter, and monitor error, :term:`fraud<fraud>`, and :term:`corruption<corruption>` (EFC).

       | 🇫🇷 Supervision et contrôle
       | 🇪🇸 Supervisión y controles
       | 🇸🇦 الرقابة والضوابط

.. _P:

P
^
.. glossary::

   Passive labor market programs
       Programs that provide income replacement to :term:`unemployed<unemployed>` workers without requiring any job-search or work-related activation efforts.

       | 🇫🇷 Programme passif d'emploi
       | 🇪🇸 Programas pasivos del mercado laboral
       | 🇸🇦 برامج سوق العمل السلبية

   Payment service provider
       The public or private sector organization tasked with delivering the :term:`social protection<social protection>` program’s payments, such as a bank, post office, mobile network operator, nongovernmental organization, savings and credit cooperative organization, or microfinance institution.

       | 🇫🇷 Prestataire des services de paiement
       | 🇪🇸 Proveedor de servicios de pago
       | 🇸🇦 مزود خدمة الدفع

   Payments administration
       The required steps to transfer cash to :term:`beneficiaries<beneficiaries>` or into the beneficiaries’ accounts. Payments administration includes establishing and verifying the payroll and setting up the payment schedule, requesting the inter-account transfer (by the overseeing ministry to the treasury), issuing the inter-account payment order (by the treasury to the :term:`payment service provider<payment service provider>`), issuing the payment instruction (by the overseeing ministry to the payment service provider), and providing the payments to the beneficiaries (by the payment service provider).

       | 🇫🇷 Administration des paiements
       | 🇪🇸 Administración de los pagos
       | 🇸🇦 إدارة المدفوعات

   Payments provision
       Processes to transfer and deliver :term:`benefits<benefits>` to recipients.

       | 🇫🇷 Modalités de paiement
       | 🇪🇸 Provisión de pagos
       | 🇸🇦 اعتماد المدفوعات

   Payments reconciliation
       An accounting process that uses two sets of records to ensure figures are correct and in agreement. It confirms whether the money leaving an account matches the amount that has been spent and makes sure the two are balanced at the end of the recording period. For cash :term:`benefits<benefits>`, reconciliation confirms whether the funds transferred to the service provider match the amounts paid out to :term:`beneficiaries<beneficiaries>` for that implementation cycle, and identifies any amounts not disbursed.

       | 🇫🇷 Rapprochement des paiements
       | 🇪🇸 Conciliación de pagos
       | 🇸🇦 تسوية المدفوعات

   Performance measurement framework
       Serves three main purposes. First, performance indicators that are monitored regularly can help diagnose bottlenecks in the :term:`delivery chain<delivery chain>` early on and help correct course to prevent systemic challenges. Second, paired with other evaluative techniques, performance indicator frameworks can also help identify alternative channels, processes, or practices that enable the system to be more effective or save clients time or money. Performance measures of :term:`delivery systems<delivery systems>` can feed into a broader set of evaluative evidence on the program, including impact evaluations, and contribute to a broader learning agenda to refine and improve a program’s impact. Third, a performance measurement system is an important part of a wider oversight function for :term:`social protection<social protection>` programs, ensuring that public funds are allocated effectively.

       | 🇫🇷 Cadre de mesure de la performance
       | 🇪🇸 Marco de medición del desempeño
       | 🇸🇦 إطار قياس الأداء

   Personal data
       Any :term:`information<information>` relating to an individual who can be identified, directly or indirectly, in particular by reference to an identifier (e.g., name, :term:`identification<identification>` number, location data, online identifier, or one or more factors specific to the physical, physiological, genetic, mental, economic, cultural, or social identity of that individual).

       | 🇫🇷 Donnée personnelle
       | 🇪🇸 Datos personales
       | 🇸🇦 البيانات الشخصية

   Procedure of payments
       Refers to the systematic method through which financial :term:`benefits<benefits>` or assistance are disbursed to eligible individuals or :term:`household<household>`. This procedure is a critical component of :term:`social protection<social protection>` systems, as it ensures that support reaches those in need in an efficient, timely, and secure manner.

       | 🇫🇷 Modalités de paiement
       | 🇪🇸 Provisión de pagos
       | 🇸🇦 إجراءات الدفع

   Provision of services
       Refers to the delivery of various forms of assistance and support to individuals and communities to enhance their social welfare and protect them against certain risks and vulnerabilities. These :term:`services<services>` are an integral part of :term:`social protection<social protection>` systems and can include a wide range of interventions

       | 🇫🇷 Prestation de services
       | 🇪🇸 Provisión de servicios
       | 🇸🇦 تقديم الخدمات

   Proxy means testing
       A tool used to assess a :term:`family<family>`’s socioeconomic status using a composite measure that calculates a weighted score based on observable :term:`household<household>` characteristics, such as demographic structures, education levels, location and quality of the household’s dwelling, and ownership of durable goods and other assets. These variables are all considered “proxies” for incomes or consumption, which may be more difficult to measure and observe in situations of high informality.

       | 🇫🇷 Évaluation des ressources par approximation (Proxy Means Testing – PMT – en anglais)
       | 🇪🇸 Comprobación sustitutiva de los medios de vida (CSM)
       | 🇸🇦 اختبار الوكيل

.. _R:

R
^
.. glossary::

   Recruitment incentives/wage subsidies
       Measures providing incentives for the creation and take-up of new jobs or that promote opportunities for improving employability through work experience, and which are payable for a limited period only. Recruitment incentives may include :term:`benefits<benefits>` provided exclusively to persons from labor market program :term:`target group<target group>` and that are conditional upon the take-up of a new job (back-to-work bonus, mobility/relocation allowance, or the like).

       | 🇫🇷 Aide à l'embauche/aide salariale
       | 🇪🇸 Incentivos a la contratación/subvenciones salariales
       | 🇸🇦 حوافز التوظيف/إعانات الأجور

   Reduction of benefits for noncompliance with conditionalities
       When a :term:`beneficiary<beneficiary>` repeatedly fails to comply with :term:`conditionalities<conditionalities>` or :term:`co-responsibilities<co-responsibilities>` in a conditional cash transfer program, some countries impose a penalty on :term:`benefits<benefits>`, meaning that the beneficiary will lose all or part of the :term:`household<household>` benefits for some period until compliance resumes.

       | 🇫🇷 Réduction des prestations pour non-respect des conditions d'éligibilité
       | 🇪🇸 Reducción de los beneficios por incumplimiento de las condicionalidades
       | 🇸🇦 تخفيض المزايا لعدم الامتثال للشروط

   Refugee
       Someone who has been forced to flee their country because of persecution, war, or violence.

       | 🇫🇷 Réfugié(e)
       | 🇪🇸 Persona refugiada
       | 🇸🇦 لاجئ

   Registrant
       Individuals, families, or :term:`household<household>` who have provided their :term:`information<information>` during the intake and :term:`registration<registration>` phase of the :term:`delivery chain<delivery chain>`. They may have provided their information at their own initiative (on demand; see :term:`applicants<applicants>`) or at the initiative of a public agency or program (as in the case of en masse registration/census sweeps). In the latter case, we do not call them applicants because they did not technically “apply” for :term:`benefits<benefits>` and :term:`services<services>`.

       | 🇫🇷 Enregistré(e)
       | 🇪🇸 Persona registrada
       | 🇸🇦 المسجل

   Registration
       The process of recording and verifying the :term:`information<information>` collected from the intake process. It can also involve pulling additional information from other administrative systems. Intake and registration usually happen simultaneously.

       | 🇫🇷 Enregistrement
       | 🇪🇸 Registro
       | 🇸🇦 التسجيل

   Registration quotas
       Explicit caps (limits) on the number of :term:`household<household>` that can be registered in a specific district.

       | 🇫🇷 Quota d'enregistrement
       | 🇪🇸 Cuotas de registro
       | 🇸🇦 حصص التسجيل

   Registration targets
       Planned number of :term:`household<household>` that would be registered in a specific district, but without operating as a fixed or rigid quota (cap or limit).

       | 🇫🇷 Nombre ciblé d'enregistrés
       | 🇪🇸 Objetivos de registro
       | 🇸🇦 أهداف التسجيل

.. _S:

S
^
.. glossary::

   Service Point
       A Service Point is a designated physical or virtual location where individuals can access and receive :term:`social protection<social protection>` :term:`services<services>` and :term:`benefits<benefits>`. It facilitates key functions like application processing, :term:`information<information>` provision, benefit distribution, and program enrollment assistance. These points ensure accessibility and convenience for :term:`beneficiaries<beneficiaries>`, serving as essential hubs for direct interaction between social protection programs and their users.

       | 🇫🇷 Guichet de services
       | 🇪🇸 Punto de Servicio
       | 🇸🇦 نقطة الخدمة

   Services
       Intangible acts, activities, or works provided to, or with the participation of, :term:`beneficiaries<beneficiaries>` as a contribution to their well-being (such as to reduce poverty, provide opportunities, enhance employability, reduce social risks, etc.). They may be administered by public agencies or outsourced to third parties using government funding. See also definitions of employment services, active labor market programs, and :term:`social services<social services>`.

       | 🇫🇷 Services
       | 🇪🇸 Servicios
       | 🇸🇦 الخدمات

   Social assistance
       Social safety net programs that are noncontributory transfers in cash or in-kind and are usually targeted to the poor and vulnerable but may also support other groups (such as the long-term :term:`unemployed<unemployed>`, :term:`disabled<disabled>`, etc.). Some programs are focused on improving chronic poverty or providing equality of opportunity; others more on protecting families from shocks and longstanding losses they can inflict for the unprotected poor. These programs, also known as social welfare, include :term:`cash transfers<cash transfers>` (conditional and unconditional), in-kind transfers, such as school feeding and targeted food assistance, and near cash :term:`benefits<benefits>` such as fee waivers and food vouchers.

       | 🇫🇷 Assistance sociale
       | 🇪🇸 Asistencia social
       | 🇸🇦 المساعدة الاجتماعية

   Social insurance
       Composed of programs that minimize the negative impact of economic shocks on individuals and families. They include publicly provided or mandated insurance schemes against old age, disability, death of the main :term:`household<household>` provider, maternity leave and sickness cash :term:`benefits<benefits>`, and social health insurance. Social insurance programs are contributory, and :term:`beneficiaries<beneficiaries>` receive benefits or :term:`services<services>` in recognition of contributions to an insurance scheme.

       | 🇫🇷 Assurance sociale
       | 🇪🇸 Seguridad social
       | 🇸🇦 التأمين الاجتماعي

   Social pensions
       :term:`social assistance<social assistance>` (noncontributory) :term:`benefits<benefits>` paid to categorical groups of the population, such as the elderly or :term:`disabled<disabled>`. They may be universal (paid to all in that category) or targeted (paid to those in that category who are also poor).

       | 🇫🇷 Pension sociale
       | 🇪🇸 Pensiones sociales
       | 🇸🇦 معاشات اجتماعية

   Social protection
       Systems that help individuals, families, and :term:`household<household>`, especially the poor and vulnerable, cope with crises and shocks, find jobs, invest in the health and education of their children, and protect the aging population.

       | 🇫🇷 Protection sociale
       | 🇪🇸 Protección social
       | 🇸🇦 الحماية الاجتماعية

   Social protection (SP) payments
       The transfer of cash or near cash to :term:`social protection<social protection>` program recipients (whether contributory or noncontributory programs). They include government-to-person (G2P) and personto-government (P2G) payments.

       | 🇫🇷 Paiement de protection sociale (PS)
       | 🇪🇸 Pagos de protección social (PS)
       | 🇸🇦 مدفوعات الحماية الاجتماعية (SP)

   Social registry
       :term:`information systems<information systems>` that support the processes of :term:`outreach<outreach>`, intake and :term:`registration<registration>`, and :term:`assessment of needs and conditions<assessment of needs and conditions>` to determine potential :term:`eligibility<eligibility>` for social programs. They maintain :term:`information<information>` on all registered :term:`household<household>` regardless of whether they eventually benefit from a social program. As such, we do not refer to households in social registries as “:term:`beneficiaries<beneficiaries>`” but as “registered households.”

       | 🇫🇷 Registre social
       | 🇪🇸 Registro social
       | 🇸🇦 سجل اجتماعي

   Social services
       A wide variety of programs made available by public or private agencies to support individuals or families in addressing their particular risks and improving their overall well-being.

       | 🇫🇷 Services sociaux
       | 🇪🇸 Servicios sociales
       | 🇸🇦 الخدمات الاجتماعية

.. _T:

T
^
.. glossary::

   Target group
       refers to the specific segment of the population identified as the primary recipients of social welfare programs and interventions. These groups are usually determined based on certain characteristics or vulnerabilities that make them more in need of support. Understanding and accurately identifying target groups is crucial for the effective design and implementation of :term:`social protection<social protection>` policies.

       | 🇫🇷 Groupes ciblés
       | 🇪🇸 Grupo objetivo
       | 🇸🇦 المجموعة المستهدفة

   Targeting
       Targeting in :term:`social protection<social protection>` refers to the process or method used to determine which individuals or groups within a population will receive social protection :term:`benefits<benefits>` and :term:`services<services>`. The objective of targeting is to ensure that these resources are allocated efficiently and effectively, reaching those who are most in need. In social protection, targeting is a critical concept, as resources are often limited and the needs are high. Effective targeting can significantly impact the overall success and fairness of social protection programs.

       | 🇫🇷 Ciblage
       | 🇪🇸 Focalización
       | 🇸🇦 توجيه

   Targeting criteria
       A policy that seeks to direct an intervention (benefit or service) to the :term:`intended population<intended population>`, to minimize the coverage of those not intended to be :term:`beneficiaries<beneficiaries>` (errors of inclusion) and the noncoverage of intended beneficiaries (errors of exclusion). (We prefer to avoid using the term :term:`targeting<targeting>` in relation to an act of implementation.)

       | 🇫🇷 Critères de ciblage
       | 🇪🇸 Criterios de focalización
       | 🇸🇦 معايير الاستهداف

   Termination of benefits for conditionalities noncompliance
       When a :term:`beneficiary<beneficiary>` continuously fails to comply with :term:`conditionalities<conditionalities>` or :term:`co-responsibilities<co-responsibilities>` over a longer period, some countries cancel or terminate :term:`benefits<benefits>` and exit the :term:`family<family>` from the program (usually permanently or for a significant duration of time before one can reapply, barring :term:`appeals<appeals>`).

       | 🇫🇷 Arrêt des prestations pour non-respect des conditions d'éligibilité
       | 🇪🇸 Cese de los beneficios por incumplimiento de las condicionalidades
       | 🇸🇦 إنهاء المزايا لعدم الامتثال للشروط

   Three-tier architecture
       A client-server architecture that is made up of three layers: the data layer, business logic layer, and presentation layer. This is also known as model view controller (MVC) architecture.

       | 🇫🇷 Architecture à trois niveaux
       | 🇪🇸 Arquitectura de tres niveles
       | 🇸🇦 بنيه ثلاثيه الطبقات

   Time; costs; visits (TCV)
       An indicator of the amount of time people spend on the process, the amount of money they spend to participate (such as transport costs, childcare costs, missed work, and notary fees), and the number of visits they must make to the local office or other agencies.

       | 🇫🇷 Temps, coûts, visites (TCV)
       | 🇪🇸 Tiempo, gastos y visitas (TGV)
       | 🇸🇦 الوقت، التكاليف، الزيارات (TCV) 

   Training
       Measures that aim to improve employability and are financed by public bodies. All training measures should include some evidence of classroom teaching, or if in the workplace, supervision specifically for the purpose of instruction. Includes institutional training, and workplace training, alternate training, and apprenticeships.

       | 🇫🇷 Formation
       | 🇪🇸 Capacitación
       | 🇸🇦 تدريب

   Turnkey system
       A complete system solution, including software and hardware, that is sold to the purchasing organization as a complete product without the need for additional configuration and can be used immediately once installed or implemented.

       | 🇫🇷 Système clé en main
       | 🇪🇸 Sistema completo «llave en mano»
       | 🇸🇦 نظام مفتاح في اليد

.. _U:

U
^
.. glossary::

   Unconditional cash transfers (UCTs)
       Programs that provide cash transfer :term:`benefits<benefits>` to individuals, families, or :term:`household<household>` without imposing any conditions on the :term:`beneficiaries<beneficiaries>`.

       | 🇫🇷 Transfert monétaire inconditionnel (TMI)
       | 🇪🇸 Transferencias monetarias no condicionadas (TMNC)
       | 🇸🇦 التحويلات النقدية غير المشروطة

   Unemployment benefits
       All forms of cash benefit to compensate for :term:`unemployment<unemployment>`, including unemployment assistance (noncontributory) or unemployment insurance (based on contributions and earning history). :term:`benefits<benefits>` may be included as components of activation programs.

       | 🇫🇷 Prestation de chômage
       | 🇪🇸 Beneficios de desempleo
       | 🇸🇦 إعانات البطالة

   Unemployment
   Unemployed
       People who are jobless, actively looking for work, and currently available for work. See also :term:`long-term unemployment<long-term unemployment>`.

       | 🇫🇷 Chômage, sans emploi
       | 🇪🇸 Desempleo, desempleados
       | 🇸🇦 البطالة، العاطلين عن العمل

Most definitions are coming from those sources:
- `World Bank Source Book <https://openknowledge.worldbank.org/bitstream/handle/10986/34044/9781464815775.pdf?sequence=9&isAllowed=y>`_
- `Calp Glossary <https://www.calpnetwork.org/resources/glossary-of-terms/>`_
</file>

<file path="docs/reference/index.md">
# Reference

This section provides detailed reference material about OpenSPP components.

```{toctree}
:maxdepth: 2
:caption: Contents

modules/index
technical/index
api/index
glossary
```
</file>

<file path="docs/tutorial/managing_social_protection_programs.md">
# Managing social protection Programs

`Programs` and `Cycles` are at the heart of OpenSPP.

![OpenSPP Overview](https://github.com/newlogic/newlogic-g2p/raw/main/newlogic_g2p_overview.png)

## Concepts

### Programs

Programs, sometimes also called a campaign, define a social program. A program is organizing when, what and
how {term}`beneficiaries` receive as {term}`entitlements`. In itself, a program does not do much, but use various managers to
define the journey of beneficiaries in a program.

Currently, few types of programs are supported:

- Cash transfer
- Mobile money
- Voucher
- Voucher for restricted cash

### Cycle

Cycles represent a distribution cycle.

### beneficiary

A beneficiary is a {term}`registrant` that is part of a program/cycle.

### Managers

There are different types of managers that define how programs and cycles work. Each manager type has a
defined programming API that needs to be implemented in order to define how the system will work.

For all the managers, a default implementation is designed to support the most common use cases. You can
easily add your managers if those do not fit your needs.

#### eligibility Manager

The eligibility manager verifies if a beneficiary is eligible for a given program. The eligibility
determination can be based on data stored in OpenSPP or on an external system using API calls.

#### Entitlement Manager

The entitlement manager determines what a beneficiary is entitled to for a given cycle.

Currently, entitlement managers only support monetary value. It is planned to add support for in-kind
distribution in the near future.

#### deduplication Manager

The deduplication manager allows to define how beneficiaries are deduplicated within a program.

#### Notification Manager

The notification managers allow notifying beneficiaries of some events hapening in the programs or cycles.

#### Program Manager

#### Cycle Manager

## Type of payment instruments

### Cash Transfer

**STATUS**: Work In Progress.

OpenSPP can generate payment lists that can be shared with a bank to verify or execute transfers.

### Mobile money

### Voucher program

OpenSPP can generate nominative vouchers in batches ready to be printed.

The design of the vouchers can be customized by updating the voucher template.

::::{important}

If you plan to accept vouchers and do not plan to verify them with the server at the time of accepting then
you should think about what security features you need to implement to avoid having them being duplicated.

We recommend the use of online verification when the voucher is received or the use of secure paper.

::::

### Voucher for restricted cash programs

Vouchers can be used in conjunction with Odoo POS to provide restricted cash solutions. Merchant can use the
Odoo POS to record what is distributed against a given voucher.
</file>

<file path="docs/tutorial/programs_and_cycles.md">
# Programs and cycles

# Introduction

OpenSPP centers around {term}`social protection` {term}`Program` and {term}`Cycle` Management, using the World Bank Sourcebook Model, a widely accepted framework for designing and implementing programs.

OpenSPP enables program administrators to define {term}`eligibility criteria`, configure payment schemes, manage {term}`grievance` redress mechanisms, track inventory and distribution of goods, and generate reports and dashboards for monitoring and evaluation
purposes.

# Program components

In OpenSPP, a program is composed of multiple components that can be installed and configured independently. OpenSPP provide a default program creation wizard, but this one can be replaced to fit the needs of the program administrator and the seperation of duty between different parties.

## eligibility manager

The eligibility manager verifies if a {term}`beneficiary` is eligible for a given program. The eligibility determination can be based on data stored in OpenSPP or on an external system using API calls.

The eligibility manager allows to select one or multiple areas and different categorical or threshold based criteria based on the data stored in OpenSPP.

## Cycle manager

The cycle manager defines how a cycle is managed. It can be used to define how a cycle is created, how {term}`beneficiaries` are selected, how payments are made, how payments are reconciled, etc.

## Entitlement manager

The entitlement manager determines what a beneficiary is entitled to for a given cycle.

### Basic cash

### Cash

### In kinds

### Basket entitlement

# Creating a new program

- Open the **Programs** menu.
- Click **Create Program**. You will be taken through a wizard to create a new program.

```{figure} programs_and_cycles/program-wizard-1.png
:align: center
:height: 300
:alt: View of a program creation wizard emphasizing the first step in OpenSPP
```

- Give a name to your program.
- Select the target type. This is the type of entity that will be targeted by the program, group or individual. For example, if you are running a program to provide food assistance to households, you will select **{term}`household`**.
- If you wish to restrict the program to a specific area, select the target area. This is the area that will be targeted by the program. For example, if you are running a program to provide food assistance to households in a specific district, you will select the district name(s).
</file>

<file path="docs/user_guide/administration/hardware_integration.md">
# Hardware integration

## Introduction

Hardware integration is a key feature of OpenSPP, allowing for the integration of hardware devices to improve the {term}`efficiency` and {term}`effectiveness` of {term}`social protection` programs. Currently, OpenSPP supports two types of hardware integrations:

**Document scanner through FTP**: This integration allows for the automated scanning and uploading of documents, such as {term}`beneficiary` {term}`identification` documents or proof of income, directly into the OpenSPP platform. This reduces the need for manual data entry and improves the accuracy and timeliness of data.

**ID Document scanner**: This integration enables the scanning and verification of beneficiary identification documents, such as national IDs or passports, using the Thales AT10K scanner. With this integration, program administrators can quickly and easily verify the identity of {term}`beneficiaries` and ensure that {term}`benefits` are delivered to the correct individuals.
</file>

<file path="docs/user_guide/administration/import_areas.md">
# Import area

## Introduction

In this tutorial, you will learn how to prepare and import area data into OpenSPP using an Excel workbook.

## Prerequisites

To be able to successfully import area data into OpenSPP, the following is required:

- Authorized administrative access to the OpenSPP platform.
- As OpenSPP supports multiple languages for an area name, language support for the languages you want to use must be configured.
- A spreadsheet software that can export data as an Excel workbook.

## Objective

By the end of this tutorial, you should understand the purpose and process of preparing the data required to import area data into OpenSPP. You will learn how OpenSPP’s area structure can be used to represent the hierarchical relationship between the areas of your operations.

## Process

To access the area import feature, you must log in to OpenSPP with a user account with the **System Admin** role since the functionality is not included for other roles. Learn how to set up roles and accounts in [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html).

### Understand the Data Structure

The area data is structured hierarchically, with each sheet representing an **administrative level**:

- **Level 0:** Top-level areas (e.g., Countries).
- **Level 1 and below:** Subdivisions (e.g., Provinces, States).

Each sheet must follow specific rules regarding column headers and data.

### Create the Excel File/Workbook

1. Open Excel or any spreadsheet software.
2. Create a new workbook.
3. Rename each sheet to represent an administrative level, starting with the top-most level (e.g., "ADM0", "ADM1").

### Add Column Headers

Use the following column headers:

#### **Level 0 Sheet (Top-Level Areas) – sheet name “ADM0”**

| Column             | Description                                                                                              | Example |
| ------------------ | -------------------------------------------------------------------------------------------------------- | ------- |
| ADM0_PCODE         | Unique code for the top-level area.                                                                      | CN01    |
| ADM0\_\<ISO_CODE\> | Name of the area in each language. Replace `<ISO_CODE>` with the language's ISO code (e.g., `EN`, `FR`). | China   |
| AREA_SQKM          | Area size in square kilometers (optional).                                                               | 9596961 |

#### **Level 1 Sheet (Subdivisions) – sheet name “ADM1”**

| Column             | Description                                                                                  | Example   |
| ------------------ | -------------------------------------------------------------------------------------------- | --------- |
| ADM1_PCODE         | Unique code for the subdivision.                                                             | CN01_PR01 |
| ADM1\_\<ISO_CODE\> | Name of the subdivision in each language. Replace \<ISO_CODE\> with the language's ISO code. | Beijing   |
| ADM0_PCODE         | Code of the parent area (from Level 0).                                                      | CN01      |
| ADM0\_\<ISO_CODE\> | Name of the parent area in each language.                                                    | China     |
| AREA_SQKM          | Area size in square kilometers (optional).                                                   | 16411     |

Repeat the same structure for additional levels, adjusting the column headers to match the level (e.g., `ADM2_PCODE` for Level 2).

### Fill in the Data

**Start with Level 0:**

- Fill in the **ADM0_PCODE** column with unique codes for each top-level area.
- Add the name of each area in at least one language (e.g., ADM0_EN for English).
- (Optional) Provide area sizes in the **AREA_SQKM** column.

**Example (Level 0 Sheet):**

![](import_areas/1.png)

**Move to Level 1:**

- Use the **ADM1_PCODE** column to add unique codes for subdivisions.
- Reference the parent area by filling in **ADM0_PCODE** and its corresponding names.
- Add names for subdivisions in each active language.
- (Optional) Add area sizes.

**Example (Level 1 Sheet):**

![](import_areas/2.png)

Repeat the process for additional levels.

### Verify the Data

- **Unique Codes:** Ensure that all **ADMx_PCODE** values are unique.
- **Language Headers:** Check that all language ISO codes in the headers match the active languages in OpenSPP.
- **Hierarchy:** For levels \> 0, ensure that each row references a valid parent area in the **ADMx_PCODE** column.
- Make sure there are no trailing spaces on the column headers.

### Save the File

Save the workbook in .xlsx format. Then name the file descriptively, e.g., Area_Import.xlsx.

### Import the File

Navigate to the **Areas Import** module in OpenSPP by clicking on **Area →Areas**

![](import_areas/3.png)

Click on **New**  
![](import_areas/4.png)

Click on **Upload your file.** Once uploaded, click on **import button to complete**  
![](import_areas/5.png)

Once uploaded, click on the **import** button to complete.
![](import_areas/6.png)

### Tips for Success

- **Batch Updates:** If importing large datasets, break them into smaller files for easier management.
- **Error Handling:** If the system reports errors during validation, review the "Remarks/Errors" column in the raw data to fix issues.

### Additional information

Each sheet must contain the following headers in the first row:

#### **General Columns**

1. **ADM{level}\_PCODE**
   - **Description:** Unique code for the administrative area at the current level.
   - **Example:** CN01 for a province code.
   - **Required:** Yes.
2. **ADM{level}\_\<ISO_CODE\>**
   - **Description:** Name of the administrative area in various languages. Replace \<ISO_CODE\> with the language's ISO code (e.g., EN, FR).
   - **Example:** ADM1_EN for the English name of a first-level administrative area.
   - **Required:** At least one language column must be provided. Multiple language columns are supported.
3. **AREA_SQKM**
   - **Description:** Size of the administrative area in square kilometers.
   - **Required:** No. If provided, must be numerical.

#### **Parent Area Columns (For levels \> 0\)**

4. **ADM{parent_level}\_PCODE**
   - **Description:** Code of the parent administrative area (one level above).
   - **Example:** ADM0_PCODE in ADM1 sheet.
   - **Required:** Yes for levels \> 0\.
5. **ADM{parent_level}\_\<ISO_CODE\>**
   - **Description:** Name of the parent administrative area in various languages.
   - **Required:** Yes for levels \> 0\.

### Data Rules

- **Languages:** All ISO codes in the headers must match active languages in the system. Inactive languages will cause the import to fail.
- **Level 0 Areas:** Should not have parent codes or parent names.
- **Level \> 0 Areas:** Must include parent codes and parent names.
- **Area Codes:** Must be unique across all sheets.
- **Square Kilometers (AREA_SQKM):** Should be a valid numerical value if provided.

### Validation

1. **Automatic Checks:**
   - The system validates for missing or invalid values.
   - Rows with errors are marked with details in the "Remarks/Errors" column.
2. **Error Scenarios:**
   - Missing or non-numerical values in required columns.
   - Inconsistent hierarchy (e.g., missing parent codes for levels \> 0).

### How data is processed

- Sheets are processed sequentially by level.
- Data is imported in batches for efficiency. Errors are logged for each batch.
- After import, data can be validated and saved into the main area database.

### ISO codes

To get the ISO codes of the language you wish to use in the workbook. Go to OpenSPP and login as Administrator, Click on **Settings** and click on **Manage Languages** from the Languages section.

![](import_areas/7.png)

You can find the ISO code under the **ISO code** column of the language you want to add in your workbook.

![](import_areas/8.png)
</file>

<file path="docs/user_guide/administration/index.md">
# Administration

This section contains administrative tasks and system management guides.

```{toctree}
:maxdepth: 2
:caption: Contents

user_access
service_points
managing_custom_fields
using_audit_logs
import_areas
hardware_integration
```
</file>

<file path="docs/user_guide/administration/managing_custom_fields.md">
# Custom fields

## Introduction

Todo
</file>

<file path="docs/user_guide/administration/service_points.md">
# Setting up service points

## Introduction

A service point is a virtual or physical location where individuals can receive or access their social protection services and benefits. Setting up service points is crucial for entitlement delivery to ensure that services and benefits are delivered to the recipients correctly. This guide teaches you how to set up a service point.

## Prerequisites

The logged-in user has permission to set up a service point.

## Objective

After completing this guide, the user should be able to set up a service point.

## Step-by-step

### Create a new service point

1. Click the menu icon from the header and select **Service Point**. You will be redirected to the **Service Point** page.

![](setting_up_service_points/1.1.png)

2. Click the button **New**.

![](setting_up_service_points/1.2.png)

3. A create service point form will be displayed.

![](setting_up_service_points/1.3.png)

4. Fill out the form and click the **Save** icon.

![](setting_up_service_points/1.4.png)

5. You will be redirected to the newly created service point.

![](setting_up_service_points/1.5.png)

### Update a service point.

1. On the service list page, click the service point you want to update. You will be redirected to the service point page.

2. Update the data and click the **Save** button. You will see the updated data.

![](setting_up_service_points/2.2.png)

### Disable a service point.

1. On the service list page, click the service point you want to update. You will be redirected to the service point page.

2. Click the **Disable** button.

![](setting_up_service_points/3.2.png)

### Enable a service point

1. On the service list page, click the service point you want to enable. You will be redirected to the service point page.

2. Fill in the **Disabled Reason** and click **Enable** The updated data will be displayed.

![](setting_up_service_points/4.2.png)


---

## Merged Content



### Content from docs/tutorial/user_guides/setting_up_service_points.md

# Setting up service points

## Introduction

A service point is a virtual or physical location where individuals can receive or access their social protection services and benefits. Setting up service points is crucial for entitlement delivery to ensure that services and benefits are delivered to the recipients correctly. In this tutorial, you will learn how to set up service points.

## Prerequisites

To do this tutorial, the logged-in user must have permission to set up service points..

## Objective

After completing this tutorial, you will understand how to create, update, disable, enable, and export service points in OpenSPP.

## Process

Service points-related tasks such as creating, updating, listing, disabling, enabling, and exporting CSV are performed on the **Service Point** page.

You can access the service point page by clicking on the menu icon on the left side of the header and clicking **Service Point** on the dashboard.

![](setting_up_service_points/1.png)

### Filtering service points

You can filter the list of service points by using the **Search** bar. Type the text you want to search for, for example, if you search for a service point with the agent name of John. Type the word John and click the **Search Agent for John**.

![](setting_up_service_points/2.png)

The list will be filtered with agents named John.

![](setting_up_service_points/3.png)

You can also group service points by **field**. For example, you want to group by **Area**. Click **Group By**, and a dropdown will show. Click **Area**, the result list will be a group of service types by **Area** list.

![](setting_up_service_points/4.png)

![](setting_up_service_points/5.png)

To filter service points using service type fields like **Active Contract**, click the **Arrow down icon** in the **Search** bar and click the **Add Custom Filter**.

![](setting_up_service_points/6.png)

If you want to filter service points with **Active Contract**, click **Active Contract is set**.

![](setting_up_service_points/7.png)

The list of service points with **Active Contract** will be displayed.

![](setting_up_service_points/8.png)

### Creating service point

To create a service point, click the **New** button, you will be redirected to a form.

![](setting_up_service_points/9.png)

Fill in the **Agent Name, Address, Phone Number**, and other fields. Select the **Area** from the list, add **Service Types**, tick **Active Contract**, and hit the **Save** button.

![](setting_up_service_points/10.png)

### Updating service point

Choose the service point you want to update from the list of service points. You will be redirected to the view page. Update fields and click the **Save** button.

![](setting_up_service_points/11.png)

You can disable a service point by clicking the **Disable** button. The beneficiaries won’t be able to redeem their entitlements from this service point.

To enable a disabled service point, click the service from the list, then click **Enable**.

### Exporting service points

On the **Service Point** page, you can use the export feature to download service points. You can use filters to narrow down the fields you want your list to have. Use the **Group By** feature to group service points. For example, group service points by **Area**, click **Group By**, and select **Area**.

![](setting_up_service_points/14.png)

Click the **Gear icon**, and click **Export All** as a CSV file. The result CSV will contain a grouped by **Area** service points.

![](setting_up_service_points/16.png)

The specific steps and interface may vary depending on the OpenSPP version. Always seek assistance from the support team if you need further guidance.
</file>

<file path="docs/user_guide/administration/user_access.md">
# Administrating role-based access

## Introduction

This guide details the process of administering role-based access in OpenSPP.

## Prerequisites

To grant access, you need a user account with the **System Admin** role given by the OpenSPP team.

## Objective

After completing this task, the assigned user account will be able to login and execute actions exclusive to the assigned role in openSPP.

## Step-by-step

### Creating user account

1. Login to OpenSPP as an admin user, then click on the four-square icon and click on **Settings**.

![](administrating_role_based_access/1.png)

2. Click **Users & Companies** from the navigation bar, then choose **Users** from the list menu that appears.

![](administrating_role_based_access/2.png)

3. Click the **Create** button. Set the values for **Name** and **Email address**, and click **Save**.

![](administrating_role_based_access/3.png)

4. Once the account has been created, a password needs to be added to the user. Refer to the section **Change user password**.

### Change user password

1. Click on the four-square icon in the top-left corner, then select **Settings**. Click **Users & Companies** then select **Users** from the dropdown list.
2. Click on the user account that should be modified, and then click on the **Action** button.
3. Type in the password in the **New Password** field, then click the **Change Password** button from the popup modal.

![](administrating_role_based_access/4.png)

### Enabling and disabling user account

1. Click on the four-square icon in the top-left corner. Click the **Action** icon, and from the drop-down list, you can choose the action you want to perform.
2. To delete the user account, click on **Delete** in the action list. A confirmation popup will appear. Click **OK** to proceed.
3. To temporarily delete the user account from OpenSPP, click on **Archive** in the action list. A confirmation popup will appear. Click **OK** to proceed.
4. To restore a temporarily deleted user account to OpenSPP, additional steps need to be performed to navigate to the user since the user account will no longer be displayed among the active users. Click on the four-square icon in the top-left corner then click on **Settings**. Click **Users & Companies** and select **Users**. Click on **Filters**, then select **Inactive Users**. Click on the name of the user account you wish to unarchive. Click on the **Action** button, and then click **Unarchive**.

![](administrating_role_based_access/5.png)

### Editing user Information

1. Click on the four-square icon in the top-left corner, then click on **Settings**, navigate to **Users & Companies**, and select **Users**. Click on the name of the user you wish to edit. Click on **Edit** to modify the name and/or email address fields, then click **Save**.

![](administrating_role_based_access/6.png)

### Assigning roles to a user

1. Click on the **Role** tab, then click **Add a line**. Use the drop-down arrow to choose the role you wish to assign to this specific user account. Select the **Center Area** for this user account by clicking the drop-down arrow under the **Center Area** column. This user account will only be able to access data related to the **Center Area** you select.

![](administrating_role_based_access/7.png)

2. Set the start and end dates for the user account's validity by adjusting the **From-To** columns. These dates determine when the account will no longer be able to log in to openSPP.

3. After configuring the validity dates, click **Save**.

![](administrating_role_based_access/8.png)

4. The user account setup is complete. Test the login with the email address and password you've set up for this user account.

![](administrating_role_based_access/9.png)

### Configuring roles

1. Click on the four-square icon in the top-left corner, then click on **Settings**, and click **Roles** under **Users & Companies**.

![](administrating_role_based_access/10.png)

2. Click **Create**, set a name for the role, and select a **Role Type**.

![](administrating_role_based_access/11.png)

### Configuring groups

1. Click on the four-square icon in the top-left corner, then click on **Settings**, and click **Group** under **Users & Companies**.

![](administrating_role_based_access/12.png)

2. Create new groups by clicking the **Create** button, or you can manage existing groups by clicking the checkbox beside each group and then clicking the **Action** button, or you can modify groups by clicking on a group’s name.

![](administrating_role_based_access/13.png)


---

## Merged Content



### Content from docs/tutorial/access_management.md

# Access management

## Introduction

User Access Management is a key component of OpenSPP that enables program administrators to control and manage user access to the platform's features and data. With OpenSPP's role-based access control system, administrators can define different levels of access for individual users or groups, ensuring that only authorized users have access to specific data and features.

There are different dimensions to access rights in OpenSPP, including access to specific app features and access to specific data or subsets of data (for example, data related to a specific location). By defining these access rights, administrators can make sure that users are able to perform their roles and responsibilities effectively while minimizing the risk of data breaches or unauthorized access.

This user guide provides step-by-step instructions on how to manage user access in OpenSPP, including how to create and manage user accounts, assign roles and permissions, and customize user access rights. By the end of this guide, you should have a solid understanding of how to effectively manage user access in OpenSPP to make sure the security and integrity of your {term}`social protection` program data.

## User management

OpenSPP considers someone who has app access to perform daily tasks as a **user**. You can add as many users as required and enforce rules to limit their access to specific information. Adding or modifying user accounts and access rights is possible at any time.

(users/add-individual)=

### Add individual users

Go to **Settings → Manage Users** and click **Create**.

```{figure} access_management/manage-users.png
:align: center
:height: 280
:alt: View of the settings page emphasizing the manage users field in OpenSPP
```

- Fill in the form with the necessary information. Under the tab {ref}`access_rights` choose the group within each app the user can have access to.
- The list displays applications based on the installed applications in the database.

```{figure} access_management/new_user.png
:align: center
:alt: View of a user’s form emphasizing the access rights tab in OpenSPP
```

After the user edits the page and clicks **Save**, the system automatically sends an invitation email to the user, which they must click to accept. This creates their login.

```{figure} access_management/invitation-email.png
:align: center
:alt: View of a user’s form with a notification that the invitation email has been sent in OpenSPP
```

Activating the {ref}`developer-mode` enables users to select **User Types**.

```{figure} access_management/user-type.png
:align: center
:height: 300
:alt: View of a user’s form in developer mode emphasizing the user type field in OpenSPP
```

The **Portal** and **Public** options don't allow you to choose access rights. Members have specific ones (such as record rules and restricted menus) and usually don't belong to the usual OpenSPP groups.

(access-rights)=

## Access rights

Activate the {ref}`developer-mode`, then go to **Settings -> Users & Companies -> Groups**.

### Groups

The Access Rights menu doesn't display details of the rules and inheritances of a group when the user is selecting the groups they can access. This is where the Groups menu comes into play. Users create groups to define rules to models within an app.
The current users are listed under Users. The ones with administrative rights appear in black.

![View of a group’s form emphasizing the tab users in OpenSPP](access_management/groups-users.png)

_Inherited_ means that users added to this app group are automatically added to the following ones. In the example below, users who have access to the group _Administrator_ of _Sales_ also have access to _Website/Restricted Editor_ and _Sales/User: All Documents_.

![View of a group’s form emphasizing the tab inherited in OpenSPP](access_management/groups-inherited.png)

```{note}
Remember to always test the settings being changed in order to ensure that they are being applied to the needed and right users.
```

The _Menus_ tab is where you define which menus (models) the user can have access to.

![View of a group’s form emphasizing the tab menus in OpenSPP](access_management/groups-menus.png)

The first level of rights is the _Access Rights_ rules. The _Access Rights_ field comprises of the object name, which is a technical name assigned to a model. Enable the following options for each model:

- _Read_: The user can only view the values of that object.
- _Write_: The user can edit the values of that object.
- _Create_: The user can create values for that object.
- _Delete_: The user can delete the values of that object.

![View of a group’s form emphasizing the tab access rights in OpenSPP](access_management/groups-access-rights.png)

You can form _Record Rules_ as a second layer of editing and visibility rules. They overwrite, or refine, the _Access Rights_.
The user writes a record rule using a _Domain_. Domains are conditions used to filter or searching data. Therefore, a domain expression is a list of conditions. For each rule, choose among the following options: _Read_, _Write_, _Create_ and _Delete_ values.

![View of a group’s form emphasizing the tab record rules in OpenSPP](access_management/groups-record-rules.png)

```{note}
Making changes in access rights can have a big impact on the database. For this reason, we recommend you to contact your OpenSPP Business Analyst or our Support Team, unless you have knowledge about Domains in OpenSPP.
```

```{note}
This page is adapted from the Odoo documentation.
```

### OpenSPP groups

```{note}
TODO
```


### Content from docs/tutorial/user_guides/administrating_role_based_access.md

# Administrating role-based access

## Introduction

This tutorial explains how to configure role-based access in OpenSPP so that users have the required permissions to perform their tasks. As the system or requirements change, it is essential to update roles and permissions systematically. Additionally, ongoing training and support are vital to ensure users understand their roles and responsibilities for secure and efficient operation.

## Prerequisites

To grant access, you need a user account with the **System Admin** role given by the OpenSPP team.

## Objective

After completing this tutorial, you will gain an understanding of how to manage role-based access in OpenSPP and learn the necessary steps to assign, update, or revoke user permissions.

## Process

All user-related tasks, such as creating new users, modifying existing users, configuring their information, passwords, and user roles, are performed on the **User** page.

The **Users** page is accessed by clicking on the four-square icon in the top-left corner and select **Settings**.

![](administrating_role_based_access/1.png)

Click on **Users & Companies** and you will see the **Users, Companies**, and **Roles** options.

![](administrating_role_based_access/2.png)

### Creating user account

User roles can only be assigned to existing user accounts. To create user accounts, click on the four-square icon in the top-left corner, then choose **Settings**. Click on **Users & Companies** and select **Users**. Click on the **Create** button, fill in the user's name and email address, and then click **Save**. The password will need to be added or changed as described in the **Change User Password** section below.

### Change user password

Click on the four-square icon in the top-left corner, then select **Settings**. Click **Users & Companies** then click **Users** from the dropdown list. Click on the user account that should be modified, and then click on the **Action** button.

![](administrating_role_based_access/3.png)

Click on **Change Password** in the action list, enter the new password in the **New Password** field, and then click the **Change Password** button. The password is now successfully updated.

![](administrating_role_based_access/4.png)

### Enabling and disabling user account

To maintain proper security, it is important to ensure that users who should no longer have access to the system are taken out of active use.

All such actions are taken from the **Users** section. Click on the four-square icon in the top-left corner, then select **Settings**, click **Users & Companies**, and then click **Users**. Click on the name of the user you wish to manage, then click the **Action** button, where you will find the different options listed below.

### Delete

To completely delete the user account from OpenSPP, click on **Delete** in the action list. A confirmation popup will appear. Click **Ok** to proceed. Note that this permanently deletes the user account and that this may also have an effect on traceability.

### Archive

To temporarily delete the user account from OpenSPP, click on **Archive** in the action list. A confirmation popup will appear. Click **Ok** to proceed. Note that this only removes the user’s access to the system, but that the account still exists in the system.

### Unarchive

To restore a temporarily deleted user account to OpenSPP, it is performed in a similar way as the archive. Since the user account will no longer be displayed among the active users, additional steps need to be performed to navigate to the user.

Navigate to the **Users** page, click on **Filters**, then click **Inactive Users**. This displays all user accounts that have been temporarily deleted or archived. Click on the name of the user account you wish to unarchive. Click on the **Action** button, and then click **Unarchive**.

![](administrating_role_based_access/5.png)

Navigate back to the **Users** page. Clear the **Inactive Users** filter by clicking the **x** icon. The unarchived user account should now be visible along with all users accounts.

![](administrating_role_based_access/6.png)

### Editing user Information

The editable user information is **Name** and **Email Address**. Click on the four-square icon in the top-left corner, then click on **Settings**, navigate to **Users & Companies** and select **Users**.

Click on the name of the user you wish to edit. Click on **Edit** to modify the name and email address fields. Click on **Save** to proceed with the changes.

![](administrating_role_based_access/7.png)

### Assigning roles to a user

Assigning a role to a user account enables them to perform a specific set of actions in OpenSPP. For instance, only a **System admin** role has the permission to import and export data in and out of OpenSPP. Therefore, it is important to assign specific roles, particularly to the user account’s purpose. This also prevents unauthorized access to sensitive data, which may be easily mishandled.

Click on the four-square icon in the top-left corner then choose on **Settings**. Click **Users & Companies** and select **Users**.

![](administrating_role_based_access/8.png)

Click on the name of the user account you wish to assign roles to. In the **Roles** tab click **Add a line**. Use the dropdown menu to select the appropriate role for the user. Depending on the role selected, the behavior of the **Center area** tab will vary. Roles can be either **Global** or **Local**. A **Global** role grants access to all geographical areas, while a **Local** role allows the option to restrict which geographical areas the user can access. If the assigned role is **Local** the column **Center Area** will be enabled, allowing the selection of one center area. If left blank, the role will act as **Global**. It is possible to assign multiple roles to a user.

![](administrating_role_based_access/9.png)

Configure the **From** and **To** columns. **From** defines when this user can start having the selected access role, while **To** defines when it will expire. To remove the role from the user, simply click on the trash icon. Click on the **Save** button once done.

![](administrating_role_based_access/10.png)

### Configuring roles

Roles are typically pre-configured and available for selection; however, you can also create and configure them yourself. To create a new role click on the four-square icon in the top-left corner, click on **Settings** then select **Roles** under **Users & Companies**. A list of roles is displayed on the **Roles** page.

![](administrating_role_based_access/11.png)

Click **Create**, set a name for the role, and select a **Role Type**. **Roles Types** can be either **Global** or **Local**. A **Global** role grants access to all geographical areas, while a **Local** role allows the option to restrict which geographical areas the user can access.

![](administrating_role_based_access/12.png)

Under the **Groups** tab, click **Add a line** and tick the checkbox beside the group(s) you wish to add for this role. Click **Select** to save the selection.

Navigate back to the **Roles** page by clicking **Roles** under **Users & Companies**. The new role is displayed in the list.

![](administrating_role_based_access/13.png)

It is also possible to view all user accounts associated with a role. In the **Roles** page, click a role from the list and click on the **Users** tab.

![](administrating_role_based_access/14.png)

You can assign users to the selected role by clicking **Add a line** and selecting the user you wish to associate the role with. Click on the trash icon to unlink the user account from the role.

### Configuring groups

The list of access rights for a group is typically pre-configured; however, you may also modify the list of access rights associated with a group. To access the **Groups** page, the **Developer mode** must first be activated. This is done by navigating to **Settings**, scrolling down to the last part of the page, and clicking **Activate the developer mode**. You will then be automatically redirected back to the **Registry** page.

![](administrating_role_based_access/15.png)

Go back to **Settings**. Click on **Users & Companies** where the option **Groups** should now be displayed.

![](administrating_role_based_access/16.png)

Click **Groups** to be redirected to the group's page. You may create new groups by clicking the **Create** button, or you can manage existing groups by clicking the checkbox beside each group and then clicking the **Action** button, or you can modify groups by clicking on a group’s name.

Access rights for each group can be modified on the **Access Rights** tab. Access rights can be modified to determine their permissions. Click **Edit** to modify checkboxes or delete access rights, then click **Save** to apply changes.

![](administrating_role_based_access/17.png)

Deactivate developer mode by clicking on the four-square icon and then click on **Settings**, scrolling down to the last part of the page, and clicking **Deactivate the developer mode**.

![](administrating_role_based_access/18.png)
</file>

<file path="docs/user_guide/administration/using_audit_logs.md">
# Audit log

## Introduction

The Audit Log is a powerful tool for tracking user activity and system events in OpenSPP. It records information about who has accessed the system, what actions they performed, and when those actions took place. This information can be used to monitor user activity, detect potential security breaches, and investigate incidents or issues that arise within the system.

It is important to note that the Audit Log is not enabled by default and must be enabled and configured by an administrator. Once enabled, the Audit Log can be customized to record specific events and activities based on the needs of the organization.

While strict access rights are important to ensure that only authorized users have access to data, it is also important to allow users access to enough information to be able to perform their work effectively. The Audit Log can help strike this balance by providing a comprehensive record of user activity without compromising data security.

In this user guide, we will provide step-by-step instructions on how to enable, configure, and use the Audit Log in OpenSPP. We will cover everything from setting up audit policies and filters to reviewing and analyzing audit log data. By the end of this tutorial, you should have a solid understanding of how the Audit Log can be used to monitor and secure your OpenSPP system.
</file>

<file path="docs/user_guide/program_management/allocate_funds.md">
# Allocate funds

## Introduction

This tutorial covers the step-by-step procedure on how to allocate funds for a project.

## Prerequisites

To allocate funds for a project, you need to:

- Have the appropriate user role that enables you to create programs and allocate funds
- Have existing individual records in your registry, either by creating records manually or importing records into OpenSPP.
- An existing Program where individuals are registered.

## Objective

After completing this guide, the user will have learned how to allocate funds.

## Process

### Allocate funds to selected program

Entitlements require allocated funds in order to be successfully approved and it is therefore a prerequisite to configure the fund allocation for a selected program before generating cycles and entitlements.

After clicking **Programs**, select **Accounting** from the toolbar, and select **Program Funds** from the drop-down list.

![](allocate_funds/1.png)

You will be directed to the Program Funds page to set up the program fund.

![](allocate_funds/2.png)

When available, a reference number may be inputted manually into the **Reference Number** field. Otherwise, leaving this field empty will automatically set a reference number upon fund posting. From the **Program** dropdown, you may select by clicking on an existing program. Input the budget amount in the **Amount** input field. Click **Post** to confirm the fund posting.

A pop-up message should appear, verifying that the funds have been posted.

![](allocate_funds/3.png)

You may also modify the **Date Posted** field to post the funding on a later date. Click on **Date Posted** and select a future date. Skip clicking on the **Post** button, then click on **Save manually** button. The funds will be posted on the desired date inputted. Please note, clicking on the Post button automatically sets the **Date Posted** field to the current date.
</file>

<file path="docs/user_guide/program_management/configure_entitlements.md">
### Content from docs/tutorial/user_guides/configure_cash_entitlements.md

# Configure cash entitlements

## Introduction

This tutorial describes the steps of configuring cash entitlements when selected as Entitlement manager.

## Prerequisites

- Have an access role as an **Operations Admin** or **Administrator**. Learn more about this in the guide [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html#)
- Install and activate the module: **OpenSPP Cash Entitlement** on your OpenSPP instance as **Administrator**.
- Create a Program or have an already existing program. Learn more about this in the guide [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html)

## Objective

After completing this guide, you will be able to learn how to configure cash entitlements and edit existing cash entitlement configuration.

## Process

### Verify installed module

To be able to configure cash entitlements, you have to make sure the necessary module is installed and activated on your OpenSPP instance, you can verify this by logging in to your OpenSPP instance as Administrator, go to **Apps** and search for **OpenSPP Cash Entitlement**.

![](configure_cash_entitlements/1.png)

After successfully activating, the **Activate** button should disappear and it should display **Learn more** as the remaining button.

### Configure the Entitlement Manager

It is possible to configure cash entitlements either during creation of the program or after, both options are explained below.

#### Configure cash entitlements during program creation

When Creating a program, the tab **Configure the Entitlement manager** is available from the pop-up modal. Click on it to start setting it up.

![](configure_cash_entitlements/2.png)

Depending on installed modules there may be different options, or none, displayed. If there are options displayed, click on **Cash** as **Entitlement Manager**.

![](configure_cash_entitlements/3.png)

Click on **Add a line** to add an amount for your entitlement. Define the amount under **Amount per cycle**.

![](configure_cash_entitlements/4.png)

**Multiplier:** this dropdown field defines how many times the **Amount per cycle** will be multiplied. For example, if the indicator is set to **Number of adults** it would multiply the **Amount per cycle** by the number of adults in this group. The total amount will be the registrant’s entitlement.

![](configure_cash_entitlements/5.png)

**Maximum number:** this input field defines the maximum count for the multiplier. If, for example “Number of adults = 5” and “Maximum number= 3”, the **Amount** will be multiplied by 3 instead of 5.

In order to not have any limitations this field should be set to zero(0).

#### Edit after program creation

Once a program is created, you are still able to configure its settings by selecting the program and clicking on the tab **Configuration**.

![](configure_cash_entitlements/6.png)

Scroll down to the section **Entitlement manager**. Click on the green box to expand.

![](configure_cash_entitlements/7.png)

##### Deleting an Entitlement item

Click on the trash icon on the far right corner.

![](configure_cash_entitlements/8.png)

##### Modifying amount per cycle

Click on the Entitlement item to display another modal pop-up. Edit amount by replacing value under **Amount per cycle**.

![](configure_cash_entitlements/9.png)

**Multiplier:** this dropdown field defines how many times the **Amount per cycle** will be multiplied. For example, if the indicator is set to **Number of adults** it would multiply the **Amount per cycle** by the number of adults in this group. The total amount will be the registrant’s entitlement.

**Maximum number:** this input field defines the maximum count for the multiplier. If, for example “Number of adults = 5” and “Maximum number= 3”, the **Amount** will be multiplied by 3 instead of 5.

In order to not have any limitations this field should be set to zero(0).

##### Adding a cash entitlement

Click on **Add** a line and input the amount under **Amount per cycle**.

![](configure_cash_entitlements/10.png)

**Multiplier:** this dropdown field defines how many times the **Amount per cycle** will be multiplied. For example, if the indicator is set to **Number of adults** it would multiply the **Amount per cycle** by the number of adults in this group. The total amount will be the registrant’s entitlement.

**Maximum number:** this input field defines the maximum count for the multiplier. If, for example “Number of adults = 5” and “Maximum number= 3”, the **Amount** will be multiplied by 3 instead of 5.

In order to not have any limitations this field should be set to zero(0).

Click **Save and Close** to apply the changes.

Please note that the amount of the entitlements will be final once entitlements have been prepared in a cycle.
</file>

<file path="docs/user_guide/program_management/create_cycle.md">
# Create a program cycle & prepare entitlements

## Introduction

In this tutorial, you will learn the process of configuring, creating, and approving cycles and preparing entitlements in OpenSPP.

## Prerequisites

To create a cycle and prepare entitlements in OpenSPP, you need to:

- Ensure your program is set and ready. Learn more about this in the documentation [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html).
- Enroll beneficiaries in the program. Learn more about this in the documentation [Enroll beneficiaries](https://docs.openspp.org/tutorial/user_guides/enroll_beneficiaries.html).
- Allocate funds to the program. Learn more about this in the documentation [Allocate funds](https://docs.openspp.org/tutorial/user_guides/allocate_funds.html).

## Objective

By the end of this tutorial, you will have gained a deeper understanding of configuring cycles, either new or existing ones. You will also have gained familiarity with creating and handling entitlements as well as management of funds to allocate to existing programs. Ensuring correct setup upon cycle approval and entitlements is essential for a precise distribution of assistance.

## Process

To begin configuring cycles and preparing entitlements in OpenSPP, first log into your OpenSPP account, then go to Programs.

![](create_program_cycle_prepare_entitlements/1.png)

If any modifications are required to either the cycle or entitlement configuration of the program, these should be done prior to approving a cycle. This is because once a cycle is approved, configuration changes you applied to the program will not take effect unto the cycles that you already approved. However, if you are already satisfied with the current program configurations, you may proceed to [Creating Cycle](#creating-cycle).

### Editing program configuration

Configuring a cycle is done as a part of creating a program, as described in the documentation Configure the Cycle Manager; however, it is possible to modify an existing program’s cycle configuration.

Click on a program and navigate to the **Configuration** tab.

![](create_program_cycle_prepare_entitlements/2.png)

### Eligibility managers

You can edit the eligibility manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/3.png)

On the popup that appears, click on the **Admin Area** dropdown field to select the target area of the cycle. You may also narrow down your criteria by clicking on **New Rule**.

![](create_program_cycle_prepare_entitlements/4.png)

The number indicated in **record(s)** represents the number of beneficiaries that qualify your criteria. After configuring, click on the **Save** button to apply changes.

The changes made will only be applied to existing cycles that are in **Draft** and **To Approve** state, it will not be applied to cycles that fall under **Ended** or **Approved** state.

![](create_program_cycle_prepare_entitlements/5.png)

To apply the latest eligibility changes for the cycles under **To Approve** state, it must first be set back to **Draft** state. Click on the green button beside the cycle, then click on **Reset to Draft** button. This resets the cycle back to **Draft** state.

![](create_program_cycle_prepare_entitlements/6.png)

To apply the latest eligibility changes for the cycles under **Draft** state, click on the green button beside the cycle then click on **Verify Eligibility** button.

![](create_program_cycle_prepare_entitlements/7.png)

The **Beneficiaries** count should be updated accordingly.

### Cycle manager

You can edit the cycle manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/8.png)

A popup is displayed. Make the necessary changes and then click **Save**.

![](create_program_cycle_prepare_entitlements/9.png)

See **Configure the cycle manager** section of the document [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html) for more information on the displayed fields.

Please note that changes you made on **Auto-Approve entitlements** and **Approver Group** are only applicable to **New**, **Draft** or **To Approve** cycles, while changes made for **Recurrence** only apply to the **New** cycles created thereafter. If you wish to edit the current recurrence of an already existing cycle, it must first be on **Draft** state. Click on the green button beside the cycle, then on the popup menu, click on the **Start date** and **End date** of a program to modify. Click on **Save** to apply changes.

![](create_program_cycle_prepare_entitlements/10.png)

### Entitlement manager

You can edit the entitlement manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/11.png)

A popup should appear. Make the necessary changes and then click **Save**.

![](create_program_cycle_prepare_entitlements/12.png)

See Tutorial - [Configure cash entitlements](https://docs.openspp.org/tutorial/user_guides/configure_cash_entitlements.html) to learn more on configuring cash entitlements.

Please note that changes you made into the following fields are only applied to newly prepared entitlements.

### Creating Cycle

A cycle can only be created under a program. If you do not have any existing programs yet, you may refer to this document [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html).

Select an existing program from the program table list. You will be directed to the screen below. Click **Create New Cycle** to generate a cycle for the program.

![](create_program_cycle_prepare_entitlements/13.png)

Please note that during the creation of the program, if **One-time Distribution** was enabled, a single cycle will be automatically generated upon creation of the program and this program will not have any **Create New Cycle** button, as this program is meant to run with one cycle only.

![](create_program_cycle_prepare_entitlements/14.png)

Once a cycle is created, click on the green button beside it to open it. You may click on the **Edit** button to change **Cycle name**, **Start date** and **End Date** fields.

![](create_program_cycle_prepare_entitlements/15.png)

If there were beneficiaries added into the program after this cycle was created, you may click on **Copy Beneficiaries from Program** to sync beneficiaries into this cycle. The **Verify Eligibility** button is to check if beneficiaries enrolled would still qualify the criteria set for this cycle.

### Preparing entitlements

It is important to prepare entitlements for a cycle before a cycle is approved, as you will not be able to prepare entitlements anymore once the cycle has been approved.

Select the program you wish to act upon and click the green icon beside the cycle you wish to generate entitlements for.

![](create_program_cycle_prepare_entitlements/16.png)

Click on the **Prepare Entitlement** button. Entitlements will be generated.

![](create_program_cycle_prepare_entitlements/17.png)

The number count on top of **Entitlements** indicates the amount of entitlements prepared for the enrolled beneficiaries.

![](create_program_cycle_prepare_entitlements/18.png)

**Note**: A yellow warning message appears if processes are still running. If displayed, click **Refresh** within the yellow warning message. Repeat every now and then until the yellow warning message disappears. It is important to let the warning message resolve before proceeding into the next step as it might otherwise cause data discrepancy.

![](create_program_cycle_prepare_entitlements/19.png)

To verify the prepared entitlements, Click on **Entitlements** beside **Beneficiaries** to display a table of entitlements under **Draft** state.

![](create_program_cycle_prepare_entitlements/20.png)

Click further on an entitlement to show more details.

![](create_program_cycle_prepare_entitlements/21.png)

### Approving a cycle

After entitlements are prepared, the next step is to approve the cycle. Please note that only the assigned user with correct access rights is able to approve cycles for the program. This is set during the creation of the program, however it can also be changed in the **Approver group** dropdown within the Cycle manager of the program configuration.

Login to OpenSPP with a user role to approve the cycle. After clicking on the program, select a cycle to approve by clicking on the green button beside it, click on **To Approve** button.

![](create_program_cycle_prepare_entitlements/22.png)

**Note:** If a yellow warning message displays, click on the refresh button within the yellow warning message until it resolves.

![](create_program_cycle_prepare_entitlements/23.png)

Click on the **Approve** button to approve the cycle.

![](create_program_cycle_prepare_entitlements/24.png)

Please note that enabling Auto-approve entitlements in the program’s [Cycle manager](#cycle-manager) configuration auto approves the entitlements upon approving the cycle. Therefore, you may skip Approving entitlements if this is enabled.

![](create_program_cycle_prepare_entitlements/25.png)

If entitlements were not auto approved successfully. It could be that the [Allocate funds](https://docs.openspp.org/tutorial/user_guides/allocate_funds.html) for the program are insufficient or missing. See the documentation Allocate funds for more details.

### Approving entitlements

After approving a cycle, the next step is to approve the entitlements. Please note that only the assigned user with correct access rights is able to approve entitlements for the cycle. This is set during the creation of the program, however it can also be changed in the **Entitlement Validation Group** dropdown within the [Entitlement manager](#entitlement-manager) of the program configuration.

Login to OpenSPP with correct user role to approve the entitlements. After clicking on the program, select a cycle by clicking on the green button beside it and click on **Approve entitlement**. A yellow warning message appears if processes are still running. Make sure to click **Refresh** within the yellow warning message. Repeat every now and then until the yellow warning message disappears. It is important to let the warning message resolve before proceeding into the next step as it might otherwise cause data discrepancy.

![](create_program_cycle_prepare_entitlements/26.png)

Note: If a yellow warning message resolves, you may click on **Entitlements** beside **Beneficiaries** to verify its status.

![](create_program_cycle_prepare_entitlements/27.png)

You may also individually approve them by clicking on **Entitlements** and clicking on the checkboxes beside the entitlements, then click on the **Action** button and click **Approve**.

![](create_program_cycle_prepare_entitlements/28.png)

You could also approve them all manually at once by clicking the checkbox beside **Name** then click on **Select all**. Click on the **Action** button then click **Approve**.

![](create_program_cycle_prepare_entitlements/29.png)

A popup should appear, click on **Approve** to complete the approval of entitlements.

![](create_program_cycle_prepare_entitlements/30.png)
</file>

<file path="docs/user_guide/program_management/create_program.md">
# Creating a Program



---

## Merged Content



### Content from docs/tutorial/user_guides/create_social_protection_program.md

# Create a social protection program

## Introduction

In this tutorial, you will learn the process of creating a social protection program using the OpenSPP platform to meet the specific needs and objectives of the program.

## Prerequisites

To create a social protection program using OpenSPP, you need to:

- Have a clear understanding of the goals and objectives of your social protection program.
- Prepare the details of your program in advance. This includes deciding on the program name, the target beneficiary types, and the specific benefits that will be offered.
- Have an access role as a system administrator or global program manager to perform tasks in this tutorial. Learn more about this in the documentation [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html)
- Have existing groups or individuals in your registry either through manual creation or through import. Learn more about this in the documentation [Import registrant data](https://docs.openspp.org/tutorial/user_guides/import_registrant_data.html)

## Objective

By the end of this tutorial, you will have successfully set up and created social protection programs within the OpenSPP platform.

## Process

### Creating a social protection program

The creation process consists of logging in to OpenSPP with a user account that has the system admin or global program manager role. Also make sure to verify that the **Registry** contains existing groups or individuals. After verifying, navigate to the programs by clicking on the four-square icon in the top-left corner, click Programs, and then click on **Create Program**.

![](create_social_protection_program/1.png)

### Set Program Settings

To set up the program, first enter the **Program Name** which will serve as the identifier of the program. Choose the **Target Type** for the program, which can be either **Group** or **Individual**. When the **Target Type** is configured as a **Group**, entitlement generation is for groups. However, selecting an **Individual** as the target type restricts entitlement generation to individual criteria. Next, specify the **Currency** type by selecting your preferred option from the **Currency** section. Once done, navigate to the other configuration tabs to set up the **Default Eligibility Criteria**, the **Cycle Manager**, and the **Entitlement Manager**.

![](create_social_protection_program/2.png)

### Configure the Default Eligibility Criteria

The **Default Eligibility Criteria** feature determines which registrants are eligible to participate in a program. If no eligibility criteria are configured, then all registrants in the database are considered eligible by default. This documentation will describe the **Default** option.

First, you need to specify the **Admin Area** for the targeted individuals.

![](create_social_protection_program/3.png)

Then, under Filter, click on **New Rule**. Proceed by selecting the appropriate data from the options provided, such as family status (e.g., families with children), gender, or income bracket. Following this, establish a specific condition for the data selection—options include criteria like greater than, equal to, or contains. Subsequently, input the necessary criteria to define the filter parameters. by selecting either **All** or **Any** to determine if data points must satisfy all specified conditions or any one of them, respectively. The filters applied depend on the target type, as some filters apply to groups while others apply to individuals only.

![](create_social_protection_program/4.png)

![](create_social_protection_program/5.png)

### Configure the Cycle Manager

The configuration of the **Cycle Manager** feature involves defining several fields, such as the auto-approval of entitlements, the selection of approver groups, one-time distribution, and recurrence of distribution through a specific number of days, weeks, months, or years. These settings ensure that the entitlement process aligns with the program's specifications and requirements. To set up the cycle, you need to define the following fields:

- **Auto-approve Entitlements**. Choosing this feature enables the auto-approval of entitlements, meaning that entitlements will be automatically approved upon generation.
- **Approver Group**. Selects which user account role should approve the cycle.
- **One-time Distribution**. Choosing this feature creates the cycle as a one-time distribution, which can be used for one-time grants or support. The use of this feature disables the recurrence field.
- **Recurrence**. Specifies the length of duration of each cycle, whether it be days, weeks, months or by year.
- **Day of Month**. When Selecting **Months** as recurrence, this field defines when each cycle should start, either by a specific date in a month(e.g 3rd of each month) or by a specific day of the week(every first monday etc..)

![](create_social_protection_program/6.png)

- **Day of the week**. When selecting weekly recurrence, it is possible to select which day(s) the distribution should be made on.

![](create_social_protection_program/7.png)

### Configure the Entitlement Manager

The **Entitlement Manager** defines what should be distributed to the beneficiaries covered by the program and should match the program’s needs to achieve the program’s goals. The **Entitlement Manager** supports multiple forms of entitlement, which are explained in separate documentation:

- **Cash:** designated for cash disbursements. The system automatically generates cash benefits for individuals identified as qualified beneficiaries. Read more in the documentation Configure cash entitlements(Yet to be published).
- **In-kind:** designated for the distribution of goods, such as food and various materials. Read more in the documentation Configure in-kind entitlements(Yet to be published).
- **Basket Entitlements:** similar to in-kind entitlements, this is for the distribution of a set of products or materials. Unlike individual distributions, these are assembled into one basket rather than listed as separate items. Read more in the documentation Configure basket entitlements(Yet to be published).

### Import Registrants

The **Import Registrants** feature allows you to import registrant records into the new program as part of the program creation and is triggered by selecting **Yes** in the final step. If the option **No** is selected, this import needs to be done afterwards. Learn more about this in the documentation [Enroll beneficiaries](https://docs.openspp.org/tutorial/user_guides/enroll_beneficiaries.html).

After choosing whether to import the registrants as part of the program creation or not, click **Create**.

![](create_social_protection_program/8.png)

The program is now created and can be edited anytime.

![](create_social_protection_program/9.png)
</file>

<file path="docs/user_guide/program_management/enroll_beneficiaries.md">
# Enroll beneficiaries

## Introduction

This guide provides step-by-step instructions for enrollment processes for individual and group beneficiaries.

## Prerequisites

In order to enroll beneficiaries in OpenSPP, you need an existing program. Learn more about how to configure a program in the documentation Create a social protection program.

## Objective

This how-to instructs users on how to enroll registrants in OpenSPP into a program. Upon completion, you will have successfully added eligible beneficiaries to a social protection program and can proceed by creating cycles and performing distributions.

## Step-by-step

Once the program has been configured according to How to-Create a social protection program, the next step is to enroll the beneficiaries who will benefit from the social protection program. Depending on the target type selected in the program creation, you can enroll either individuals or groups. The following two steps need to be taken as a part of the enrolment step:

**Importing Beneficiaries:** Importing beneficiaries into a program means that any beneficiaries in the system that match the eligibility criteria will be included in the program as potential beneficiaries.

**Enrolling Beneficiaries:** Enrolling beneficiaries into the program means beneficiaries are successfully imported and authorized to access the program's benefits or services.

Depending on the choices made in the program setup, there are two different ways to perform these steps, both of them are described below.

### Import and enrollment as part of program setup

If the checkbox **Yes** is selected in the final step of the program setup, the beneficiaries will already have been imported and enrolled as part of the program configuration, meaning that no additional step needs to be taken and it is possible to proceed to create a cycle. Learn more about how to create a cycle in the documentation Create a program cycle & prepare entitlements.

To verify that the beneficiaries have been enrolled, you can follow the steps below:

1. Navigate to the program. The **Beneficiaries** icon will display the number of beneficiaries imported and enrolled.

![](enroll_beneficiaries/1.png)

2. It is possible to click the **Beneficiaries** icon to view the imported and enrolled beneficiaries in the table view. The status column should say **Enrolled**.

![](enroll_beneficiaries/2.png)

### Import and enrolment after program creation

If the checkbox **No** has been selected in the final step of the program creation, the beneficiaries will not be imported and enrolled as part of the program creation, and this will need to be done as an additional step as described below:

1. Click **Import Eligible Registrants** in order to initiate the import. Before proceeding with the next step of enrolling the beneficiaries, it is important to allow the system to complete the import. The time it takes to import the beneficiaries will depend on the number of beneficiaries eligible for the program. Depending on the number of beneficiaries, the display for completion also varies. In cases of less than 1000 beneficiaries, a green popup will display when the import is completed.

![](enroll_beneficiaries/3.png)

In the case of more than 1000 beneficiaries, a yellow notification will display informing that the page needs to be refreshed to see the status of the import.

![](enroll_beneficiaries/4.png)

The import is completed when the yellow notification is no longer displayed when refreshing the page.

2. Once the import has been completed, click on the icon **Enroll Eligible Registrants**. This action will trigger a beige pop-up notification, indicating that the enrollment process has commenced. Following the completion of enrollment for all participants, refresh the page and if the warning message disappears, then it means that the import is already complete. You should also check the beneficiary page to see if the registrants are there.

![](enroll_beneficiaries/5.png)

3. The **Beneficiaries** icon will display the number of beneficiaries imported and enrolled. It is also possible to click the **Beneficiaries** icon to view the list of imported and enrolled beneficiaries in table format.

![](enroll_beneficiaries/6.png)


---

## Merged Content



### Content from docs/tutorial/user_guides/enroll_beneficiaries.md

# Enroll beneficiaries

## Introduction

In this tutorial, you will learn the process of enrolling beneficiaries in OpenSPP. Accurate beneficiary enrollment ensures that the right individuals or groups receive the intended benefits.

## Prerequisites

To enroll beneficiaries in OpenSPP, you need an existing program. Learn more about how to configure a program in the documentation Create a social protection program.

## Objective

This tutorial instructs users on how to enroll beneficiaries into a program in OpenSPP. By following these procedures, users will be able to import and enroll both individual and group beneficiaries, ensuring they are registered for the necessary support and benefits. Upon completion, users will have successfully added eligible beneficiaries to their respective social protection programs.

## Process

Efficient enrollment is important for the success of social protection programs in OpenSPP. Depending on the target type, the enrollment is done for groups or individuals. Both enrollments can be done either as part of the program setup or after configuring the program. The process of creating a social protection program is described in the documentation Create a social protection program.

### Beneficiary Import and Enrollment

Upon finalizing the creation of the program, the process progresses through two sequential stages, regardless of whether the program supports individual or group beneficiaries:

- Import beneficiaries. This step involves the integration of beneficiaries who are eligible to receive support from a social protection program. Which beneficiaries to import into the program are defined by the filter in the eligibility criteria.
- Enroll beneficiaries. After the beneficiaries have been imported into the system, the next step is to enroll them in the program. Enrollment involves verifying the eligibility of each beneficiary based on the program's criteria, such as income level, age, or other factors. Once a beneficiary is enrolled in the program, they are entitled to receive the benefits or services provided by the program

Depending on the choices made in the program setup, there are two different ways to perform these steps, both of them are described below.

### Import and enrollment as part of program setup

If the option **Yes** has been selected at the final step of the program setup, the import and enrollment will be carried out as part of the program creation.

![](enroll_beneficiaries/1.png)

Once completed, the number of beneficiaries imported and enrolled is displayed on the toolbar.

![](enroll_beneficiaries/2.png)

Click the **Beneficiaries** icon to view the imported and enrolled beneficiaries in the table view.

![](enroll_beneficiaries/3.png)

This confirms that the beneficiaries are imported and enrolled.

### Import and enrolment after program creation

If the option **No** has been selected as the final step of the program setup, this needs to be done as a separate action prior to proceeding.

This action consists of two steps, first the import of beneficiaries into the program, and then the enrollment of the previously imported beneficiaries into the program.

Take note that, given the significant number of beneficiaries for importation, it's important to make sure that the import process has been completed before initiating any enrollments to avoid complications.

Select **Import Eligible Registrants**. In the case of less than 1000 beneficiaries, a green pop-up will appear on the right side of the screen, indicating that the import process is complete and beneficiaries have already imported. The time it takes to import the beneficiaries will depend on the number of beneficiaries eligible for the program, and it is vital to allow the import to complete before proceeding.

![](enroll_beneficiaries/4.png)

In the case of more than 1000 beneficiaries, a yellow notification will display informing that the page needs to be refreshed to see the status of the import.

![](enroll_beneficiaries/5.png)

Once the import has been confirmed to be completed, either by seeing the green notification popup or, in the case of more than 1000 beneficiaries, by refreshing the page until the yellow notification popup no longer appears, it is time to enroll the beneficiaries.

Click the **Enroll Eligible Registrants** icon. A yellow pop-up will appear on the right side of the screen, indicating the process of enrollment. Following the completion of enrollment for all participants, refresh the page and if the warning message disappears, this indicates that the import is complete. You should also check the beneficiary page to verify that the registrants are there.

![](enroll_beneficiaries/6.png)

The number of beneficiaries imported and enrolled is displayed on the **Beneficiaries** icon.

![](enroll_beneficiaries/7.png)

Click the **Beneficiaries** icon to view the imported and enrolled beneficiaries in the table view.

![](enroll_beneficiaries/8.png)
</file>

<file path="docs/user_guide/program_management/implementing_pmt.md">
# PMT via the UI

This guide elucidates the steps required to implement Proxy Means Testing (PMT) within the OpenSPP system, leveraging Odoo's user interface customization features. By following through, one will learn how to add custom fields to models and modify views to accommodate the newly introduced data fields to implement PMT.

1. Activation of Developer Mode

   - Ensure administrative access is granted.
   - Navigate to the Settings module.
   - Scroll towards the bottom and select "Activate the developer mode".

2. Model Customization

   - With the objective of adding fields to the `res.partner` model, proceed to Settings -> Technical -> Models (located under Database Structure) and choose the `res.partner` model.
   - Fields such as x_education_level and x_household_size are to be added.
   - Upon pressing `Add a line`, a properties panel unveils, facilitating the specification of Field Name, Field Label, Field Type, among other attributes.
   - Choose the field type (e.g., Integer, Selection, Float) from the left-hand panel and fill the Field Name(x_education_level, x_household_size) ,and the Field Label.
   - Following the addition of each field, select “Save and Close”.
   - An additional computed field named x_pmt_score is to be introduced. Adhere to the preceding steps, with the added configurations outlined below:
     - Dependencies: x_education_level, x_household_size
     - Function:
       for record in self:
       record['x_pmt_score'] = record['x_education_level'] \* record['x_household_size']
   - Click "Save" situated on the top right to retain the modifications.

3. View Modification

   - Aiming to integrate fields into the individual view, opt for `view_individuals_form` view. Navigate via Settings -> Technical -> View (found under User Interface) and select the view.
   - Edit the view, incorporating the following:

   ```xml
   <page name="PMT" string="Proxy Means Testing">
       <group col="4" colspan="4">
           <field name="x_education_level"/>
           <field name="x_household_size"/>
           <field name="x_pmt_score" readonly="1"/>
       </group>
   </page>
   ```

   - Select "Save" on the top right to preserve the alterations.

4. Access Registry

   - Click on the "Registry" menu item situated at the screen’s top.
   - Choose "Individuals".
   - Pick a record to view the aforementioned changes.
   - Now the PMT score will be calculated according to the given function defined above.

Upon completion, a new tab titled "Proxy Means Testing" should now be present within the Registry in the individual’s record as a new tab.
</file>

<file path="docs/user_guide/program_management/index.md">
# Program Management

This section contains guides for creating and managing social protection programs.

```{toctree}
:maxdepth: 2
:caption: Contents

create_program
enroll_beneficiaries
create_cycle
configure_entitlements
allocate_funds
implementing_pmt
using_pmt
using_geotargeting
using_indicators
using_vouchers
export_beneficiaries
programs_overview
```
</file>

<file path="docs/user_guide/program_management/programs_overview.md">
# Programs and cycles

# Introduction

OpenSPP centers around {term}`social protection` {term}`Program` and {term}`Cycle` Management, using the World Bank Sourcebook Model, a widely accepted framework for designing and implementing programs.

OpenSPP enables program administrators to define {term}`eligibility criteria`, configure payment schemes, manage {term}`grievance` redress mechanisms, track inventory and distribution of goods, and generate reports and dashboards for monitoring and evaluation
purposes.

# Program components

In OpenSPP, a program is composed of multiple components that can be installed and configured independently. OpenSPP provide a default program creation wizard, but this one can be replaced to fit the needs of the program administrator and the seperation of duty between different parties.

## eligibility manager

The eligibility manager verifies if a {term}`beneficiary` is eligible for a given program. The eligibility determination can be based on data stored in OpenSPP or on an external system using API calls.

The eligibility manager allows to select one or multiple areas and different categorical or threshold based criteria based on the data stored in OpenSPP.

## Cycle manager

The cycle manager defines how a cycle is managed. It can be used to define how a cycle is created, how {term}`beneficiaries` are selected, how payments are made, how payments are reconciled, etc.

## Entitlement manager

The entitlement manager determines what a beneficiary is entitled to for a given cycle.

### Basic cash

### Cash

### In kinds

### Basket entitlement

# Creating a new program

- Open the **Programs** menu.
- Click **Create Program**. You will be taken through a wizard to create a new program.

```{figure} programs_and_cycles/program-wizard-1.png
:align: center
:height: 300
:alt: View of a program creation wizard emphasizing the first step in OpenSPP
```

- Give a name to your program.
- Select the target type. This is the type of entity that will be targeted by the program, group or individual. For example, if you are running a program to provide food assistance to households, you will select **{term}`household`**.
- If you wish to restrict the program to a specific area, select the target area. This is the area that will be targeted by the program. For example, if you are running a program to provide food assistance to households in a specific district, you will select the district name(s).
</file>

<file path="docs/user_guide/program_management/using_geotargeting.md">
# Geotargeting

## Introduction

Use geotargeting to increase accuracy and {term}`effectiveness` in {term}`social protection` program enrollment. Geotargeting identifies potential {term}`beneficiaries`' locations, letting program administrators accurately target {term}`outreach` efforts, deliver {term}`benefits` to those in need, and reduce {term}`fraud` and leakage risks.

OpenSPP's built-in geotargeting capabilities allow program administrators to locate potential beneficiaries based on location and streamline the enrollment process, ensuring eligible individuals get necessary benefits.

This tutorial guides users through using geotargeting in OpenSPP for social protection program enrollment. It covers setting up data fields and parameters, running geotargeting analysis, and generating reports. By the end, users will understand how geotargeting can be configured, and how to apply OpenSPP's geotargeting features to achieve these goals.

## Area

To make use of geotargeting in OpenSPP, you must first define a geographic area tree. Oftentimes, you will have different levels such as:

- country
- state
- province
- district
- city
- or any other geographic area that you want to target.

OpenSPP allows you to define any number of levels and to define the hierarchy between them. For example, you can define a country, then define states within that country, and then define districts within each state. You can also define a hierarchy between districts and cities, or between cities and villages.

### Installation

Make sure you have installed the `OpenSPP Area` App in your OpenSPP installation.

### Area type

You can define different area type, that can be useful later when defining a form, so you can enforce the user to select a specific area type.

### Import

OpenSPP support the import of area from an excel file as defined by [The Humanitarian Data Exchange](https://data.humdata.org/). They offer data for most countries in the world. You can use their spreadsheet as a starting point to define your area tree.

- Download the excel file from [The Humanitarian Data Exchange - Search](<https://data.humdata.org/dataset?ext_administrative_divisions=1&res_format=XLSX&q=&sort=if(gt(last_modified%2Creview_date)%2Clast_modified%2Creview_date)%20desc&ext_page_size=25>) and save it in your computer. For example, we will use the [Sudan - Subnational Administrative Boundaries xlsx file](geotargeting/sdn_adminboundaries_tabulardata.xlsx).
- Open the **Area → Areas → Area Import** menu.
- Click **Upload your file** and select the file you just downloaded.

```{figure} geotargeting/area-upload-1.png
:align: center
:height: 300
:alt: View of a user’s area import page
```

- Click **Import**. You will preview what will be imported.

```{figure} geotargeting/area-upload-2.png
:align: center
:height: 300
:alt: View of the data that will be imported
```

- Click **Save to Area**. That will save the data to the database.

```{figure} geotargeting/area-upload-3.png
:align: center
:height: 300
:alt: View of the import result
```

- Navigate back to the **Area → Areas** menu. You will see the area you just imported.

```{figure} geotargeting/area-upload-4.png
:align: center
:height: 300
:alt: View of the imported Areas
```

### Custom Area type

By default area are imported as `Admin Area`. You can change the area type of an area by editing it and selecting the area type you want.

You can define your own during import, new area type are automatically created.

To import an area and specify the area type, you need to add a column in the excel file with the name `admin1Kind` (`1` need to be replaced by the admin level) and the value of the area type you want to use.

You can also define your own area type from the interface. To do so, you need to define the area type in the **Area → Areas → Area Kind** menu.

```{figure} geotargeting/area-kind-1.png
:align: center
:height: 300
:alt: View of the list of area type
```

- Click on **Create** to create a new area type.

```{figure} geotargeting/area-kind-2.png
:align: center
:height: 300
:alt: Add a new area type
```

- You can select a parent area type if you want to define a hierarchy between area types and set a name.

- Click Save.

## Geotargeting in program management

See [Programs and cycles](programs_and_cycles.md) for more information on how to create a program and a cycle and use geo-targeting.
</file>

<file path="docs/user_guide/program_management/using_indicators.md">
# Indicators

## Introduction

This section will discuss the importance of Indicators in OpenSPP. Indicators are a powerful tool that creates abstraction and simplifies {term}`targeting`, allowing for the calculation of the number of children under 18 years old, the number of elderly women, or whether a {term}`household` is headed by a single woman.

The Indicators play a crucial role in determining the {term}`eligibility` of registrants for {term}`social protection` programs, as they're computed based on the {term}`information` available in the {term}`social registry`. By using Indicators, errors and inaccuracies can be avoided.

## Technical considerations

Indicators are fields added to the group or individual table. In Odoo those are computed fields. To reduce the performance impact of those, those fields are recomputed. in an asynchronous job, only when the data they depend on changes. This means that the value of the field won't be available immediately after the data it depends on is changed. It will be available after the next time the job is run, usually within a second.

The indicator fields are stored as fields in the database, but they're not editable. They're computed based on the data in the registry.

```{note}
Indicators computation, if not properly written can use a lot of resources.
While Odoo developers often write a for loop in the compute method to fetch some data, this is not a good practice.
It is recommended to fetch the data for all the records in one query and then set the value to each record.

```

## Creating an indicator field

### Through the UI

Go to **Registry → Configuration → Custom Fields** and click **Create**.

```{figure} indicators/indicator-1.png
:align: center
:height: 300
:alt: Indicator creation interface in OpenSPP
```

TODO

### Through the code

Create a model that inherits from `res.partner`. In this example, we will count the number of children in a group.

To learn more about search domain, see the Odoo documentation on [search domains](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#search-domains).
Search domain are like a simplified SQL query. They're used to filter the data that is used to compute the indicator.

To simplify the count of members in a group, we created a helper method `compute_count_and_set_indicator` that takes the name of the indicator field, the domain to filter the members of the group, and the domain to filter the members of the group that are used to compute the indicator.

```{eval-rst}
.. automethod:: odoo.addons.g2p_registry_membership.models.group.G2PMembershipGroup.compute_count_and_set_indicator
    :noindex:
```

```python
import datetime
from odoo import fields, models
from dateutil.relativedelta import relativedelta

CHILDREN_AGE_LIMIT = 18

class G2PGroup(models.Model):
    _inherit = "res.partner"

    z_ind_grp_num_children = fields.Integer(
        "Number of children",
        compute="_compute_ind_grp_num_children",
        help="Number of children",
        store=True,
        allow_filter=True,
    )

    def _compute_ind_grp_num_children(self):
        now = datetime.datetime.now()
        children = now - relativedelta(years=CHILDREN_AGE_LIMIT)
        domain = [("birthdate", ">=", children)]
        self.compute_count_and_set_indicator("z_ind_grp_num_children", None, domain)

```
</file>

<file path="docs/user_guide/program_management/using_pmt.md">
# Proxy Mean Test

## Introduction

The Proxy Means Test (PMT) is a statistical method used to determine the poverty status of a {term}`household`, using a set of indicators that are correlated with household income or consumption. The PMT is often used to identify {term}`beneficiaries` who are eligible for support.

Here are some typical criteria that may be used to calculate the Proxy Means Test:

- **Household assets**: The PMT may consider household assets such as land, livestock, or other durable goods as an indicator of household income or consumption. The value of these assets may be used as a proxy for the household's overall economic status.
- **Housing conditions**: The PMT may consider housing conditions such as the type of dwelling, access to water and sanitation facilities, and other indicators of living standards as proxies for household income or consumption.
- **Education and occupation**: The PMT may consider the education level and occupation of household members as proxies for income or consumption, as these factors can be correlated with higher income levels.
- **Demographic characteristics**: The PMT may consider demographic characteristics such as household size, age, and gender composition as proxies for income or consumption. For example, households with larger numbers of children or elderly members may be considered more vulnerable to poverty.

Overall, the specific criteria used to calculate the PMT may vary depending on the context and objectives of the {term}`social protection` program. It is important to select indicators that are relevant and meaningful in the local context and that accurately reflect household income or consumption levels.

## How to configure a proxy mean test

### Exemple

Here's a simple example of a PMT formula using the following indicators: household size, education level, and assets:

PMT score = (0.5 x household size) + (0.3 x education level) + (0.2 x asset value)

In this example, the PMT score is calculated using three indicators: household size, education level, and asset value. Each indicator is assigned a weight based on its perceived importance in reflecting household income or consumption. The weights are then multiplied by the value of each indicator and added together to produce the PMT score. In this case, household size is given a weight of 0.5, education level is given a weight of 0.3, and asset value is given a weight of 0.2.

For example, if a household has a size of 4, an education level of 12 (out of a possible 20), and assets worth $5,000, the PMT score would be calculated as follows:

PMT score = (0.5 x 4) + (0.3 x 12) + (0.2 x 5000) = 2 + 3.6 + 1000 = 1005.6

In this example, the PMT score for the household is 1005.6. This score can then be used to determine the household's poverty status and {term}`eligibility` for social protection programs.

### Implementation

TODO
</file>

<file path="docs/user_guide/program_management/using_vouchers.md">
# Vouchers

## Overview

Vouchers and e-vouchers are versatile and effective tools for delivering {term}`social protection` {term}`benefits` to vulnerable populations. By providing {term}`beneficiaries` with a voucher they can use to redeem specific goods or {term}`services`, program administrators can ensure benefits are used appropriately while giving beneficiaries the flexibility to choose the goods or services that best meet their needs.

In OpenSPP, vouchers are a standard feature available to all users. With the platform's built-in voucher management capabilities, program administrators can create, distribute, and track vouchers for various social protection programs.

This tutorial provides step-by-step instructions on how to use vouchers in OpenSPP for social protection programs. It covers setting up voucher parameters and {term}`eligibility criteria`, generating and distributing vouchers, and tracking voucher usage. By the end of this tutorial, you should have a solid understanding of how vouchers can improve social protection programs' {term}`efficiency` and {term}`effectiveness`, and how to use OpenSPP's voucher management capabilities to achieve these goals.

### Implementation

TODO
</file>

<file path="docs/user_guide/registry_management/identity_management.md">
# Configure ID and generate QR code

## Introduction

In this Tutorial you will learn how to configure the ID of a registrant and how to print its QR code.

## Prerequisites

To configure ID and generate QR code, you need to:

- Have existing individual records in your registry, either by creating records manually or importing records into OpenSPP.
- Have an access role as an **Operations Admin** or **Administrator**. Learn more about this in the guide [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html)
- Make sure that the module **OpenSPP POS: ID Redemption** is installed and activated.

## Objective

By the end of this tutorial you will be able to configure ID types, manage IDs of Individuals and Groups, generate QR code of the IDs and be able to print it.

## Process

### Configure ID type

To be able to create IDs, you must first configure the ID types. Login to OpenSPP as administrator, click on the square tile icon beside **Registry**, then click on **Registry** from the menu.

![](configure_ID_generate_qr/1.png)

Click the button **Configuration** in the top menu bar and select **ID Type**.

![](configure_ID_generate_qr/2.png)

This will display the table view of all existing IDs where you can either View, Create, Edit or Delete IDs.

#### Create ID type

To create a new ID type, click on **New**.

![](configure_ID_generate_qr/3.png)

**Name** \- (Required) The name of the ID type  
**Target Type** \- (Required) Define whether this ID is used for individuals or groups only, or both.  
**ID Type Validation** \- (Optional) Define a required prefix for the ID. For example, if inputting ‘022’ , then all IDs must start with 022, otherwise an error message will appear.

![](configure_ID_generate_qr/4.png)

#### Edit ID type

To Edit an existing ID Type, redirect back to ID type table view by clicking **Configuration** and selecting **ID types**. Click on the field you wish to modify and click **Save** to apply the changes.

![](configure_ID_generate_qr/5.png)

#### Delete ID type

To delete an ID type, select the ID type by clicking the checkbox and click on the **Actions** button. Click on **Delete**. Note that an ID type can only be removed if it is not in use.

![](configure_ID_generate_qr/6.png)

### Manage ID of a Group or Individual

Once the ID types are successfully configured you can add it to an Individual or Group by going to the **Registry**. Navigate to the desired Individual/Group and click on the **ID** tab.

![](configure_ID_generate_qr/7.png)

**ID type** \- Displays the type of ID.  
**ID Number** \- Displays the value of the ID  
**Expiry Date** \- Indicates when the ID will expire  
**Status** \- Indicates if the ID is valid or invalid  
**Description** \- Description of the ID.

#### Add ID

To add an ID, click on **Add a line** under the ID tab and select the type of ID you desire to add.

![](configure_ID_generate_qr/8.png)

Alternatively, you can also add an ID by **import to update an already existing individual or group** along with its new ID details, Read [Import registrant data](https://docs.openspp.org/tutorial/user_guides/import_registrant_data.html) to learn more. You would need the following column headers for the ID data.  
**reg_ids/id_type** \- ID pass, UMID etc.. make sure that the id type you will import is already defined in OpenSPP.  
**reg_ids/status** \- Valid or Invalid.  
**reg_ids/value** \- 11223412394, etc..

#### Edit ID

To edit an ID, click on the field to edit it. Once done click the **Save** icon beside the Gear icon. You may also click on the **Counterclockwise arrow** icon to undo any changes.

![](configure_ID_generate_qr/9.png)

#### Delete ID

To delete an ID, click on the trashbin icon that corresponds to the ID you wish to delete.

![](configure_ID_generate_qr/10.png)

### Generate QR code

To generate QR code, make sure **OpenSPP POS: ID Redemption** is installed and activated on your OpenSPP instance. When installed, you should be able to see a **green printer button** beside the ID values from the ID tab of a Group or Individual.

![](configure_ID_generate_qr/11.png)

Once you click the green printer button, a download of a pdf will automatically start which contains the ID information and QR code.

![](configure_ID_generate_qr/12.png)
</file>

<file path="docs/user_guide/registry_management/import_export_data.md">
### Content from docs/howto/user_guides/export_registrant_data.md

# Export Registrant Data

## Introduction

This guide details the process of exporting registrant data from OpenSPP. Exporting data is crucial for managing and analyzing the information of registrants effectively within the OpenSPP system.

## Prerequisites

In order to be able to export registrant data using OpenSPP, ensure the following:

- Have authorized access to the OpenSPP platform.
- Determine the specific fields relevant to the data you wish to export.

## Objective

Upon completing this guide, users will be able to successfully export data for individuals or groups from OpenSPP for multiple purposes, such as record keeping, importing to add new individuals or groups, or importing to update existing individuals or groups. Ensuring the data is in a usable format.

## Step-by-step

1. Log in to OpenSPP with an account that has admin rights. Learn how to set up roles and accounts here(yet to be published).

2. When logged in successfully, you will be redirected to the **Registry** page. If it does not take you directly to the **Registry**, click the four-square icon on the top-left corner to bring up the menu, and then select **Registry**.

![](export_registrant_data/1.png)

3. It is possible to export either **Groups** or **Individuals** depending on the needs. Navigate to the wished export level by clicking either **Groups** or **Individuals** in the top navigation bar.

![](export_registrant_data/2.png)

4. Select the checkboxes to the left of the entries you want to export.

- If your aim is to export for the purpose of record-keeping, click on the checkboxes you wish to export or click checkbox beside **Name** header to select all records on the current page, additionally, If there are more records than can be displayed on the page, they can be selected by clicking **Select all**.

![](export_registrant_data/3.png)

- If your aim is to export for the purpose of obtaining necessary fields as headers to be able to import to add new individuals or groups, select and click on the checkbox for at least one of the records from the list. Your aim during export is to select headers that are relevant to your import and it is therefore only necessary to export one record from groups or individuals to obtain the fields as headers already configured into the exported excel file.
- If your aim is to export for the purpose of import to update existing individuals or groups, select and click on the checkbox on the records you wish you update.

5. Navigate to the **Action** menu and select **Export**. This will display a popup window titled **Export Data**, where the export should be configured.

- If your aim for the import is to update existing individuals or groups, select and click the checkbox **I want to update data (import-compatible export)**. This will disable all options in **Available fields** that cannot be used for updates and will automatically include an external Id column in the exported file. Otherwise, skip this step.
- Select **XSLX** or **CSV** as export format.
- In the **Available fields** section, choose the fields you want to export by clicking on the **+** icon. To remove selected fields, click the trash icon beside the field name under the **Fields to export** column.

![](export_registrant_data/4.png)

6. Click **Export** to download the file.

- Perform the export process carefully to ensure the data is exported in a usable format and stored securely to prevent unauthorized access.


### Content from docs/howto/user_guides/import_registrant_data.md

# Import registrant data

## Introduction

In this how-to guide, you will learn the process of importing registrant data in CSV or Excel format using the OpenSPP platform. The how-to guide covers the import of new data as well as the update of existing data.

## Prerequisites

To import registrant data into the OpenSPP, you need to:

- Ensure you have a user account with admin access to the OpenSPP platform. Learn more in this how-to: [How to-Administrating role-based access](https://docs.openspp.org/howto/user_guides/administrating_role_based_access.html)
- Prepare registrant data in CSV (Comma-Separated Values) or XLSX (Excel) format.
- Have access to spreadsheet software capable of editing and saving CSV or Excel files, such as Microsoft Excel.

## Objective

After performing this task, you will have successfully imported new or updated existing registrant data into OpenSPP, which will ensure an effective, efficient, and targeted delivery of social protection services. You will also gain proficiency in handling data imports, a crucial aspect of system administration in OpenSPP.

## Step-by-step

### Import to add new individual or group

In order to perform an import, the correct headers need to be used. The easiest way to correctly obtain this is to export a record from the system with the headers that should be used for the import.

1. To export an individual or group, follow the steps in [Export Registrant Data](https://docs.openspp.org/howto/user_guides/export_registrant_data.html).

2. Once you have successfully downloaded the exported file, it will have a format similar to the below screenshot. Which headers are included will depend on the fields selected in the export; this example displays one individual data exported. Keep only the headers in row **1**, and delete all other rows.

![](import_registrant_data/1.png)

3. Format to Text all empty fields for columns that contain numeric values

- To format cells to text, locate a field header with a numeric value, for instance, Columns **C**, **E**, and **F**, on the screenshot Excel document.
- Click on the column header. Once highlighted, right-click, select, and click **Format Cells**; then select **Text** and click **OK**.
- Repeat on columns with numbers as values.

4. Fill in the fields with values accordingly. Please take note of the following:

- Leaving a cell empty will overwrite the corresponding field with a blank value in OpenSPP once it is successfully imported.
- Date format accepted by OpenSPP is YYYY-MM-DD only.

5. Launch OpenSPP and navigate to **Registry**, then click **Individuals** or **Groups** depending on the type of data, and then click **Favorites**. Select **Import records** from the displayed dropdown.

![](import_registrant_data/2.png)

6. Locate the file prepared for upload and click **Upload File**. You will then be redirected to the screen below.

![](import_registrant_data/3.png)

Make sure to click the checkbox for **Import in the background** when importing large files.

7. Click **Test**; this will validate the file to ensure the import document data is valid. If the message **Everything seems valid** is displayed, it is possible to proceed with the import.

![](import_registrant_data/4.png)

If there are any issues with the file, a message will instead be displayed giving directions on how to solve the issue. You may refer to the **Error handling** section of this document to learn more about common errors.

8. When you click **Import**, a notification will appear displaying the number of successfully imported records.

9. Verify uploaded records by clicking filter and select **Created on**, then click **Apply**. Newly created records should be displayed in the registry list.

![](import_registrant_data/5.png)

### Import to update existing individual or Group

To update existing records, select the desired existing records from OpenSPP and export them. Edit the values you wish to update in the exported file, then import it back to OpenSPP. The reason for exporting is to obtain the **unique id** for each record that is needed to perform an update.

1. To export an individual or group, follow the steps in [Export Registrant Data](https://docs.openspp.org/howto/user_guides/export_registrant_data.html).

2. Once you have successfully downloaded the exported file, open it and keep the **id** column in place; this serves as the identifier of the record when imported back to OpenSPP.

![](import_registrant_data/6.png)

3. Replace values in the other headers you wish to update, then save the file. Please take note of the following:

- Leaving a cell empty will overwrite the corresponding field in OpenSPP with a blank value once it is successfully imported.
- The date format accepted by OpenSPP is YYYY-MM-DD only.
- If you encounter formatting errors when inputting number values, format the whole column to text by clicking the column header; once highlighted, right-click, select, and click **Format Cells**; then select **Text** and click **OK**.
- You can now fill the cell with the desired numeric value.

4. Launch OpenSPP, navigate to **Registry**, and click either **Individuals** or **Groups**, depending on which type of data you wish to import. Click **Favorites** and select **Import records**.

![](import_registrant_data/7.png)

5. Locate your file and click **Upload file**. You will then be redirected to the screen below. Make sure to click the checkbox for **Import in the background** when importing large files.

![](import_registrant_data/8.png)

6. Click **Test**; this will validate the file to ensure the import document data is valid. If the message **Everything seems valid** is displayed it is possible to proceed with the import.

![](import_registrant_data/9.png)

If there are any issues with the file, a message will instead be displayed giving directions on how to solve the issue. You may refer to the **Error handling** section of this document to learn more about common errors.

7. Click **Import**, a notification will appear displaying the number of successfully imported records.

8. Verify uploaded records by clicking **Filters** and selecting **Last updated on**, then click **Apply**. Newly created records should display in the registry list.

![](import_registrant_data/10.png)

### Error handling

Several errors can occur during import, depending on the setup and the imported data. It is impossible to cover all possible errors here, but some of the more common ones are listed below.

### No matching records found

Some fields require values that are predefined in OpenSPP, such as the **category_id** field. Setting a value in this column that does not match the values found in OpenSPP will return an error message similar to the screenshot below.

![](import_registrant_data/11.png)

To resolve this type of error, only type in values that are defined in OpenSPP, in this case for **category_id**, You can navigate to **Registry**, then click **Configuration**, and after that, select **Registrant Tags**. You should see the list of the defined **Tags**, Only use these values from the list for **category_id**.

![](import_registrant_data/12.png)

### To import, select a field

If OpenSPP could not recognize your header, it will display **To import, select a field** beside the unrecognized header, similar to the screenshot below.

![](import_registrant_data/13.png)

To resolve this error, if you are familiar with what field you want to associate with your header, you can click **To import, select a field,** and then select from the list of fields; otherwise, you can remove the whole column associated with the header from your excel file as the field you are trying to import is not available to be imported into OpenSPP.

### Column contains incorrect values

Another error is the date format. If the imported format for fields related to date is incorrect, OpenSPP will display an error message similar to the below screenshot.

![](import_registrant_data/14.png)

To resolve this error, change the date format from your Excel file to this format YYYY-MM-DD, save the file, then import it to test again.

### You are not allowed to access ‘Import Matching’

An issue encountered when attempting to import using an account with wrong access rights permissions would look like the below screenshot.

![](import_registrant_data/15.png)

To resolve the error, assign a **System Admin** in the **Role** column to the user account that will perform the import or export process.

![](import_registrant_data/16.png)

Learn more about administering permissions here [Administrating role-based access](https://docs.openspp.org/howto/user_guides/administrating_role_based_access.html).


### Content from docs/tutorial/user_guides/export_registrant_data.md

# Export Registrant Data

## Introduction

In this tutorial, you will learn how to export registrant data from OpenSPP.

## Prerequisites

To be able to export registrant data from OpenSPP, the following is required:

- Authorized administrative access to the OpenSPP platform.
- Determine the list of fields relevant to the data you wish to export.

## Objective

By the end of this tutorial, you should understand the purpose and process of exporting registrant data from OpenSPP. You'll learn how to extract and save registrant data in a specified format for various purposes, such as data analysis, record keeping, or migration to another platform.

## Process

To access the export feature, you must log in to OpenSPP with a System Admin role account since the functionality is not included for other roles. Learn how to set up roles and accounts in here Administrating role-based access(yet to be published).

### Specify export parameters

Specifying export parameters is done in the Registry section of OpenSPP, which you can access by clicking on the four-square icon in the top-left corner and selecting **Registry**.

![](export_registrant_data/1.png)

Depending on your needs, you can export data for **Groups** or **Individuals**. The export procedure is identical in both cases, but the exportable fields differ.

Navigate to either **Groups** or **Individuals** and select which records to export by clicking the checkboxes beside each record. To select all displayed records, click the checkbox beside **Name**. If you want to export more records than are displayed on the page, select them by clicking **Select all**.

![](export_registrant_data/2.png)

After selecting the records, click the **Action** button and select the **Export** action from the list of actions.

![](export_registrant_data/3.png)

Two formatting options are available when exporting data: **CSV** and **XLSX**. Which one to select depends on how you will use the exported file.

The left column displays all data fields available for export, and the right column (**Fields to export**) shows the fields included in the file export. Some fields are pre-selected by default, such as **Name, Address, Phone**, etc. Examples of fields include date of birth, registration date, program types, or demographic information. Select the fields you would like to export by clicking the **+** icon. Fields indicated with an arrow > also contain subfields to narrow down the data you want to export. Clicking the arrow will display the subfields available for selection. You can remove fields in the **Fields to export** column by clicking the trash icon. Depending on your requirements, you can add any fields available for export in the left column.

Once you are satisfied with the selected fields in the right column, click the **Export** button at the bottom of the export window to start the export.

### Export to add or update existing data

If you aim to update existing or add new data in OpenSPP, tick the checkbox **I want to update data (import-compatible export)**. By ticking this checkbox, a column **Id** is automatically included in the exported file, containing the external identifier value of each **registrant** or data. This value identifies the existing registrant when performing a data update to allow for updating its other **fields**. By ticking this checkbox, some fields will be automatically hidden and made unavailable for export; this limits you to the fields you can update in OpenSPP.

### Creating export templates

Create a template for the set of fields that you have selected to make it use to perform the same export later.

By clicking on the dropdown arrow, click on **New template**, set a name for your template, make sure you have already selected your desired fields for this template, and click the save icon.

![](export_registrant_data/4.png)

After saving, you can select your template by clicking on the dropdown arrow again and clicking the name of your template.

The specific steps and interface may vary depending on the OpenSPP version. Always seek assistance from the support team if you need further guidance.


### Content from docs/tutorial/user_guides/import_registrant_data.md

# Import registrant data

## Introduction

In this tutorial, you will learn the process of importing registrant data in CSV or Excel format using the OpenSPP platform. The tutorial covers the import of new data, as well as the update of existing data.

## Prerequisites

To import registrant data into the OpenSPP, you need to:

- Ensure you have a user account with admin access to the OpenSPP platform. Learn more in this tutorial:[Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html)
- Prepare registrant data in CSV or Excel format.
- Have access to spreadsheet software capable of editing and saving CSV or Excel files, such as Microsoft Excel.

## Objective

This tutorial aims to instruct users on how to efficiently manage registrant import within the OpenSPP system. It includes steps for importing substantial data volumes from CSV or Excel files, essential for incorporating new beneficiaries as programs grow.

## Process

The import process consists of logging in to OpenSPP with an admin user account, navigating to the registry, exporting registrants to obtain the correct file format, updating the values in the file, and importing it back into OpenSPP.

### Login with proper user access rights

To prevent data mishandling and improve data security, the permission to import and export data into OpenSPP is exclusive to user accounts with **System admin** role. Learn more about setting up and configuring admin role user accounts here [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html). To verify that your user account has the right permissions, navigate to the four-square icon on the top-left corner and click **Settings** from the list, click **Users & Companies** from the header; then click **Users**. This should display all user accounts in OpenSPP.

![](import_registrant_data/1.png)

Click on the row of the user account and make sure that the **System Admin** role is set under the **Roles** tab.

![](import_registrant_data/2.png)

This indicates you have the correct access rights to perform **import** and **export**.

### Export records to obtain necessary headers

Exporting records is associated with import, as it guides you on which **fields** are available to use when you want to add or update information.

If the import aims to add a new individual or group (as opposed to updating already existing data), you should export headers that are relevant to your import. You only need to export one record from groups or individuals to obtain the correct headers to use. See below for an example of a file with the relevant headers and a single record.

![](import_registrant_data/3.png)

If the import aims to update already existing individuals or groups, you need to obtain the reference ID for all the records that should be updated and export them. See below an example of a file with headers and multiple records which all include the column for ID.

![](import_registrant_data/4.png)

To produce a file that includes the reference and all other fields mandatory for the update, tick the checkbox for **I want to update data (import-compatible export)** in the export dialogue box. Selecting this checkbox also removes fields that cannot be imported back to OpenSPP from **Available fields**. An example of such a field is **Age**, which is a calculated field based on the **Date of Birth** of the individual and therefore cannot be updated through import.

![](import_registrant_data/5.png)

These unique identifiers are associated with each of the records. When you import the Excel file back into OpenSPP after you have updated your desired fields, make sure the values for the fields you updated only affect the ones you intend to import.

Learn more about export registrant data in Tutorial: [Export Registrant Data](https://docs.openspp.org/tutorial/user_guides/export_registrant_data.html)

### Preparing file for import

To add new individuals or groups, prepare the Excel file for import by converting cells to text for all fields that consist of numbers; for instance, **phone, date of birth, and registration date**. This is to avoid data errors when inputting number values into these fields. For example the **phone field**, where mobile numbers may start with the + symbol or with leading zeroes can cause a mobile number to be formatted unexpectedly. It is therefore important to format cells to text before adding number values. Also note that when saving the file, only CSV and XLSX formatted files are allowed for import.

To update existing individuals or groups, open the exported Excel file and modify the cells you wish to update. Note that you should only format specific cells to text if your values break upon input. As in the image below, inputting a phone number with a leading + symbol is automatically formatted. In this case, you should format the specific cell to **Text** to resolve the issue.

![](import_registrant_data/6.png)

### Perform import

After the file is verified and ready, the import can be performed using an admin account. Navigate to the **Registry**, and depending on what type of data you are going to import, either click **Individuals** for individual records or **Groups** for group records. Click on the **Favorites** icon, then choose **Import records** from the dropdown menu. You will be redirected to the upload page. Click on the **Load File** button, and choose the file that you prepared. After uploading your file, you will be redirected to the page below.

![](import_registrant_data/7.png)

Click **Test**; this will validate the data in the import document. If the message **Everything seems valid is displayed**, it is possible to proceed with the import.

![](import_registrant_data/8.png)

If there are any issues with the file, a message will instead be displayed giving directions on how to solve the issue. You may refer to the **Error handling** section of this document to learn more about common errors.

When the file is considered valid, it is possible to click the **Import** button. This will redirect to the main table page, and you will receive a notification informing that the records have been successfully imported.

![](import_registrant_data/9.png)

### Error Handling

OpenSPP displays different types of error messages on the import page when encountering an error after clicking the **Test** button. This ensures no invalid value or file would compromise data in OpenSPP. Therefore, it is important to always **Test** the file first before importing. Here are common errors encountered during import.

### No matching records found

Some fields require values that are predefined in OpenSPP, such as the **category_id** field. Setting a value in this column that does not match the values found in OpenSPP will return an error message. This error will be similar to the screenshot provided below.

![](import_registrant_data/10.png)

To resolve this type of error, only type in values that are defined in OpenSPP, in this case for **category_id**, you can navigate to **Registry**, then click **Configuration**, and after that, select Registrant **Tags**. You should see the list of the defined Tags. Only use these values from the list for **category_id**.

![](import_registrant_data/11.png)

### To import, select a field

If OpenSPP could not recognize your header, it will display **To import, select a field** beside the unrecognized header, similar to the screenshot below.

![](import_registrant_data/12.png)

To resolve this error, if you are familiar with what field you want to associate with your header, you can click To **import, select a field**, and then select from the list of fields you wish to associate your field values with, otherwise, you can remove the header from your excel file as the field you are trying to import is not available to be imported into OpenSPP.

### Column contains incorrect values

Another error is the date format, if the imported format for fields related to date is incorrect, OpenSPP will display an error message. This error will be similar to the screenshot provided below.

![](import_registrant_data/13.png)

To resolve this error, fix the date format from your Excel file to this format **YYYY-MM-DD**, save the file, then import to test again.

### You are not allowed to access ‘Import Matching’

An issue was encountered when attempting to import using an account with the wrong access rights permissions. This error will be similar to the screenshot provided below.

![](import_registrant_data/14.png)

To resolve this error, assign an admin role into the user account that will perform the import or export process. Learn more about administering permissions here [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html).
</file>

<file path="docs/user_guide/registry_management/index.md">
# Registry Management

This section contains guides for managing registrant data and registry operations within OpenSPP.

```{toctree}
:maxdepth: 2
:caption: Contents

register_individual
import_export_data
setting_up_farmer_registry
identity_management
using_change_requests
using_event_data
```
</file>

<file path="docs/user_guide/registry_management/register_individual.md">
# Register new individual

## Introduction

To integrate new individual information into the system and store it in the registry. A registrant becomes a beneficiary only after enrollment in a social protection program. The registration process is a critical component in the efficient administration of social protection, utilizing the recorded information to identify individuals, evaluate their needs, confirm their eligibility for social protection programs and other social services, and accurately determine benefit amounts. Initiatives for mass registration may occur at the start of a new program or during the creation of a new registry. Furthermore, new applicants can be added to existing programs or registries continuously.

## Prerequisites

To register a new individual in OpenSPP, you need to gather all required information for the new individual and understand the standard operating procedures for your specific program.

## Objective

After following this guide, users will be able to register a new individual in OpenSPP.

## Step-by-step

When registering a new individual, the following steps need to be taken:

- **Registering the new individual:** in this step, all personal information about the individual will be added to the system.

- **Creating a new group:** if the individual should be added to a group, this needs to be created if it does not exist yet.

- **Adding the individual to a group:** if the individual should be added to a group, this is done as the final step.

## Registering new individual

1. Log in to OpenSPP, then click on the four-square icon, click **Settings**, and select **Registry**.

![](register_new_individual/1.png)

2. Select **Individuals** from the toolbar.

![](register_new_individual/2.png)

3. Click **Create**.

![](register_new_individual/3.png)

4. You will be directed to the **Individual** information page.

![](register_new_individual/4.png)

5. Enter the necessary values for the individual as required by your programme.

![](register_new_individual/5.png)

6. Verify the entered information and click **Save** to complete the registration.

![](register_new_individual/6.png)

7. Navigate to **Registry** and select **Individuals** from the toolbar. The new individual record is now available in table view.

![](register_new_individual/7.png)

## Creating new group

1. Navigate to **Registry** and select **Groups** from the toolbar. Click on **Create**.

![](register_new_individual/8.png)

2. You will be directed to the **Group** information page.

![](register_new_individual/9.png)

3. Enter the necessary values for the group as required by your programme. Choose the **Kind** of group you are targeting from the drop-down list.

![](register_new_individual/10.png)

4. After ensuring all the information you entered is correct, click the **Save** button to complete the registration process. Once completed, the personal information page of the **Groups** record will appear as shown below.

![](register_new_individual/11.png)

5. Navigate to **Registry** and select **Groups** from the toolbar. The new group record is now available in table view.

![](register_new_individual/12.png)

## Adding new individual to group

1. Click on the group you created in the table view. Click on **Add a line** to add the individual(s) to the group. You can select the individual you wish to add from the drop-down list or by clicking on **Search More**. When finished, click **Save**.

![](register_new_individual/13.png)

2. After you click **Save**, the added individual(s) is displayed in the list.

![](register_new_individual/14.png)


---

## Merged Content



### Content from docs/tutorial/user_guides/register_new_individual.md

# Register new individual

## Introduction

To integrate new individual information into the system and store it in the registry. A registrant becomes a beneficiary only after enrollment in a social protection program. The registration process is a critical component in the efficient administration of social protection, utilizing the recorded information to identify individuals, evaluate their needs, confirm their eligibility for social protection programs and other social services, and accurately determine benefit amounts. Initiatives for mass registration may occur at the start of a new program or during the creation of a new registry. Furthermore, new applicants can be added to existing programs or registries continuously.

## Prerequisites

To register an individual for OpenSPP, you need to:

- Ensure that you have the necessary user permission.
- Prepare the required data for the individual.

## Objective

By the end of this tutorial, you should be able to register new individuals on the OpenSPP platform and add new individuals to groups.

## Process

When registering a new individual, the following steps need to be taken:

- **Registering the new individual**: in this step, all personal information about the individual will be added to the system.

- **Creating a new group**: if the individual should be added to a group, this needs to be created if it does not already exist.

- **Adding the individual to a group**: if the individual should be added to a group, this is done as the final step.

### Registering new individuals

Click on the four-square icon in the top-left corner. Select **Registry** then click **Individuals**.

![](register_new_individual/1.png)

Click on **Create** to be directed to the registration interface for new applicants

![](register_new_individual/2.png)

Enter the necessary values for the individual as required by your programme. After verifying the entered information, click **Save** to complete the registration process. Once complete, the personal information page of the individual record will look like this:

![](register_new_individual/3.png)

The record of the new individual is now displayed in the **Individuals** list in the **Registry** page.

![](register_new_individual/4.png)

### Creating new group

Navigate to **Registry** then click **Groups**. Click on **Create**.

![](register_new_individual/5.png)

You will be directed to the registration interface for new **Groups**.

![](register_new_individual/6.png)

After ensuring all the information is correctly entered, click **Save** to complete the registration process. Once complete, the personal information page of the **Groups** record will look like this:

![](register_new_individual/7.png)

The record of the new group is now displayed in the **Groups** list in the **Registry** page.

![](register_new_individual/8.png)

### Adding new individual to group

Click a group you wish an individual to be added into. Click **Add a line** and select an individual. You can repeat this action to add more individuals.

![](register_new_individual/9.png)

Click **Save**. The newly added individual(s) is displayed.

![](register_new_individual/10.png)
</file>

<file path="docs/user_guide/registry_management/setting_up_farmer_registry.md">
# Setting up Farmer Registry

## Introduction

This guide will help you install the Farmer Registry module in OpenSPP and configure it to generate sample farmer data. This module enhances OpenSPP by providing functionalities related to farmer registration and management.

## Prerequisites

Before you begin, ensure you have the following:

- Administrative access to OpenSPP.
- An API Key for MapTiler to enable GIS functionality.
- Developer mode of OpenSPP should be enabled to set up the MapTiler key.

## Objective

By the end of this guide, you will be able to set up the farmer registry.

## Step-by-step

### Installing the Farmer Registry

1. Log in to OpenSPP, click on the nine-square icon, and then click Apps.

![](setting_up_farmer_registry/1.png)

2. Search for Farmer **Registry: Demo** and click **Activate** to install it. This will also install the prerequisite modules.

![](setting_up_farmer_registry/2.1.png)

3. Note that after installation the button Learn More will be displayed.

![](setting_up_farmer_registry/2.2.png)

### Setting Up the API Key for MapTiler

1. Go to **Settings**, select **Technical** and click **System Parameters**.

![](setting_up_farmer_registry/5.png)

2. Click the **New** button and set the Key field to **spp_base_gis.map_tiler_api_key** and enter the actual API Key for MapTiler in the **value** field.

![](setting_up_farmer_registry/6.png)

3. Click **Save**.

### Generating Sample Farmer Data

1. Navigate to **Registry** from the top toolbar.

2. Select **Configuration** and click on **Generate Sample Farmer Data**.

![](setting_up_farmer_registry/3.png)

3. Click **New**. On the displayed screen, add values for the **Name** field and enter the desired number of groups in the field **Number of Groups**.

4. Click the **Generate Sample Data** button located at the top-center of the page. This will populate the registry with sample farmer data.

![](setting_up_farmer_registry/4.png)
</file>

<file path="docs/user_guide/registry_management/using_change_requests.md">
# Change Requests

## Introduction

Change Request Management is a critical component of Dynamic and Adaptive {term}`social protection` programs, which require the ability to make adjustments in real-time to meet the changing needs of {term}`beneficiaries`. OpenSPP's built-in Change Request Management system allows individuals and groups to request changes to their {term}`registration` or program participation, such as updates to personal information or changes in {term}`eligibility`. With OpenSPP's built-in Change Request Management system, program administrators can manage and track change requests in a structured and efficient manner, ensuring that requested changes are validated and processed in a timely manner.

The Change Request Management system in OpenSPP allows for the creation and submission of change requests through an agent interface or a third party app, as well as the validation of requests through a configurable workflow. This ensures that only validated requests are processed, and that the necessary approvals and authorizations are obtained before making any changes to program participation.

In this user guide, we will provide step-by-step instructions on how to use OpenSPP's Change Request Management system. We will cover everything from configuring and customizing the system to meet the needs of your organization, to processing change requests and tracking their status. By the end of this guide, you should have a solid understanding of how Change Request Management can be used to support Dynamic and Adaptive Social Protection programs, and how to leverage OpenSPP's capabilities to achieve these goals.
</file>

<file path="docs/user_guide/registry_management/using_event_data.md">
# Event data

TODO
</file>

<file path="docs/user_guide/consent_management.md">
# Consent management

## Introduction

Consent management is an essential component of {term}`social protection` programs that deal with {term}`personal data`. In order to protect the privacy of {term}`beneficiaries` and ensure that their personal information is being used and shared appropriately, it is important to obtain their consent for data processing and sharing.

OpenSPP provides a built-in consent management system that enables program administrators to manage and track consent from beneficiaries. With OpenSPP's consent management, administrators can easily obtain, store, and manage consent from beneficiaries for data processing and sharing.

By giving beneficiaries control over how their data is used and shared, OpenSPP's consent management helps to build trust and confidence in social protection programs. This not only ensures compliance with {term}`data protection` regulations, but also improves the overall {term}`effectiveness` of social protection programs by promoting transparency and accountability. In this user guide, we will provide step-by-step instructions on how to use OpenSPP's consent management system to obtain and manage consent from beneficiaries.
</file>

<file path="docs/user_guide/grievance_management.md">
# Grievance Redressal Management

## Introduction

Grievance management is an important aspect of {term}`social protection` programs, as it provides a mechanism for {term}`beneficiaries` to report and resolve complaints or issues related to program implementation. In OpenSPP, we have developed a built-in grievance management system to help program administrators effectively manage and resolve grievances in a timely and efficient manner.

This user guide will provide step-by-step instructions on how to use the grievance management system in OpenSPP, including setting up the system, defining grievance types and categories, receiving and processing grievances, and monitoring grievance resolution. By following these instructions, program administrators can ensure that grievances are effectively addressed, beneficiaries are satisfied with program implementation, and social protection programs are successful in achieving their goals.
</file>

<file path="docs/user_guide/index.md">
# User Guide

This section provides practical, task-oriented instructions for using OpenSPP's features in day-to-day operations. These guides are designed for administrators and end-users who need to accomplish specific tasks within the platform.

## Registry Management

Guides for managing registrant data and registry operations:

- {doc}`registry_management/register_individual`
- {doc}`registry_management/import_export_data`
- {doc}`registry_management/setting_up_farmer_registry`
- {doc}`registry_management/identity_management`
- {doc}`registry_management/using_change_requests`
- {doc}`registry_management/using_event_data`

## Program Management

Guides for creating and managing social protection programs:

- {doc}`program_management/create_program`
- {doc}`program_management/enroll_beneficiaries`
- {doc}`program_management/create_cycle`
- {doc}`program_management/configure_entitlements`
- {doc}`program_management/allocate_funds`
- {doc}`program_management/implementing_pmt`
- {doc}`program_management/using_pmt`
- {doc}`program_management/using_geotargeting`
- {doc}`program_management/using_indicators`
- {doc}`program_management/using_vouchers`
- {doc}`program_management/export_beneficiaries`

## Administration

Administrative tasks and system management:

- {doc}`administration/user_access`
- {doc}`administration/service_points`
- {doc}`administration/managing_custom_fields`
- {doc}`administration/using_audit_logs`
- {doc}`administration/import_areas`
- {doc}`administration/hardware_integration`

## Other Features

- {doc}`pos_usage`
- {doc}`reporting_dashboards`
- {doc}`grievance_management`
- {doc}`consent_management`

```{toctree}
:maxdepth: 2
:hidden: true

registry_management/index
program_management/index
administration/index
pos_usage
reporting_dashboards
grievance_management
consent_management
```
</file>

<file path="docs/user_guide/pos_usage.md">
# Point of Sales

## Introduction

In this Tutorial, you will learn about the POS feature; covering configuration, creating Point of sales and setting it by area.

## Prerequisites

To utilise this feature, you need the following:

- Make sure that both modules **OpenSPP POS: ID Redemption** and **OpenSPP POS** are installed and activated.
- Have existing individual records in your registry, either by creating records manually or importing records into OpenSPP.
- Have an access role either as **Operations Admin** or **POS operator** to perform tasks in the POS Application.
- Have an access role as an **Operations Admin** or **Administrator** to perform tasks in OpenSPP. Learn more about this in the guide [Administrating role-based access](https://docs.openspp.org/tutorial/user_guides/administrating_role_based_access.html)
- Have an existing cycle with beneficiaries and entitlements generated on a program. Learn more about this in the guide. [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html)

## Objective

By the end of this Tutorial, you will be able to configure Point of sales, manage, classify by area, and generate transactions within the POS feature.

## Process

### Verify POS module

To be able to create Point of sales, you have to make sure that the necessary modules are installed and activated on your OpenSPP instance, this can be verified by logging in to your OpenSPP instance as Administrator, go to **Apps**, search for **OpenSPP POS** and **OpenSPP POS: ID Redemption** respectively and if not already done, activate them by clicking **Activate** button.

![](point_of_sales/1.png)

After successfully activating, it should display **Learn more** as the remaining button.

### Configure POS Settings

Navigate to the menu screen. On the sidebar menu, click **Point of Sale** to open the POS dashboard.

![](point_of_sales/2.png)

Click on **Configuration** and select **Payment methods** to see the payment methods available. By default, the options **Cash**, **Bank** and **Customer Account** are available.

![](point_of_sales/3.png)

#### Create Point of sales

To create a Point of sale, click on **Point of Sales** from the sidebar, click **Configuration** and select **Point of Sales,** then click on **New**.

![](point_of_sales/4.png)

Assign a name to the Point of Sale you want to create. It is also possible to assign the shop to a specific area by selecting the desired area from the dropdown. Click on **Save** button to keep the changes.

![](point_of_sales/5.png)

#### Select Payment methods

To select a payment method for your Point of sale, click on **Point of Sales** from the sidebar, navigate to **Configuration** and click on **Settings.** From the **Point of Sale** dropdown, click and select the Point of sale you want to manage.

![](point_of_sales/6.png)

Once you have selected a Point of sale, click on the dropdown from **Payment methods** and select the desired payment methods for this Point of sale. Click the **Save** button to keep the changes.

Please Note: For **Cash** payment method a unique payment method needs to be created for each Point of sale. In order to create a new **Cash** Payment method, navigate to **Point of Sale**, click on **Configuration** and select **Payment methods**, then click **New**.

![](point_of_sales/7.png)

Define the name of the Payment method and click on the Journal Input field.

![](point_of_sales/8.png)

Click on **Search More** from the dropdown.

![](point_of_sales/9.png)

Click on **New** button.

![](point_of_sales/10.png)

Define the **Journal name**, then select **Cash** under **Type** dropdown. To complete the journal creation, click **Save & Close.**

![](point_of_sales/11.png)

You may now select the new Cash payment method for a Point of sale. Navigate to **Configuration** and click on **Settings**. Select a **Point of sale**. Then under payment methods dropdown, select your new Cash payment method and click **Save**.

![](point_of_sales/12.png)

#### Group Point of sales by area

In order to group Point of sales by area, make sure you have areas already existing in your OpenSPP instance. Learn more about importing areas in the guide [Import area](https://docs.openspp.org/tutorial/user_guides/import_areas.html). From the sidebar, navigate to **Point of Sale**, select **Configuration** and click **Point of Sales**. Select the Point of sale you wish to manage and assign by clicking an area from the dropdown **Area**.

![](point_of_sales/13.png)

Navigate to **Point of Sale** and select **Dashboard**. The Point of sales will now be grouped by Area.

![](point_of_sales/14.png)

Point of sales that do not belong to any area will display as minimized. Click the **<>** arrows from the dashboard to expand the view. Click on **Gear** icon to Collapse view.

![](point_of_sales/15.png)

### Starting Point of sale in Web view

The POS application is viewable in either web view or mobile view, this section will be covering the web view, for mobile view, proceed here: [Starting Point of sale in Mobile view](#starting-point-of-sale-in-mobile-view).

The POS application can be operated by either an **Administrator** or a **POS Operator** role.

To start the Point of sale, click on **Point of Sale** in the sidebar. You should be redirected to the **Dashboard**, where you can select the Point of sale you wish to start.

![](point_of_sales/16.png)

Click on **New Session** to be redirected to the POS Application, then click on **Beneficiary** to display the list of Beneficiaries.

![](point_of_sales/17.png)

Click on the Beneficiary you wish to transact with.

![](point_of_sales/18.png)

Once selected, the beneficiary's name will be displayed in the POS application.

![](point_of_sales/19.png)

Click on the **Entitlement** button to display all the entitlements available for this Beneficiary.

![](point_of_sales/20.png)

Select the entitlement you wish to disburse by clicking on it. Then click **Close** button.

![](point_of_sales/21.png)

Click on **Payment** button to proceed.

![](point_of_sales/22.png)

Click on **Validate** button to complete.

![](point_of_sales/23.png)

The transaction is now complete. If you wish to start a new transaction, click on **New Order**.

![](point_of_sales/24.png)

### Starting Point of sale in Mobile view

The POS application is viewable in either web view or mobile view. This section will cover the Mobile view, for Web view, proceed here: [Starting Point of sale in Web view](#starting-point-of-sale-in-web-view).

Click on the upper left box icon to bring up the menu, then click **Point of Sale.**

![](point_of_sales/25.png)

You will be taken to the **Dashboard**. Select a Point of sale you wish to start by swiping horizontally and click on **New Session.**

![](point_of_sales/26.png)

Click on **Review**

![](point_of_sales/27.png)

Then click on **Beneficiary** to display a list of beneficiaries.

![](point_of_sales/28.png)

Click on the relevant beneficiary in the displayed list.

![](point_of_sales/29.png)

Once selected, the beneficiary's name is displayed in the POS application.

![](point_of_sales/30.png)

Click on **More** and then **Entitlement** to display available entitlements for this beneficiary.

![](point_of_sales/31.png)

Click on the entitlement you wish to disburse and click the **Close** button.

![](point_of_sales/32.png)

Optionally, you may add a note by clicking on **More** followed by **Beneficiary note**. Fill in the note and click on **Add** button. This note will be displayed on the receipt.

![](point_of_sales/33.png)

Click on the **Payment** button to proceed.

![](point_of_sales/34.png)

Click on the **Validate** button to complete.

![](point_of_sales/35.png)

The order or transaction is now complete. Click on **New Order** to start a new transaction.

![](point_of_sales/36.png)

### Refunds

When necessary, it is possible to do refunds for cash entitlements. To start a refund, click on a Point of sale and select a beneficiary. Click on **Refund**.

![](point_of_sales/37.png)

The orders/transactions associated with the beneficiary will be displayed. Click on any transaction to view the details on the right side.

![](point_of_sales/38.png)

Click on an item. You may only refund items that are disbursed, indicated by the negative (-) sign beside its amount.

![](point_of_sales/39.png)

Note that If an item has been already refunded, it will display **Refunded** and you will be unable to click it anymore.

![](point_of_sales/40.png)

Upon clicking the item, click **1** from the number pad key and then click on the **Refund** button.

![](point_of_sales/41.png)

The item to be refunded will be displayed on the menu. Click on **Payment.**

![](point_of_sales/42.png)

Select a payment method and click **Validate.** This completes the refund process.

![](point_of_sales/43.png)

To verify that the item was successfully refunded you can click on the burger menu on the top right corner of the screen.

![](point_of_sales/44.png)

Click on **Orders**. You will be redirected to the screen below. Click on **All active orders** and select **Paid**

![](point_of_sales/45.png)

Click on the Transaction that involves the Refund and notice that the amount is now a positive value indicating that the cash entitlement has been successful.

![](point_of_sales/46.png)
</file>

<file path="docs/user_guide/reporting_dashboards.md">
# Dashboards

## Programs dashboard

![](images/programs_dashboard.png)

Based on the foundation of Odoo and OpenG2P, OpenSPP facilitates rich data visualizations and dynamic reporting capabilities. This documentation delves into the system's approach towards data warehousing, reporting, and visualization.

Firstly, OpenSPP's architecture is designed with a key emphasis on configurability. This approach is particularly evident in its support for data warehousing. OpenSPP can be easily connected to advanced reporting platforms such as Apache Superset or Tableau. These powerful data visualization tools offer comprehensive capabilities for interactive data exploration, from basic charting to complex data processing. By allowing seamless integrations with such platforms, OpenSPP ensures that its data warehousing aligns with the organization's business intelligence requirements.

In addition to its robust data warehousing capabilities, OpenSPP offers dynamic reporting functionalities. Users can access real-time, web-based querying and dashboards through integrated platforms like Apache Superset or Metabase. These tools allow users to explore data on their terms, constructing personalized dashboards to capture essential insights. The integration of dynamic reporting capabilities within OpenSPP ensures that users can not only access their data but can also manipulate and explore it to discover valuable trends and patterns.

A pivotal aspect of OpenSPP's design ethos revolves around effective data visualization. OpenSPP supports data visualization through Apache Superset or Metabase, but it is the system's commitment to {term}`data privacy` that sets it apart. Before any visualization, OpenSPP ensures the anonymization of data, thereby upholding the privacy of the users while facilitating data-driven decision-making. Anonymization, along with the use of dynamic and interactive visualizations, allows users to gain actionable insights without compromising on privacy.

Furthermore, OpenSPP adheres to best practices in data visualization, such as using appropriate graph types for different data sets, providing proper context for data, and ensuring readability and accessibility. By following these guidelines, OpenSPP ensures that its visualizations are not only insightful but also ethical, effective, and user-friendly.


---

## Merged Content



### Content from docs/tutorial/dashboards_and_reports.md

# Dashboards and reports

## Introduction

Dashboard and reporting are essential components of {term}`social protection` program management. They provide program administrators with the information they need to make informed decisions and improve the {term}`effectiveness` of their programs.

In OpenSPP, users have access to a range of dashboard and reporting features that can help them gain insights into their social protection programs. These features allow users to generate customized reports and dashboards that track key performance indicators and provide real-time data on program performance.

In this tutorial, we will provide step-by-step instructions on how to use the dashboard and reporting features in OpenSPP for social protection programs. We will cover everything from setting up dashboard parameters and filters to creating and customizing reports, as well as tracking program performance metrics and sharing dashboards with other users. By the end of this tutorial, you should have a solid understanding of how to leverage OpenSPP's dashboard and reporting capabilities to improve the management of your social protection programs.
</file>

<file path="docs/addMetaData.py">
import os
import logging
metadata_check = """---
myst:
"""
metadata = """---
myst:
  html_meta:
    "description": ""
    "property=og:description": ""
    "property=og:title": ""
    "keywords": ""
---

"""
logging.basicConfig()
logger = logging.getLogger("addMetaData")
logger.setLevel(logging.INFO)

logger.info("Add html_meta snippet if necessary.")
count_files = {
    "modified": 0,
    "unmodified": 0,
}
docs_dir = "./docs" if os.path.isdir("./docs") else "."

for root, dirs, files in os.walk(docs_dir):
    for name in files:
        if name.endswith(".md"):
            filename = os.path.join(root, name)
            # print(filename)
            with open(filename, "r+") as f:
                data = f.read()
                if not data.startswith(metadata_check):
                    f.seek(0)
                    f.write(metadata)
                    f.write(data)
                    count_files["modified"] += 1
                    logger.info(f"{filename} html_meta prepended.")
                else:
                    count_files["unmodified"] += 1
logger.info(f'html_meta snippet added to {count_files["modified"]} files.')
logger.info(f'{count_files["unmodified"]} files unmodified.')
</file>

<file path="docs/robots.txt">
# Disallow all user agents from the following directories and files
User-agent: *
Disallow: /_sources/
Disallow: /.doctrees/
Disallow: /*.txt$
Disallow: /.buildinfo$
Disallow: /objects.inv$
</file>

<file path="docs/spelling_wordlist.txt">
acl
Odoo
OpenSPP
</file>

<file path="review_work/doc_contributor_guidelines.md">
# OpenSPP Documentation Contributor Guidelines

## 1\. Introduction

Welcome to the OpenSPP documentation project! These guidelines are intended for anyone writing or reviewing documentation to ensure consistency, quality, and usability. Our goal is to create documentation that is not only accurate and helpful for OpenSPP users but also serves as a valuable resource for the broader social protection community.

Familiarity with the proposed documentation structure is essential. Please refer to the Proposed OpenSPP Documentation Structure.

## 2\. Target Audience

Always keep the primary audience for the section you are writing for in mind:

*   **Decision Makers:** Need high-level overviews, benefits, features, and concepts. Avoid deep technical jargon.
    
*   **Administrators / End-Users:** Need clear, task-oriented steps (How-to Guides) and foundational learning (Tutorials). Focus on the UI and practical workflows.
    
*   **Developers:** Need technical depth, code examples, API details, architecture, and customization guides.
    

## 3\. Writing Style & Tone

*   **Style Guide:** Follow the [Microsoft Writing Style Guide](https://learn.microsoft.com/en-us/style-guide/welcome/ "null").
    
*   **Tone:** Informative, clear, concise, and friendly.
    
*   **Voice:** Use "you" to address the reader directly.
    
*   **Headings:** Use Sentence case (e.g., "Configure cash entitlements," not "Configure Cash Entitlements").
    
*   **Sentences:** Aim for one main idea per sentence. Keep sentences relatively short and easy to understand. Use one sentence per line in the source file for easier diffs and collaboration.
    
*   **Terminology:** Use consistent terminology. Refer to the Glossary and use the `:term:` role for defined terms (e.g., `` :term:`Social Registry` ``).
    

## 4\. Content Structure & Purpose

Adhere to the purpose of each main section as defined in the Proposed Structure:

*   **overview:** High-level introductions, features, benefits, concepts, use cases. _Target: Decision Makers, New Users._
    
*   **getting\_started:** Installation, initial setup. _Target: Admins, Developers._
    
*   **user\_guide:** Task-based "How-to Guides" for using the platform. Foundational workflows can be structured as "Tutorials". _Target: Admins, End-Users._
    
*   **developer\_guide:** Technical "How-to Guides" and explanations for development tasks. _Target: Developers._
    
*   **reference:** Detailed, factual lookup information (Modules, APIs, Technical Specs, Glossary). _Target: Developers, Admins._
    
*   **community:** Contribution, support, legal information. _Target: All._
    

**Tutorials vs. How-to Guides:**

*   **Tutorials (Learning):** Guide a beginner step-by-step to achieve basic competence. Explain the _why_. Primarily belong in `getting_started` or for foundational workflows in `user_guide`.
    
*   **How-to Guides (Doing):** Provide steps to solve a specific problem for someone with some existing knowledge. Focus on the _how_. Make up the bulk of `user_guide` and `developer_guide`.
    

**Platform-Agnostic Content (Important for Reference Goal):**

*   In `overview/concepts/` and `overview/use_cases/`, first explain the general principles, best practices, and challenges related to the topic (e.g., Social Registries) in a platform-agnostic way.
    
*   _Then_, explain how OpenSPP implements or addresses these points, linking to specific features and guides. Clearly separate general vs. OpenSPP-specific content.
    

## 5\. Formatting

*   **Markup:** Use MyST Markdown (`.md` files). Use reStructuredText (`.rst`) only where necessary (e.g., complex directives not supported by MyST).
    
*   **Code Blocks:**
    
    *   Use correct language identifiers for syntax highlighting (e.g., `python,` json, `xml,` bash). Verify lexers work using `make html`.
        
    *   Do _not_ use `...` to indicate omitted code; comment it out properly or use separate blocks.
        
    *   Use `console` for shell sessions showing commands and output. Use `shell` for commands only (no prompts).
        
*   **Images:**
    
    *   Provide descriptive `alt` text for accessibility.
        
    *   Keep width under 740px if possible.
        
    *   Use cards for captions and links to larger versions (see `myst-reference.md` example).
        
    *   Store images in `_static/` within relevant subdirectories. Use root-relative paths (e.g., `/_static/user-guide/my-image.png`).
        
*   **Links:**
    
    *   Use `{doc}` role for linking to other pages (e.g., `` {doc}`../user_guide/registry_management/register_individual` ``).
        
    *   Use `{ref}` role for linking to specific labels/headings (e.g., `` {ref}`my-heading-label` ``).
        
    *   Ensure all external links are valid (`make linkcheck`). Avoid linking to unstable sources like blogs if possible; summarize and cite instead.
        
*   **Metadata:** **Every page MUST have a `myst:` frontmatter block with `html_meta` containing accurate `title`, `description`, and `keywords`.**
    

## 6\. Quality Checks

Before submitting a Pull Request (PR):

*   Run `make html` locally to check for build errors or warnings (especially lexer issues).
    
*   Run `make vale` to check spelling, grammar, and style. Add necessary terms to `styles/Vocab/OpenSPP/accept.txt`.
    
*   Run `make linkcheck` to verify all external and internal links. Fix or justify any broken links.
    
*   Ensure `html_meta` is present and accurate on all modified/added pages.
    

## 7\. Review Process

**For Authors:**

*   Submit focused PRs addressing a single issue or documentation section.
    
*   Clearly describe the changes in the PR description.
    
*   Ensure all quality checks pass locally before submitting.
    
*   Respond to reviewer feedback promptly.
    

**For Reviewers:**

*   Verify the content is accurate and clear.
    
*   Check adherence to style and tone guidelines.
    
*   Ensure the content fits the purpose of its new section in the new structure.
    
*   Validate formatting (code blocks, images, links).
    
*   Confirm `html_meta` is present and makes sense.
    
*   Check for broken links (`make linkcheck` if possible).
    
*   Ensure adequate cross-linking to related topics.
    
*   Verify platform-agnostic content is handled correctly where applicable.
    

## 8\. Updating Documentation

Documentation is a living entity. If you notice outdated information, missing steps, or areas for improvement, please file an issue or submit a PR. Keep guides aligned with the current software version.
</file>

<file path="review_work/doc_migration_guide.md">
# Migrating OpenSPP Documentation to New Structure

## 1\. Introduction

This guide provides instructions for migrating the existing OpenSPP documentation content into the new, standardized structure outlined in the Proposed OpenSPP Documentation Structure. The goal is to improve organization, discoverability, and maintainability.

This process requires careful planning and execution, especially regarding updating links.

## 2\. Reference Documents

*   **New Structure:** Proposed OpenSPP Documentation Structure
    
*   **Contributor Guidelines:** OpenSPP Documentation Contributor Guidelines
    

## 3\. Migration Process Overview

The migration involves the following key phases:

1.  **Audit Existing Content:** Analyze each current documentation file.
    
2.  **Map to New Structure:** Determine the new location for each file.
    
3.  **Move & Rename Files:** Physically relocate files according to the map.
    
4.  **Refactor Content:** Adjust content to fit the new structure and guidelines.
    
5.  **Update Links & Cross-References:** Fix all internal links and navigation elements.
    
6.  **Build & Review:** Verify the migrated documentation builds correctly and is navigable.
    

## 4\. Step-by-Step Guide

**Step 1: Content Audit**

*   Create a list (e.g., in a spreadsheet) of all current `.md` and `.rst` files in the `docs/` directory (excluding `_static`, `_templates`, `conf.py`, `Makefile`, etc.).
    
*   For each file, determine:
    
    *   **Primary Purpose:** Is it mainly for Learning (Tutorial), Doing (How-to), Explaining (Concept), or Looking Up (Reference)?
        
    *   **Primary Audience:** Decision Maker, Admin/User, Developer?
        
    *   **Current Location:** Note the existing path.
        
    *   **Keep/Discard/Merge:** Decide if the content is still relevant, needs merging, or should be discarded.
        

**Step 2: Map to New Structure**

*   Based on the audit (Purpose & Audience), assign a **New Location** within the proposed structure (Proposed OpenSPP Documentation Structure) to each file you intend to keep or merge.
    
*   Identify content gaps (topics listed in the proposed structure but not covered by existing files). These will need new pages created later.
    
*   Plan any necessary merges (e.g., combining separate import/export guides).
    

**Step 3: Move & Rename Files**

*   Create the new directory structure locally (e.g., `overview/`, `user_guide/`, etc.).
    
*   Using your map from Step 2, physically move the files (`git mv old/path/file.md new/path/file.md`) to their new locations.
    
*   Rename files if necessary for clarity or consistency (use dashes `-`, lowercase).
    
*   Update the `.gitignore` file if any new patterns are needed for generated files in the new structure.
    

**Step 4: Refactor Content**

This is a significant step. For each moved file:

*   **Review Purpose:** Ensure the content aligns with the purpose of its new section (e.g., a file moved to `user_guide/` should be task-oriented).
    
*   **Rewrite Introductions/Conclusions:** Adjust the opening and closing paragraphs to fit the context of the new section.
    
*   **Apply "Principles First" (where applicable):** For files moved to `overview/concepts/` or `overview/use_cases/`, restructure to present general principles before OpenSPP specifics.
    
*   **Formatting:** Ensure adherence to the Contributor Guidelines (MyST, code blocks, images, :term: usage).
    
*   **Metadata:** **Critically important:** Add or update the `html_meta` block at the top of _every single page_ with an accurate `title`, `description`, and relevant `keywords`.
    
*   **Split/Merge:** Perform any content splitting or merging identified in Step 2.
    

**Step 5: Update Links & Cross-References**

This is the most error-prone step and requires diligence.

*   **Internal Links (`{doc}`):** Search across _all_ documentation files for `{doc}` references. Update the paths to reflect the new file locations. Relative paths (`../`) will likely need adjustment.
    
*   **Heading Links (`{ref}`):** Ensure the labels used in `{ref}` still exist in the target documents. If files were split or headings changed, these links might break.
    
*   **`toctree` Directives:** Update all `toctree` directives in `index.md` files (and potentially other pages) to list the correct paths of the files within that section. Ensure `:maxdepth:` and `:hidden:`/:`caption:` options are appropriate.
    
*   **Image Paths:** Verify that image paths (e.g., `/_static/...`) are still correct relative to the documentation root. Using root-relative paths (`/...`) is generally safer during restructuring.
    
*   **External Links:** While not directly affected by the structure change, this is a good time to re-run `make linkcheck` and fix any broken external links found.
    

**Tools:**

*   Use your IDE's "Find in Files" or command-line tools like `grep -r "{doc}" .` to locate links.
    
*   Be systematic. Go through the documentation section by section or file by file.
    

**Step 6: Build & Review**

*   Run `make clean` to remove old build artifacts.
    
*   Run `make html`. Address _all_ errors and warnings reported by Sphinx. Pay close attention to "document not in toctree" warnings or broken link errors.
    
*   Run `make linkcheck` again.
    
*   Run `make vale` again.
    
*   Open the locally built HTML (`_build/html/index.html`) in your browser.
    
    *   Click through the navigation extensively.
        
    *   Check internal links on various pages.
        
    *   Verify `toctree` structures are correct.
        
    *   Ensure pages render correctly.
        

### 5\. Tracking Progress

*   Use the spreadsheet created in Step 1 & 2 to track the migration status of each file (Audited -> Mapped -> Moved -> Refactored -> Links Updated -> Reviewed).
    
*   Consider using GitHub Issues or a project board for larger efforts to track tasks and assign work if multiple people are involved.
    

### 6\. Committing Changes

*   Make frequent, logical commits (e.g., commit after moving files for one section, commit after updating links for that section). This makes it easier to revert changes if something goes wrong.
    
*   Use clear commit messages describing the migration step performed.
    

This migration requires careful attention to detail, especially when updating links. Proceed methodically and test thoroughly at each stage.
</file>

<file path="review_work/doc_structure_proposal.md">
# New OpenSPP Documentation Structure

This document outlines a revised structure for the OpenSPP documentation, designed to cater to different audiences (Decision Makers, Developers, Administrators/End-Users) and provide clear entry points for the platform's main use cases (Social Registry, Farmer Registry, SP-MIS). Features are grouped by functional area.

## High-Level Directory Structure

```
docs/
├── index.md                 # Main landing page (links to use cases)
│
├── overview/                # High-level info for Decision Makers &amp; new users
│   ├── index.md
│   ├── features/              # Features by Functional Area
│   │   ├── index.md           # High-level feature categories/overview
│   │   ├── registry_data_management.md  # (Example split)
│   │   ├── program_design_config.md     # (Example split)
│   │   ├── entitlement_payments.md      # (Example split)
│   │   ├── integrations_apis.md         # (Example split)
│   │   ├── administration_security.md   # (Example split)
│   │   └── reporting_monitoring.md      # (Example split)
│   ├── why_openspp.md         # (New) Benefits and use cases
│   ├── use_cases/             # Use-Case Entry Points
│   │   ├── index.md           # (Optional) Overview of use cases
│   │   ├── social_registry.md # Links to relevant SR docs
│   │   ├── farmer_registry.md # Links to relevant FR docs
│   │   └── sp_mis.md          # Links to relevant SP-MIS docs
│   ├── concepts/              # Renamed from 'explanation' for broader scope
│   │   ├── index.md
│   │   ├── digital_public_infrastructure.md
│   │   ├── social_registry.md
│   │   ├── farmer_registry.md
│   │   └── ... (other principles &amp; concepts files)
│   └── case_studies/          # (New) Examples of OpenSPP in action
│       └── index.md
│
├── getting_started/         # Initial setup for Admins &amp; Developers
│   ├── index.md
│   ├── installation_docker.md # Split from installation_guide.md
│   ├── installation_pypi.md   # Split from installation_guide.md
│   ├── initial_config.md      # (New) Basic post-install steps
│   └── poc_and_pilot.md
│
├── user_guide/              # Task-based guides for Admins &amp; End-Users
│   ├── index.md
│   ├── registry_management/   # How-to guides for registry tasks (Common/SR/FR)
│   │   ├── register_individual.md
│   │   ├── import_export_data.md # Combine import/export
│   │   └── ...
│   ├── program_management/    # How-to guides for program tasks (SP-MIS focused)
│   │   ├── create_program.md
│   │   ├── enroll_beneficiaries.md
│   │   ├── configure_entitlements.md # Combine cash/in-kind/etc.?
│   │   ├── create_cycle.md
│   │   ├── allocate_funds.md
│   │   └── ...
│   ├── administration/        # How-to guides for admin tasks (Common)
│   │   ├── user_access.md
│   │   ├── service_points.md
│   │   └── ...
│   ├── pos_usage.md           # How-to guide for POS (SP-MIS focused)
│   ├── reporting_dashboards.md # (Needs Content) How-to use reports (Common)
│   ├── grievance_management.md # (Needs Content) How-to handle grievances (Common)
│   └── consent_management.md   # (Needs Content) How-to manage consent (Common)
│
├── developer_guide/         # Technical guides for Developers
│   ├── index.md
│   ├── setup.md               # (Existing contributing/setup-build.md)
│   ├── architecture.md        # (Existing technical_reference/architecture.md)
│   ├── module_development.md  # (Existing howto/developer_guides/module.md)
│   ├── customization/         # How-to guides for customization (Link from use cases)
│   │   ├── index.md
│   │   ├── customizing_areas.md
│   │   ├── customizing_audit.md
│   │   ├── customizing_change_requests.md
│   │   ├── customizing_entitlements.md
│   │   ├── customizing_registry.md
│   │   ├── customizing_fields.md
│   │   └── ...
│   ├── integrations/          # How-to guides for integrations (Link from use cases)
│   │   ├── index.md
│   │   ├── dci.md
│   │   ├── esignet.md
│   │   ├── oidc.md
│   │   └── keycloak_beneficiary_portal.md
│   ├── api_usage/             # API guides (Common)
│   │   ├── index.md
│   │   ├── external_api_xmlrpc.md # (Existing technical_reference/external_api.rst)
│   │   └── rest_api.md          # (Existing howto/developer_guides/rest_api.md + Needs Expansion)
│   ├── troubleshooting.md     # (Existing howto/developer_guides/troubleshooting.md) (Common)
│   └── best_practices.md      # (Needs Content or integration) (Common)
│
├── reference/               # Detailed reference material
│   ├── index.md
│   ├── modules/               # Existing module documentation (Link from use cases)
│   │   ├── index.md
│   │   ├── spp_area.md
│   │   ├── g2p_programs.md
│   │   └── ... (all module files)
│   ├── api/                   # (New/Needs Expansion) Auto-generated or detailed API specs
│   │   └── index.md
│   ├── technical/             # Other technical reference (Common)
│   │   ├── index.md
│   │   ├── security.md
│   │   ├── backup.md
│   │   ├── performance.md
│   │   └── monitoring.md
│   └── glossary.rst
│
├── community/               # Contribution, support, license (Common)
│   ├── index.md             # Combined entry point
│   ├── contributing.md        # How to contribute code/docs
│   ├── code_of_conduct.md
│   ├── license.md
│   ├── security_reporting.md
│   └── support.md             # Support model, channels
│
└── _static/                 # Images, CSS, etc.
└── _templates/              # Sphinx templates
```

## Section Descriptions

1.  **Overview (`/overview/`)**
    * **Purpose:** Introduce OpenSPP, explain its value proposition, core concepts, features grouped by functional area, and provide entry points for specific use cases.
    * **Audience:** Primarily Decision Makers, new users.
    * **Content:** Introduction, feature overview/details (`features/`), use-case landing pages, conceptual explanations (`concepts/`), case studies.

2.  **Getting Started (`/getting_started/`)**
    * **Purpose:** Guide users through installing and setting up a working OpenSPP instance.
    * **Audience:** Administrators, Developers.
    * **Content:** Installation procedures, initial configuration steps, PoC/Pilot info.

3.  **User Guide (`/user_guide/`)**
    * **Purpose:** Provide practical, task-oriented instructions for using OpenSPP's features in day-to-day operations. Primarily *How-to Guides*.
    * **Audience:** Administrators, End-Users.
    * **Content:** Step-by-step guides for specific tasks like registering beneficiaries, creating programs, managing funds, using the POS, administration, etc.

4.  **Developer Guide (`/developer_guide/`)**
    * **Purpose:** Provide technical information and instructions for developers who need to customize, extend, integrate with, or contribute to OpenSPP. Contains both *How-to Guides* and *Reference* material relevant to development.
    * **Audience:** Developers.
    * **Content:** Setup, architecture, module development, customization guides, integration guides, API usage, troubleshooting.

5.  **Reference (`/reference/`)**
    * **Purpose:** Provide detailed, factual information about specific components like modules, APIs, and technical specifications. Designed for lookup.
    * **Audience:** Developers, Administrators.
    * **Content:** Module documentation, detailed API specifications, glossary, technical deep-dives.

6.  **Community (`/community/`)**
    * **Purpose:** Information about the OpenSPP project, community interaction, contribution processes, and legal information.
    * **Audience:** All users, potential contributors.
    * **Content:** Contribution guidelines, code of conduct, license, security policy, support channels.

## Key Changes &amp; Rationale

* **Folder Names:** Removed leading numbers from top-level directories (e.g., `overview/` instead of `1_overview/`) for cleaner paths. The logical order is maintained via `toctree` directives.
* **Features Section:** Features are grouped by functional area (e.g., `registry_data_management.md`) within `/overview/features/`.
* **Use-Case Entry Points:** Maintained the `/overview/use_cases/` directory for guiding users based on their primary goal (SR, FR, SP-MIS).
* **Guide Structure:** Kept the User/Developer guide separation and the linking approach from use-case pages to avoid duplication.
* **Concepts Renamed:** Renamed `explanation` to `concepts` to better reflect the inclusion of principles and broader context.
</file>

<file path="review_work/refactor_pages.md">
This mapping will follow the process outlined in the "Migrating OpenSPP Documentation to New Structure" guide, using the "Proposed OpenSPP Documentation Structure" as the target and considering the "OpenSPP Documentation Contributor Guidelines" for audience and purpose.

Here's the spreadsheet content in a markdown table format. Please note that assigning "Primary Purpose" and "Primary Audience" often involves interpretation based on file names and original locations. "Keep/Discard/Merge" is assumed "Keep" unless a specific merge or new location implies otherwise.

## OpenSPP Documentation Migration Map

| Current Location                                  | Primary Purpose (Guess) | Primary Audience (Guess) | Keep/Discard/Merge | New Location (Proposed)                                     | Notes                                                                                                                                  |
| :------------------------------------------------ | :---------------------- | :----------------------- | :----------------- | :---------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------- |
| `docs/.well-known/.well-known/security.txt`       | Looking Up              | All                      | Keep/Merge         | `docs/community/security_reporting.md`                      | Content could be merged into `security_reporting.md`. Standard location is `.well-known/security.txt` at the documentation root. |
| `docs/best_practices/index.md`                    | Explaining/Doing        | Developer                | Keep               | `docs/developer_guide/best_practices.md`                  | New structure has this.                                                                                                                |
| `docs/community_and_support/code_of_conduct.md`   | Explaining              | All                      | Keep               | `docs/community/code_of_conduct.md`                       | Direct map.                                                                                                                            |
| `docs/community_and_support/how_to_contribute_to_the_project.md` | Doing                  | Developer/All            | Keep               | `docs/community/contributing.md`                          | Direct map.                                                                                                                            |
| `docs/community_and_support/i18n_l10n.md`         | Doing/Explaining        | Developer                | Keep               | `docs/developer_guide/` or `docs/community/contributing.md` | Depends on focus: if contributing translations, then `community`. If developing with i18n, then `developer_guide`.                  |
| `docs/community_and_support/index.md`             | Navigation              | All                      | Keep               | `docs/community/index.md`                                   | Direct map.                                                                                                                            |
| `docs/community_and_support/l3_support.md`        | Explaining              | Admin/User, Developer    | Keep               | `docs/community/support.md`                                 | Map to new support page.                                                                                                               |
| `docs/community_and_support/license.md`           | Looking Up              | All                      | Keep               | `docs/community/license.md`                                 | Direct map.                                                                                                                            |
| `docs/community_and_support/module_lifecycle_development_status.rst` | Explaining         | Developer                | Keep               | `docs/developer_guide/` or `docs/community/contributing.md` | Related to contribution & development practices.                                                                                       |
| `docs/community_and_support/module_lifecycle_maintainer_role.rst` | Explaining         | Developer                | Keep               | `docs/developer_guide/` or `docs/community/contributing.md` | Related to contribution & development practices.                                                                                       |
| `docs/community_and_support/security_report.md`   | Doing                   | All                      | Keep               | `docs/community/security_reporting.md`                      | Direct map.                                                                                                                            |
| `docs/contributing/admins.md`                     | Doing                   | Developer (Doc Admin)    | Keep               | `docs/community/contributing.md`                          | Specific to doc administration, part of broader contribution.                                                                          |
| `docs/contributing/authors.md`                    | Doing                   | All (Doc Contributor)    | Keep               | `docs/community/contributing.md`                          | Part of contributor guidelines.                                                                                                        |
| `docs/contributing/index.md`                      | Navigation              | All (Doc Contributor)    | Keep               | `docs/community/contributing.md`                          | Consolidate into the main contributing page.                                                                                           |
| `docs/contributing/myst-reference.md`             | Looking Up              | Developer (Doc Author)   | Keep               | `docs/community/contributing.md` (as a sub-section or linked resource) | Technical reference for documentation authors.                                                                                         |
| `docs/contributing/setup-build.md`                | Doing                   | Developer (Doc Author)   | Keep               | `docs/community/contributing.md` (as `developer_guide/setup.md` for OpenSPP core dev setup, but this is for doc build) | How to build docs, part of contributing.                                                                                               |
| `docs/contributing/sphinx-extensions.md`          | Looking Up              | Developer (Doc Admin)    | Keep               | `docs/community/contributing.md` (as a sub-section or linked resource) | Technical info for doc system.                                                                                                         |
| `docs/explanation/data_collection_validation.md`  | Explaining              | Decision Maker, Admin    | Keep               | `docs/overview/concepts/data_collection_validation.md`      | New file, seems appropriate for Concepts.                                                                                              |
| `docs/explanation/data_protection.md`             | Explaining              | Decision Maker, Admin    | Keep               | `docs/overview/concepts/data_protection.md`                 | New file, appropriate for Concepts.                                                                                                    |
| `docs/explanation/digital_public_infrastructure.md`| Explaining             | Decision Maker           | Keep               | `docs/overview/concepts/digital_public_infrastructure.md` | Direct map.                                                                                                                            |
| `docs/explanation/farmer_registry.md`             | Explaining              | Decision Maker, New User | Keep               | `docs/overview/concepts/farmer_registry.md`               | Conceptual explanation.                                                                                                                |
| `docs/explanation/index.md`                       | Navigation              | Decision Maker, New User | Keep               | `docs/overview/concepts/index.md`                           | Direct map.                                                                                                                            |
| `docs/explanation/integrated_beneficiary_registry.md`| Explaining             | Decision Maker, Admin    | Keep               | `docs/overview/concepts/integrated_beneficiary_registry.md` | New file, appropriate for Concepts.                                                                                                    |
| `docs/explanation/Registering_individuals_and_groups.md` | Explaining         | Admin/User               | Keep               | `docs/overview/concepts/registrant_concepts.md` or similar | New conceptual page.                                                                                                                   |
| `docs/explanation/registry_key_concepts.md`       | Explaining              | Admin/User, Developer    | Keep               | `docs/overview/concepts/registry_key_concepts.md`         | Broader scope than just SR/FR.                                                                                                         |
| `docs/explanation/security_archi.md`              | Explaining              | Developer, Admin         | Keep               | `docs/developer_guide/architecture.md` (Security section) or `docs/reference/technical/security.md` | Could be part of general architecture or specific security reference.                                                                  |
| `docs/explanation/social_protection_management_information_systems.md` | Explaining     | Decision Maker, Admin    | Keep               | `docs/overview/concepts/sp_mis.md`                        | Conceptual explanation of SP-MIS.                                                                                                      |
| `docs/explanation/social_registry.md`             | Explaining              | Decision Maker, New User | Keep               | `docs/overview/concepts/social_registry.md`                 | Conceptual explanation.                                                                                                                |
| `docs/explanation/user_mgt.md`                    | Explaining              | Admin                    | Keep               | `docs/overview/concepts/user_management.md` or `user_guide/administration/user_access.md` | If conceptual, `overview/concepts`. If how-to, `user_guide`.                                                                       |
| `docs/getting_started/creating_a_program.md`      | Learning/Doing          | Admin/User               | Keep               | `docs/user_guide/program_management/create_program.md`    | This is task-oriented, fits User Guide.                                                                                                |
| `docs/getting_started/index.md`                   | Navigation              | Admin, Developer         | Keep               | `docs/getting_started/index.md`                             | Direct map.                                                                                                                            |
| `docs/getting_started/installation_guide.md`      | Doing                   | Admin, Developer         | Split/Keep         | `docs/getting_started/installation_docker.md`, `docs/getting_started/installation_pypi.md` | New structure splits this. Content needs to be refactored.                                                                           |
| `docs/getting_started/poc_and_pilot.md`           | Explaining/Doing        | Decision Maker, Admin    | Keep               | `docs/getting_started/poc_and_pilot.md`                     | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/beneficiary_keycloak.md` | Doing                 | Developer                | Keep               | `docs/developer_guide/integrations/keycloak_beneficiary_portal.md` | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_areas.md`     | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_areas.md`   | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_audit.md`     | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_audit.md`   | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_cr.md`        | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_change_requests.md` | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_cycle.md`     | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_cycles.md`  | New structure proposal does not list this explicitly, but fits pattern.                                                                |
| `docs/howto/developer_guides/custom_entitlement.md` | Doing                 | Developer                | Keep               | `docs/developer_guide/customization/customizing_entitlements.md` | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_fields_indicators.md` | Doing             | Developer                | Keep               | `docs/developer_guide/customization/customizing_fields.md` (and indicators) | Direct map (covers fields, indicators can be part of this or separate).                                                                |
| `docs/howto/developer_guides/custom_program.md`   | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_programs.md` | New structure proposal does not list this explicitly, but fits pattern.                                                                |
| `docs/howto/developer_guides/custom_registry_tab_fields.md`| Doing            | Developer                | Keep               | `docs/developer_guide/customization/customizing_registry.md` | Related to customizing registry UI.                                                                                                    |
| `docs/howto/developer_guides/custom_registry.md`  | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/customizing_registry.md` | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/custom_service_points.md` | Doing              | Developer                | Keep               | `docs/developer_guide/customization/customizing_service_points.md` | New structure proposal does not list this explicitly, but fits pattern.                                                                |
| `docs/howto/developer_guides/dci.md`              | Doing                   | Developer                | Keep               | `docs/developer_guide/integrations/dci.md`                  | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/development_setup.md`| Doing                   | Developer                | Keep               | `docs/developer_guide/setup.md`                             | Maps to setup for *contributing* to OpenSPP itself. (`contributing/setup-build.md` was for docs).                                       |
| `docs/howto/developer_guides/esignet.md`          | Doing                   | Developer                | Keep               | `docs/developer_guide/integrations/esignet.md`              | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/implmenting_pmt.md`  | Doing                   | Developer                | Keep               | `docs/developer_guide/customization/implementing_pmt.md`    | If for developers customizing PMT. (Spelling: `implementing_pmt.md`)                                                                   |
| `docs/howto/developer_guides/indicators.md`       | Doing/Reference         | Developer                | Keep               | `docs/developer_guide/customization/customizing_fields.md` (or new `customizing_indicators.md`) | How to develop/use indicators.                                                                                                     |
| `docs/howto/developer_guides/module.md`           | Doing                   | Developer                | Keep               | `docs/developer_guide/module_development.md`                | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/oidc.md`             | Doing                   | Developer                | Keep               | `docs/developer_guide/integrations/oidc.md`                 | Direct map.                                                                                                                            |
| `docs/howto/developer_guides/rest_api.md`         | Doing                   | Developer                | Merge/Keep         | `docs/developer_guide/api_usage/rest_api.md`                | Merges with existing content, needs expansion.                                                                                         |
| `docs/howto/developer_guides/setting_up_using_pypi.md` | Doing              | Developer/Admin          | Map/Merge          | `docs/getting_started/installation_pypi.md`               | Content for this new file.                                                                                                             |
| `docs/howto/developer_guides/troubleshooting.md`  | Doing                   | Developer                | Keep               | `docs/developer_guide/troubleshooting.md`                   | Direct map.                                                                                                                            |
| `docs/howto/user_guides/administrating_role_based_access.md` | Doing          | Admin/User               | Keep               | `docs/user_guide/administration/user_access.md`             | Direct map.                                                                                                                            |
| `docs/howto/user_guides/enroll_beneficiaries.md`  | Doing                   | Admin/User               | Keep               | `docs/user_guide/program_management/enroll_beneficiaries.md` | Direct map.                                                                                                                            |
| `docs/howto/user_guides/export_registrant_data.md`| Doing                   | Admin/User               | Merge/Keep         | `docs/user_guide/registry_management/import_export_data.md` | Part of combined import/export guide.                                                                                                  |
| `docs/howto/user_guides/implementing_pmt.md`      | Doing                   | Admin/User               | Keep               | `docs/user_guide/program_management/implementing_pmt.md`    | User-facing guide for PMT.                                                                                                             |
| `docs/howto/user_guides/import_registrant_data.md`| Doing                   | Admin/User               | Merge/Keep         | `docs/user_guide/registry_management/import_export_data.md` | Part of combined import/export guide.                                                                                                  |
| `docs/howto/user_guides/register_new_individual.md`| Doing                  | Admin/User               | Keep               | `docs/user_guide/registry_management/register_individual.md`| Direct map.                                                                                                                            |
| `docs/howto/user_guides/setting_up_farmer_registry.md` | Doing               | Admin/User               | Keep               | `docs/user_guide/registry_management/setting_up_farmer_registry.md` | Task-oriented for users.                                                                                                               |
| `docs/howto/user_guides/setting_up_service_points.md` | Doing               | Admin/User               | Keep               | `docs/user_guide/administration/service_points.md`          | Direct map.                                                                                                                            |
| `docs/howto/developer_mode.md`                    | Doing/Explaining        | Developer                | Keep               | `docs/developer_guide/developer_mode.md`                    | How to enable/use dev mode.                                                                                                            |
| `docs/howto/index.md`                             | Navigation              | Admin/User, Developer    | Keep               | `docs/user_guide/index.md` and `docs/developer_guide/index.md` | Split based on target audience of linked how-tos.                                                                                      |
| `docs/howto/translation.md`                       | Doing                   | Developer/Contributor    | Keep               | `docs/community/contributing.md` (section on localization) | Contributing translations.                                                                                                             |
| `docs/modules/*`                                  | Looking Up              | Developer, Admin         | Keep               | `docs/reference/modules/*`                                  | Most module files map 1:1.                                                                                                             |
| `docs/modules/index.md`                           | Navigation              | Developer, Admin         | Keep               | `docs/reference/modules/index.md`                           | Direct map.                                                                                                                            |
| `docs/technical_reference/programs/concepts.md`   | Explaining              | Developer                | Keep               | `docs/developer_guide/architecture.md` (Program Concepts section) or `docs/overview/concepts/program_design.md` | If dev-focused, `developer_guide`. If higher-level, `overview/concepts`.                                                             |
| `docs/technical_reference/programs/cycle_manager.rst`| Reference             | Developer                | Keep               | `docs/reference/technical/cycle_manager.rst`                | Technical reference.                                                                                                                   |
| `docs/technical_reference/programs/dashboards.md` | Explaining/Doing        | Admin/User               | Merge/Keep         | `docs/user_guide/reporting_dashboards.md`                 | Maps to how-to use reports/dashboards.                                                                                                 |
| `docs/technical_reference/programs/deduplication_manager.md`| Reference       | Developer                | Keep               | `docs/reference/technical/deduplication_manager.md`       | Technical reference.                                                                                                                   |
| `docs/technical_reference/programs/eligibility_manager.rst`| Reference      | Developer                | Keep               | `docs/reference/technical/eligibility_manager.rst`        | Technical reference.                                                                                                                   |
| `docs/technical_reference/programs/entitlement_manager.rst`| Reference      | Developer                | Keep               | `docs/reference/technical/entitlement_manager.rst`        | Technical reference.                                                                                                                   |
| `docs/technical_reference/programs/index.md`      | Navigation              | Developer                | Keep               | `docs/reference/technical/index.md` (or `developer_guide/index.md` for program dev section) | Index for technical program details.                                                                                                   |
| `docs/technical_reference/programs/notification_manager.rst`| Reference    | Developer                | Keep               | `docs/reference/technical/notification_manager.rst`       | Technical reference.                                                                                                                   |
| `docs/technical_reference/programs/program_manager.rst`| Reference          | Developer                | Keep               | `docs/reference/technical/program_manager.rst`            | Technical reference.                                                                                                                   |
| `docs/technical_reference/architecture.md`        | Explaining              | Developer                | Keep               | `docs/developer_guide/architecture.md`                      | Direct map.                                                                                                                            |
| `docs/technical_reference/audit_logs.md`          | Explaining/Reference    | Developer, Admin         | Keep               | `docs/reference/technical/audit_logs.md`                    | Technical details of audit logs.                                                                                                       |
| `docs/technical_reference/backup.md`              | Explaining/Reference    | Admin                    | Keep               | `docs/reference/technical/backup.md`                        | Direct map.                                                                                                                            |
| `docs/technical_reference/code.md`                | Explaining              | Developer                | Merge/Keep         | `docs/developer_guide/best_practices.md` or `docs/community/contributing.md` | Depends on focus: coding best practices for OpenSPP or contributing guidelines.                                                        |
| `docs/technical_reference/extensibility.md`       | Explaining              | Developer, Decision Maker| Keep               | `docs/overview/concepts/extensibility.md` or `docs/developer_guide/architecture.md` | Conceptual overview or developer architecture detail.                                                                                  |
| `docs/technical_reference/external_api.rst`       | Reference/Doing         | Developer                | Keep               | `docs/developer_guide/api_usage/external_api_xmlrpc.md`     | Direct map.                                                                                                                            |
| `docs/technical_reference/index.md`               | Navigation              | Developer, Admin         | Keep               | Mix of `docs/developer_guide/index.md` & `docs/reference/index.md` | Split based on content.                                                                                                                |
| `docs/technical_reference/integrations.md`        | Explaining/Reference    | Developer, Decision Maker| Keep               | `docs/overview/features/integrations_apis.md` or `docs/developer_guide/integrations/index.md` | Overview of integration capabilities or developer how-to.                                                                            |
| `docs/technical_reference/monitoring.md`          | Explaining/Reference    | Admin, Developer         | Keep               | `docs/reference/technical/monitoring.md`                    | Direct map.                                                                                                                            |
| `docs/technical_reference/performance_optimization.md`| Explaining/Reference| Developer                | Keep               | `docs/reference/technical/performance.md`                   | Direct map.                                                                                                                            |
| `docs/technical_reference/release_management.md`  | Explaining              | Developer, Admin         | Keep               | `docs/community/` or `docs/developer_guide/`                | If about contributing/community process, `community`. If internal dev process, `developer_guide`.                                      |
| `docs/technical_reference/security.md`            | Explaining/Reference    | Developer, Admin         | Keep               | `docs/reference/technical/security.md`                      | Direct map.                                                                                                                            |
| `docs/tutorial/*` (general)                       | Learning                | Admin/User               | Review/Map         | Generally to `docs/user_guide/` subsections or `docs/getting_started/` | Tutorials are task-oriented learning. Need individual assessment.                                                                      |
| `docs/tutorial/user_guides/administrating_role_based_access.md` | Learning/Doing | Admin/User          | Keep/Merge         | `docs/user_guide/administration/user_access.md`             | Same as howto, merge content.                                                                                                          |
| `docs/tutorial/user_guides/allocate_funds.md`     | Learning/Doing          | Admin/User               | Keep               | `docs/user_guide/program_management/allocate_funds.md`      | Direct map.                                                                                                                            |
| `docs/tutorial/user_guides/configure_cash_entitlements.md` | Learning/Doing | Admin/User               | Merge/Keep         | `docs/user_guide/program_management/configure_entitlements.md` | Part of combined entitlements guide.                                                                                                   |
| `docs/tutorial/user_guides/configure_ID_generate_qr.md` | Learning/Doing    | Admin/User               | Keep               | `docs/user_guide/registry_management/identity_management.md` | New file for ID management, QR generation can be a subsection.                                                                         |
| `docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md`| Learning/Doing | Admin/User    | Split/Keep         | `docs/user_guide/program_management/create_cycle.md` and `docs/user_guide/program_management/configure_entitlements.md` | Split into cycle creation and entitlement prep/config.                                                                                 |
| `docs/tutorial/user_guides/create_social_protection_program.md` | Learning/Doing | Admin/User          | Keep               | `docs/user_guide/program_management/create_program.md`      | Direct map.                                                                                                                            |
| `docs/tutorial/user_guides/enroll_beneficiaries.md` | Learning/Doing      | Admin/User               | Keep/Merge         | `docs/user_guide/program_management/enroll_beneficiaries.md` | Same as howto, merge content.                                                                                                          |
| `docs/tutorial/user_guides/export_registrant_data.md` | Learning/Doing    | Admin/User               | Merge/Keep         | `docs/user_guide/registry_management/import_export_data.md` | Same as howto, merge into combined guide.                                                                                              |
| `docs/tutorial/user_guides/import_areas.md`       | Learning/Doing          | Admin/User               | Keep               | `docs/user_guide/administration/import_areas.md`            | New file, task-oriented for admins.                                                                                                    |
| `docs/tutorial/user_guides/import_registrant_data.md` | Learning/Doing    | Admin/User               | Merge/Keep         | `docs/user_guide/registry_management/import_export_data.md` | Same as howto, merge into combined guide.                                                                                              |
| `docs/tutorial/user_guides/point_of_sales.md`     | Learning/Doing          | Admin/User               | Keep               | `docs/user_guide/pos_usage.md`                              | Direct map.                                                                                                                            |
| `docs/tutorial/user_guides/register_new_individual.md` | Learning/Doing   | Admin/User               | Keep/Merge         | `docs/user_guide/registry_management/register_individual.md`| Same as howto, merge content.                                                                                                          |
| `docs/tutorial/user_guides/setting_up_service_points.md` | Learning/Doing | Admin/User               | Keep/Merge         | `docs/user_guide/administration/service_points.md`          | Same as howto, merge content.                                                                                                          |
| `docs/tutorial/access_management.md`              | Learning                | Admin/User               | Merge/Keep         | `docs/user_guide/administration/user_access.md`             | Content for user access.                                                                                                               |
| `docs/tutorial/audit_log.md`                      | Learning                | Admin/User               | Keep               | `docs/user_guide/administration/using_audit_logs.md`      | User-facing guide on audit logs.                                                                                                       |
| `docs/tutorial/change_requests.md`                | Learning                | Admin/User               | Keep               | `docs/user_guide/registry_management/using_change_requests.md` | User-facing guide on change requests.                                                                                                  |
| `docs/tutorial/consent_management.md`             | Learning                | Admin/User               | Keep               | `docs/user_guide/consent_management.md`                     | Direct map.                                                                                                                            |
| `docs/tutorial/custom_fields.md`                  | Learning                | Admin/User               | Keep               | `docs/user_guide/administration/managing_custom_fields.md`  | User-facing guide on custom fields.                                                                                                    |
| `docs/tutorial/dashboards_and_reports.md`         | Learning                | Admin/User               | Merge/Keep         | `docs/user_guide/reporting_dashboards.md`                 | Content for using dashboards.                                                                                                          |
| `docs/tutorial/event_data.md`                     | Learning                | Admin/User               | Keep               | `docs/user_guide/registry_management/using_event_data.md`   | User-facing guide on event data.                                                                                                       |
| `docs/tutorial/geotargeting.md`                   | Learning                | Admin/User               | Keep               | `docs/user_guide/program_management/using_geotargeting.md`  | User-facing guide on geotargeting.                                                                                                     |
| `docs/tutorial/grievance_redressal_management.md` | Learning                | Admin/User               | Keep               | `docs/user_guide/grievance_management.md`                   | Direct map.                                                                                                                            |
| `docs/tutorial/hardware_integration.md`           | Learning/Doing          | Admin/Developer          | Keep               | `docs/user_guide/administration/hardware_integration.md` or `docs/developer_guide/integrations/hardware.md` | Depends if for end-user setup or developer integration.                                                                                |
| `docs/tutorial/index.md`                          | Navigation              | Admin/User               | Keep               | `docs/user_guide/index.md` (primarily)                      | Tutorials are mostly for users.                                                                                                        |
| `docs/tutorial/indicators.md`                     | Learning                | Admin/User               | Keep               | `docs/user_guide/program_management/using_indicators.md` or `docs/user_guide/reporting_monitoring.md` | How to use/understand indicators.                                                                                                      |
| `docs/tutorial/managing_social_protection_programs.md` | Learning           | Admin/User               | Review/Split       | `docs/user_guide/program_management/index.md` and sub-pages | High-level tutorial, content to be distributed.                                                                                        |
| `docs/tutorial/programs_and_cycles.md`            | Learning                | Admin/User               | Split/Keep         | `docs/user_guide/program_management/programs_overview.md`, `docs/user_guide/program_management/cycles_overview.md` | Split into program and cycle concepts/tutorials.                                                                                       |
| `docs/tutorial/proxy_means_test.md`               | Learning                | Admin/User               | Keep               | `docs/user_guide/program_management/using_pmt.md` or `docs/overview/concepts/pmt.md` | If user-focused how-to, `user_guide`. If conceptual, `overview`.                                                                       |
| `docs/tutorial/vouchers.md`                       | Learning                | Admin/User               | Keep               | `docs/user_guide/program_management/using_vouchers.md`      | User-facing guide on vouchers.                                                                                                         |
| `docs/glossary.rst`                               | Looking Up              | All                      | Keep               | `docs/reference/glossary.rst`                               | Direct map.                                                                                                                            |
| `docs/index.md`                                   | Navigation              | All                      | Keep               | `docs/index.md`                                               | Main landing page, will need to be updated to reflect new structure.                                                                   |
| `docs/robots.txt`                                 | Configuration           | Search Engine            | Keep               | `docs/robots.txt`                                           | Standard file, keep at root of docs.                                                                                                   |

### Content Gaps Identified from New Structure (Needs New Pages)

* `docs/overview/features/index.md` (High-level feature categories/overview)
* `docs/overview/features/registry_data_management.md`
* `docs/overview/features/program_design_config.md`
* `docs/overview/features/entitlement_payments.md`
* `docs/overview/features/integrations_apis.md` (Covered partially by `technical_reference/integrations.md`)
* `docs/overview/features/administration_security.md`
* `docs/overview/features/reporting_monitoring.md`
* `docs/overview/why_openspp.md`
* `docs/overview/use_cases/index.md` (Optional overview of use cases)
* `docs/overview/use_cases/social_registry.md` (Links to relevant SR docs)
* `docs/overview/use_cases/farmer_registry.md` (Links to relevant FR docs)
* `docs/overview/use_cases/sp_mis.md` (Links to relevant SP-MIS docs)
* `docs/overview/case_studies/index.md`
* `docs/getting_started/initial_config.md` (Basic post-install steps)
* `docs/user_guide/registry_management/index.md` (If not covered by main index)
* `docs/user_guide/program_management/index.md` (If not covered by main index)
* `docs/user_guide/administration/index.md` (If not covered by main index)
* `docs/developer_guide/customization/index.md`
* `docs/developer_guide/integrations/index.md` (Covered partially by `technical_reference/integrations.md`)
* `docs/developer_guide/api_usage/index.md`
* `docs/developer_guide/best_practices.md` (Partially from `technical_reference/code.md` and `best_practices/index.md`)
* `docs/reference/api/index.md` (Auto-generated or detailed API specs)
* `docs/reference/technical/index.md`

This table should provide a solid starting point for your migration planning. Remember that the "Primary Purpose" and "Primary Audience" are best guesses and should be validated during the content audit phase. The "New Location" column directly reflects the proposed new structure. Some files are marked for "Merge" or "Split" based on the new structure's organization.
</file>

<file path="share/man/man1/qr.1">
.\" Manpage for qr
.TH QR 1 "14 Jan 2019" "6.1" "Python QR tool"
.SH NAME
qr \- script to create QR codes at the command line
.SH SYNOPSIS
qr [\-\-help] [\-\-factory=FACTORY] [\-\-optimize=OPTIMIZE] [\-\-error\-correction=LEVEL] [data]
.SH DESCRIPTION
This script uses the python qrcode module. It can take data from stdin or from the commandline and generate a QR code.
Normally it will output the QR code as ascii art to the terminal. If the output is piped to a file, it will output the image (default type of PNG).
.SH OPTIONS
.PP
\fB\ \-h, \-\-help\fR
.RS 4
Show a help message.
.RE

.PP
\fB\ \-\-factory=FACTORY\fR
.RS 4
Full python path to the image factory class to create the
image with. You can use the following shortcuts to the
built-in image factory classes: pil (default), pymaging,
svg, svg-fragment, svg-path.
.RE

.PP
\fB\ \-\-optimize=OPTIMIZE\fR
.RS 4
Optimize the data by looking for chunks of at least this
many characters that could use a more efficient encoding
method. Use 0 to turn off chunk optimization.
.RE

.PP
\fB\ \-\-error\-correction=LEVEL\fR
.RS 4
The error correction level to use. Choices are L (7%),
M (15%, default), Q (25%), and H (30%).
.RE

.PP
\fB\ data\fR
.RS 4
The data from which the QR code will be generated.
.RE

.SH SEE ALSO
https://github.com/lincolnloop/python-qrcode/
</file>

<file path="share/man/man1/ttx.1">
.Dd May 18, 2004
.\" ttx is not specific to any OS, but contrary to what groff_mdoc(7)
.\" seems to imply, entirely omitting the .Os macro causes 'BSD' to
.\" be used, so I give a zero-width space as its argument.
.Os \&
.\" The "FontTools Manual" argument apparently has no effect in
.\" groff 1.18.1. I think it is a bug in the -mdoc groff package.
.Dt TTX 1 "FontTools Manual"
.Sh NAME
.Nm ttx
.Nd tool for manipulating TrueType and OpenType fonts
.Sh SYNOPSIS
.Nm
.Bk
.Op Ar option ...
.Ek
.Bk
.Ar file ...
.Ek
.Sh DESCRIPTION
.Nm
is a tool for manipulating TrueType and OpenType fonts.  It can convert
TrueType and OpenType fonts to and from an
.Tn XML Ns -based format called
.Tn TTX .
.Tn TTX
files have a
.Ql .ttx
extension.
.Pp
For each
.Ar file
argument it is given,
.Nm
detects whether it is a
.Ql .ttf ,
.Ql .otf
or
.Ql .ttx
file and acts accordingly: if it is a
.Ql .ttf
or
.Ql .otf
file, it generates a
.Ql .ttx
file; if it is a
.Ql .ttx
file, it generates a
.Ql .ttf
or
.Ql .otf
file.
.Pp
By default, every output file is created in the same directory as the
corresponding input file and with the same name except for the
extension, which is substituted appropriately.
.Nm
never overwrites existing files; if necessary, it appends a suffix to
the output file name before the extension, as in
.Pa Arial#1.ttf .
.Ss "General options"
.Bl -tag -width ".Fl t Ar table"
.It Fl h
Display usage information.
.It Fl d Ar dir
Write the output files to directory
.Ar dir
instead of writing every output file to the same directory as the
corresponding input file.
.It Fl o Ar file
Write the output to
.Ar file
instead of writing it to the same directory as the
corresponding input file.
.It Fl v
Be verbose.  Write more messages to the standard output describing what
is being done.
.It Fl a
Allow virtual glyphs ID's on compile or decompile.
.El
.Ss "Dump options"
The following options control the process of dumping font files
(TrueType or OpenType) to
.Tn TTX
files.
.Bl -tag -width ".Fl t Ar table"
.It Fl l
List table information.  Instead of dumping the font to a
.Tn TTX
file, display minimal information about each table.
.It Fl t Ar table
Dump table
.Ar table .
This option may be given multiple times to dump several tables at
once.  When not specified, all tables are dumped.
.It Fl x Ar table
Exclude table
.Ar table
from the list of tables to dump.  This option may be given multiple
times to exclude several tables from the dump.  The
.Fl t
and
.Fl x
options are mutually exclusive.
.It Fl s
Split tables.  Dump each table to a separate
.Tn TTX
file and write (under the name that would have been used for the output
file if the
.Fl s
option had not been given) one small
.Tn TTX
file containing references to the individual table dump files.  This
file can be used as input to
.Nm
as long as the referenced files can be found in the same directory.
.It Fl i
.\" XXX: I suppose OpenType programs (exist and) are also affected.
Don't disassemble TrueType instructions.  When this option is specified,
all TrueType programs (glyph programs, the font program and the
pre-program) are written to the
.Tn TTX
file as hexadecimal data instead of
assembly.  This saves some time and results in smaller
.Tn TTX
files.
.It Fl y Ar n
When decompiling a TrueType Collection (TTC) file,
decompile font number
.Ar n ,
starting from 0.
.El
.Ss "Compilation options"
The following options control the process of compiling
.Tn TTX
files into font files (TrueType or OpenType):
.Bl -tag -width ".Fl t Ar table"
.It Fl m Ar fontfile
Merge the input
.Tn TTX
file
.Ar file
with
.Ar fontfile .
No more than one
.Ar file
argument can be specified when this option is used.
.It Fl b
Don't recalculate glyph bounding boxes.  Use the values in the
.Tn TTX
file as is.
.El
.Sh "THE TTX FILE FORMAT"
You can find some information about the
.Tn TTX
file format in
.Pa documentation.html .
In particular, you will find in that file the list of tables understood by
.Nm
and the relations between TrueType GlyphIDs and the glyph names used in
.Tn TTX
files.
.Sh EXAMPLES
In the following examples, all files are read from and written to the
current directory.  Additionally, the name given for the output file
assumes in every case that it did not exist before
.Nm
was invoked.
.Pp
Dump the TrueType font contained in
.Pa FreeSans.ttf
to
.Pa FreeSans.ttx :
.Pp
.Dl ttx FreeSans.ttf
.Pp
Compile
.Pa MyFont.ttx
into a TrueType or OpenType font file:
.Pp
.Dl ttx MyFont.ttx
.Pp
List the tables in
.Pa FreeSans.ttf
along with some information:
.Pp
.Dl ttx -l FreeSans.ttf
.Pp
Dump the
.Sq cmap
table from
.Pa FreeSans.ttf
to
.Pa FreeSans.ttx :
.Pp
.Dl ttx -t cmap FreeSans.ttf
.Sh NOTES
On MS\-Windows and MacOS,
.Nm
is available as a graphical application to which files can be dropped.
.Sh SEE ALSO
.Pa documentation.html
.Pp
.Xr fontforge 1 ,
.Xr ftinfo 1 ,
.Xr gfontview 1 ,
.Xr xmbdfed 1 ,
.Xr Font::TTF 3pm
.Sh AUTHORS
.Nm
was written by
.An -nosplit
.An "Just van Rossum" Aq just@letterror.com .
.Pp
This manual page was written by
.An "Florent Rougon" Aq f.rougon@free.fr
for the Debian GNU/Linux system based on the existing FontTools
documentation.  It may be freely used, modified and distributed without
restrictions.
.\" For Emacs:
.\" Local Variables:
.\" fill-column: 72
.\" sentence-end: "[.?!][]\"')}]*\\($\\| $\\|   \\|  \\)[   \n]*"
.\" sentence-end-double-space: t
.\" End:
</file>

<file path="styles/Vocab/OpenSPP/accept.txt">
APIs
buildout
configurability
Customisable
fraud
Kanban
Geotargeting
geotargeting
npm
Sourcebook
Subnational
Odoo
OpenSPP
URL
xlsx
</file>

<file path=".gitmodules">
[submodule "submodules/openg2p-registry"]
	path = submodules/openg2p-registry
	url = git@github.com:OpenG2P/openg2p-registry.git
	branch = 15.0-1.0-develop
[submodule "submodules/openg2p-program"]
	path = submodules/openg2p-program
	url = git@github.com:OpenG2P/openg2p-program.git
	branch = 15.0-1.0-develop
[submodule "submodules/odoo"]
	path = submodules/odoo
	url = git@github.com:odoo/odoo.git
	branch = 15.0
	shallow = true
[submodule "submodules/queue"]
	path = submodules/queue
	url = git@github.com:OCA/queue
	branch = 15.0
	shallow = true
</file>

<file path=".vale.ini">
StylesPath = styles

MinAlertLevel = suggestion

Vocab = Base,OpenSPP

Packages = Microsoft, alex

[*]
BasedOnStyles = Vale, Microsoft, alex
</file>

<file path="CODE_OF_CONDUCT.md">
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our community a harassment-free
experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex
characteristics, gender identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy
community.

## Our Standards

Examples of behavior that contributes to a positive environment for our community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience
- Focusing on what is best not just for us as individuals, but for the overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email address, without their explicit
  permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will
take appropriate and fair corrective action in response to any behavior that they deem inappropriate,
threatening, offensive, or harmful.

Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki
edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate
reasons for moderation decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when an individual is officially
representing the community in public spaces. Examples of representing our community include using an official
e-mail address, posting via an official social media account, or acting as an appointed representative at an
online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders
responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining the consequences for any action
they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in
the community.

**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the
violation and an explanation of why the behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of actions.

**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved,
including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time.
This includes avoiding interactions in community spaces as well as external channels like social media.
Violating these terms may lead to a temporary or permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a
specified period of time. No public or private interaction with the people involved, including unsolicited
interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may
lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained
inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of
individuals.

**Consequence**: A permanent ban from any sort of public interaction within the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder][mozilla coc].

For answers to common questions about this code of conduct, see the FAQ at
[https://www.contributor-covenant.org/faq][faq]. Translations are available at
[https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[mozilla coc]: https://github.com/mozilla/diversity
[faq]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations
</file>

<file path="CONTRIBUTING.md">
# Contributing to OpenSPP

The project follows the OpenSPP [Code of Conduct](CODE_OF_CONDUCT.md). If you are not familiar with our code
of conduct policy, take a minute to read the policy before starting with your first contribution.

Bug reports and code and documentation patches are welcome. You can help this project also by using the
development version and by reporting any bugs you might encounter.

## **Did you find a bug?**

- **Do not open up a GitHub issue if the bug is a security vulnerability in OpenSPP**, and instead follow the
  [security disclosure policy](docs/security-report.md).

- **Ensure the bug was not already reported** by searching on GitHub under
  [Issues](https://github.com/openspp/documentation/issues).

- If you're unable to find an open issue addressing the problem,
  [open a new one](https://github.com/openspp/documentation/issues/new). Be sure to include a **title and
  clear description**, as much relevant information as possible demonstrating the expected behavior that is
  not occurring.

## **Did you write a patch that fixes a bug?**

- Open a new GitHub pull request with the patch.

- Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if
  applicable.

<!-- #### **Do you have questions about the source code?**

- Ask any question about how to use OpenSPP in the
  [Discussions](https://github.com/openspp/documentation/discussions). -->

Thanks! :heart: :heart: :heart:
</file>

<file path="COPYRIGHT">
Most of the files are

  Copyright (c) 2022 OpenSPP.org

Many files also contain contributions from third
parties. In this case the original copyright of
the contributions can be traced through the
history of the source version control system.

When that is not the case, the files contain a prominent
notice stating the original copyright and applicable
license, or come with their own dedicated COPYRIGHT
and/or LICENSE file.
</file>

<file path="handle_remaining_files.py">
#\!/usr/bin/env python3
"""Handle remaining files that weren't moved in the initial refactoring."""

import os
import shutil
from pathlib import Path

# Additional mappings for files that were missed
additional_mappings = [
    # Community and support files
    ("docs/community_and_support/i18n_l10n.md", "docs/developer_guide/i18n_l10n.md"),
    ("docs/community_and_support/module_lifecycle_development_status.rst", "docs/community/module_lifecycle_development_status.rst"),
    ("docs/community_and_support/module_lifecycle_maintainer_role.rst", "docs/community/module_lifecycle_maintainer_role.rst"),
    
    # Split installation guide
    ("docs/getting_started/installation_guide.md", "docs/getting_started/installation_pypi.md"),
    
    # Images directories - move them to their new locations
    ("docs/explanation/images/", "docs/overview/concepts/images/"),
    ("docs/technical_reference/images/", "docs/reference/technical/images/"),
    ("docs/technical_reference/programs/images/", "docs/reference/technical/images/programs/"),
    ("docs/technical_reference/external_api/", "docs/developer_guide/api_usage/external_api/"),
    
    # Howto images
    ("docs/howto/developer_guides/beneficiary_keycloak/", "docs/developer_guide/integrations/beneficiary_keycloak/"),
    ("docs/howto/developer_guides/custom_areas/", "docs/developer_guide/customization/custom_areas/"),
    ("docs/howto/developer_guides/custom_audit/", "docs/developer_guide/customization/custom_audit/"),
    ("docs/howto/developer_guides/custom_cr/", "docs/developer_guide/customization/custom_cr/"),
    ("docs/howto/developer_guides/custom_entitlement/", "docs/developer_guide/customization/custom_entitlement/"),
    ("docs/howto/developer_guides/custom_registry/", "docs/developer_guide/customization/custom_registry/"),
    ("docs/howto/developer_guides/custom_service_points/", "docs/developer_guide/customization/custom_service_points/"),
    ("docs/howto/developer_guides/esignet/", "docs/developer_guide/integrations/esignet/"),
    ("docs/howto/developer_guides/rest_api/", "docs/developer_guide/api_usage/rest_api/"),
    ("docs/howto/developer_guides/setting_up_using_pypi/", "docs/developer_guide/setting_up_using_pypi/"),
    ("docs/howto/developer_mode/", "docs/developer_guide/developer_mode/"),
    
    # User guides images
    ("docs/howto/user_guides/administrating_role_based_access/", "docs/user_guide/administration/administrating_role_based_access/"),
    ("docs/howto/user_guides/enroll_beneficiaries/", "docs/user_guide/program_management/enroll_beneficiaries/"),
    ("docs/howto/user_guides/export_registrant_data/", "docs/user_guide/registry_management/export_registrant_data/"),
    ("docs/howto/user_guides/import_registrant_data/", "docs/user_guide/registry_management/import_registrant_data/"),
    ("docs/howto/user_guides/register_new_individual/", "docs/user_guide/registry_management/register_new_individual/"),
    ("docs/howto/user_guides/setting_up_farmer_registry/", "docs/user_guide/registry_management/setting_up_farmer_registry/"),
    ("docs/howto/user_guides/setting_up_service_points/", "docs/user_guide/administration/setting_up_service_points/"),
    
    # Tutorial images
    ("docs/tutorial/access_management/", "docs/user_guide/administration/access_management/"),
    ("docs/tutorial/geotargeting/", "docs/user_guide/program_management/geotargeting/"),
    ("docs/tutorial/indicators/", "docs/user_guide/program_management/indicators/"),
    ("docs/tutorial/programs_and_cycles/", "docs/user_guide/program_management/programs_and_cycles/"),
    ("docs/tutorial/user_guides/administrating_role_based_access/", "docs/user_guide/administration/administrating_role_based_access/"),
    ("docs/tutorial/user_guides/allocate_funds/", "docs/user_guide/program_management/allocate_funds/"),
    ("docs/tutorial/user_guides/configure_ID_generate_qr/", "docs/user_guide/registry_management/configure_ID_generate_qr/"),
    ("docs/tutorial/user_guides/configure_cash_entitlements/", "docs/user_guide/program_management/configure_cash_entitlements/"),
    ("docs/tutorial/user_guides/create_program_cycle_prepare_entitlements/", "docs/user_guide/program_management/create_program_cycle_prepare_entitlements/"),
    ("docs/tutorial/user_guides/create_social_protection_program/", "docs/user_guide/program_management/create_social_protection_program/"),
    ("docs/tutorial/user_guides/enroll_beneficiaries/", "docs/user_guide/program_management/enroll_beneficiaries/"),
    ("docs/tutorial/user_guides/export_registrant_data/", "docs/user_guide/registry_management/export_registrant_data/"),
    ("docs/tutorial/user_guides/import_areas/", "docs/user_guide/administration/import_areas/"),
    ("docs/tutorial/user_guides/import_registrant_data/", "docs/user_guide/registry_management/import_registrant_data/"),
    ("docs/tutorial/user_guides/point_of_sales/", "docs/user_guide/point_of_sales/"),
    ("docs/tutorial/user_guides/register_new_individual/", "docs/user_guide/registry_management/register_new_individual/"),
    ("docs/tutorial/user_guides/setting_up_service_points/", "docs/user_guide/administration/setting_up_service_points/"),
]

# Process additional mappings
for src, dst in additional_mappings:
    src_path = Path(src)
    dst_path = Path(dst)
    
    if src_path.exists():
        if src.endswith("/"):
            # Directory
            if src_path.is_dir():
                dst_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(str(src_path), str(dst_path))
                print(f"Moved directory: {src_path} -> {dst_path}")
        else:
            # File
            dst_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.move(str(src_path), str(dst_path))
            print(f"Moved file: {src_path} -> {dst_path}")

# Remove old empty directories
dirs_to_remove = [
    "docs/community_and_support",
    "docs/contributing", 
    "docs/explanation",
    "docs/howto/developer_guides",
    "docs/howto/user_guides",
    "docs/howto",
    "docs/technical_reference/programs",
    "docs/technical_reference",
    "docs/tutorial/user_guides",
    "docs/tutorial"
]

for dir_path in dirs_to_remove:
    try:
        if Path(dir_path).exists() and not any(Path(dir_path).iterdir()):
            os.rmdir(dir_path)
            print(f"Removed empty directory: {dir_path}")
    except:
        pass
</file>

<file path="LICENSE">
GNU LESSER GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


  This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public
License, supplemented by the additional permissions listed below.

  0. Additional Definitions.

  As used herein, "this License" refers to version 3 of the GNU Lesser
General Public License, and the "GNU GPL" refers to version 3 of the GNU
General Public License.

  "The Library" refers to a covered work governed by this License,
other than an Application or a Combined Work as defined below.

  An "Application" is any work that makes use of an interface provided
by the Library, but which is not otherwise based on the Library.
Defining a subclass of a class defined by the Library is deemed a mode
of using an interface provided by the Library.

  A "Combined Work" is a work produced by combining or linking an
Application with the Library.  The particular version of the Library
with which the Combined Work was made is also called the "Linked
Version".

  The "Minimal Corresponding Source" for a Combined Work means the
Corresponding Source for the Combined Work, excluding any source code
for portions of the Combined Work that, considered in isolation, are
based on the Application, and not on the Linked Version.

  The "Corresponding Application Code" for a Combined Work means the
object code and/or source code for the Application, including any data
and utility programs needed for reproducing the Combined Work from the
Application, but excluding the System Libraries of the Combined Work.

  1. Exception to Section 3 of the GNU GPL.

  You may convey a covered work under sections 3 and 4 of this License
without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

  If you modify a copy of the Library, and, in your modifications, a
facility refers to a function or data to be supplied by an Application
that uses the facility (other than as an argument passed when the
facility is invoked), then you may convey a copy of the modified
version:

   a) under this License, provided that you make a good faith effort to
   ensure that, in the event an Application does not supply the
   function or data, the facility still operates, and performs
   whatever part of its purpose remains meaningful, or

   b) under the GNU GPL, with none of the additional permissions of
   this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

  The object code form of an Application may incorporate material from
a header file that is part of the Library.  You may convey such object
code under terms of your choice, provided that, if the incorporated
material is not limited to numerical parameters, data structure
layouts and accessors, or small macros, inline functions and templates
(ten or fewer lines in length), you do both of the following:

   a) Give prominent notice with each copy of the object code that the
   Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the object code with a copy of the GNU GPL and this license
   document.

  4. Combined Works.

  You may convey a Combined Work under terms of your choice that,
taken together, effectively do not restrict modification of the
portions of the Library contained in the Combined Work and reverse
engineering for debugging such modifications, if you also do each of
the following:

   a) Give prominent notice with each copy of the Combined Work that
   the Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the Combined Work with a copy of the GNU GPL and this license
   document.

   c) For a Combined Work that displays copyright notices during
   execution, include the copyright notice for the Library among
   these notices, as well as a reference directing the user to the
   copies of the GNU GPL and this license document.

   d) Do one of the following:

       0) Convey the Minimal Corresponding Source under the terms of this
       License, and the Corresponding Application Code in a form
       suitable for, and under terms that permit, the user to
       recombine or relink the Application with a modified version of
       the Linked Version to produce a modified Combined Work, in the
       manner specified by section 6 of the GNU GPL for conveying
       Corresponding Source.

       1) Use a suitable shared library mechanism for linking with the
       Library.  A suitable mechanism is one that (a) uses at run time
       a copy of the Library already present on the user's computer
       system, and (b) will operate properly with a modified version
       of the Library that is interface-compatible with the Linked
       Version.

   e) Provide Installation Information, but only if you would otherwise
   be required to provide such information under section 6 of the
   GNU GPL, and only to the extent that such information is
   necessary to install and execute a modified version of the
   Combined Work produced by recombining or relinking the
   Application with a modified version of the Linked Version. (If
   you use option 4d0, the Installation Information must accompany
   the Minimal Corresponding Source and Corresponding Application
   Code. If you use option 4d1, you must provide the Installation
   Information in the manner specified by section 6 of the GNU GPL
   for conveying Corresponding Source.)

  5. Combined Libraries.

  You may place library facilities that are a work based on the
Library side by side in a single library together with other library
facilities that are not Applications and are not covered by this
License, and convey such a combined library under terms of your
choice, if you do both of the following:

   a) Accompany the combined library with a copy of the same work based
   on the Library, uncombined with any other library facilities,
   conveyed under the terms of this License.

   b) Give prominent notice with the combined library that part of it
   is a work based on the Library, and explaining where to find the
   accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

  The Free Software Foundation may publish revised and/or new versions
of the GNU Lesser General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

  Each version is given a distinguishing version number. If the
Library as you received it specifies that a certain numbered version
of the GNU Lesser General Public License "or any later version"
applies to it, you have the option of following the terms and
conditions either of that published version or of any later version
published by the Free Software Foundation. If the Library as you
received it does not specify a version number of the GNU Lesser
General Public License, you may choose any version of the GNU Lesser
General Public License ever published by the Free Software Foundation.

  If the Library as you received it specifies that a proxy can decide
whether future versions of the GNU Lesser General Public License shall
apply, that proxy's public statement of acceptance of any version is
permanent authorization for you to choose that version for the
Library.
</file>

<file path="logs_start">
cd ./docs/ && rm -rf ../_build//
git submodule init; \
	git submodule update; \
	bin/pip install -r submodules/openg2p-registry/requirements.txt;
Requirement already satisfied: extendable-pydantic in ./lib/python3.11/site-packages (from -r submodules/openg2p-registry/requirements.txt (line 2)) (0.0.3)
Requirement already satisfied: pydantic in ./lib/python3.11/site-packages (from -r submodules/openg2p-registry/requirements.txt (line 3)) (1.10.6)
Requirement already satisfied: schwifty in ./lib/python3.11/site-packages (from -r submodules/openg2p-registry/requirements.txt (line 4)) (2023.3.0)
Requirement already satisfied: extendable>=0.0.3 in ./lib/python3.11/site-packages (from extendable-pydantic->-r submodules/openg2p-registry/requirements.txt (line 2)) (0.0.3)
Requirement already satisfied: wrapt in ./lib/python3.11/site-packages (from extendable-pydantic->-r submodules/openg2p-registry/requirements.txt (line 2)) (1.15.0)
Requirement already satisfied: typing-extensions>=4.2.0 in ./lib/python3.11/site-packages (from pydantic->-r submodules/openg2p-registry/requirements.txt (line 3)) (4.5.0)
Requirement already satisfied: iso3166 in ./lib/python3.11/site-packages (from schwifty->-r submodules/openg2p-registry/requirements.txt (line 4)) (2.1.1)
Requirement already satisfied: pycountry in ./lib/python3.11/site-packages (from schwifty->-r submodules/openg2p-registry/requirements.txt (line 4)) (22.3.5)
Requirement already satisfied: setuptools in ./lib/python3.11/site-packages (from pycountry->schwifty->-r submodules/openg2p-registry/requirements.txt (line 4)) (65.5.0)

[notice] A new release of pip is available: 23.1.2 -> 25.1.1
[notice] To update, run: pip install --upgrade pip

Documentation of openg2p-registry initialized.
git submodule init; \
	git submodule update; \
	bin/pip install -r submodules/openg2p-program/requirements.txt;
Requirement already satisfied: python-dateutil in ./lib/python3.11/site-packages (from -r submodules/openg2p-program/requirements.txt (line 2)) (2.7.3)
Requirement already satisfied: six>=1.5 in ./lib/python3.11/site-packages (from python-dateutil->-r submodules/openg2p-program/requirements.txt (line 2)) (1.16.0)

[notice] A new release of pip is available: 23.1.2 -> 25.1.1
[notice] To update, run: pip install --upgrade pip

Documentation of openg2p-program initialized.
cd ./docs/ && /Users/jeremi/Projects/134-openspp/openspp-documentation/bin/sphinx-build -b html -d ../_build//doctrees   . ../_build//html
Running Sphinx v4.5.0
[PosixPath('../submodules/odoo')]
Found Odoo sources in /Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/odoo.
Found Odoo sources in submodules dev environment.
Found custom addon in /Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program.
Found custom addon in /Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/queue.
Found custom addon in /Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-registry.
making output directory... done
myst v0.18.1: MdParserConfig(commonmark_only=False, gfm_only=False, enable_extensions=['deflist', 'linkify', 'colon_fence', 'substitution', 'html_image'], disable_syntax=[], all_links_external=False, url_schemes=('http', 'https', 'mailto', 'ftp'), ref_domains=None, highlight_code_blocks=True, number_code_blocks=[], title_to_header=False, heading_anchors=None, heading_slug_func=None, footnote_transition=True, words_per_minute=200, sub_delimiters=('{', '}'), linkify_fuzzy_links=True, dmath_allow_labels=True, dmath_allow_space=True, dmath_allow_digits=True, dmath_double_inline=False, update_mathjax=True, mathjax_classes='tex2jax_process|mathjax_process|math|output_area')
loading intersphinx inventory from https://docs.python.org/3/objects.inv...
loading intersphinx inventory from https://www.odoo.com/documentation/15.0/objects.inv...
[autosummary] generating autosummary for: community/code_of_conduct.md, community/contributing.md, community/index.md, community/license.md, community/module_lifecycle_development_status.rst, community/module_lifecycle_maintainer_role.rst, community/release_management.md, community/security_reporting.md, community/support.md, contributing/redirects.md, ..., user_guide/program_management/using_pmt.md, user_guide/program_management/using_vouchers.md, user_guide/registry_management/identity_management.md, user_guide/registry_management/import_export_data.md, user_guide/registry_management/index.md, user_guide/registry_management/register_individual.md, user_guide/registry_management/setting_up_farmer_registry.md, user_guide/registry_management/using_change_requests.md, user_guide/registry_management/using_event_data.md, user_guide/reporting_dashboards.md
building [mo]: targets for 0 po files that are out of date
building [html]: targets for 227 source files that are out of date
updating environment: [new config] 227 added, 0 changed, 0 removed
reading sources... [  0%] community/code_of_conduct
reading sources... [  0%] community/contributing
reading sources... [  1%] community/index
reading sources... [  1%] community/license
reading sources... [  2%] community/module_lifecycle_development_status
reading sources... [  2%] community/module_lifecycle_maintainer_role
reading sources... [  3%] community/release_management
reading sources... [  3%] community/security_reporting
reading sources... [  3%] community/support
reading sources... [  4%] contributing/redirects
reading sources... [  4%] developer_guide/api_usage/external_api_xmlrpc
reading sources... [  5%] developer_guide/api_usage/index
reading sources... [  5%] developer_guide/api_usage/rest_api
reading sources... [  6%] developer_guide/architecture
reading sources... [  6%] developer_guide/best_practices
reading sources... [  7%] developer_guide/customization/customizing_areas
reading sources... [  7%] developer_guide/customization/customizing_audit
reading sources... [  7%] developer_guide/customization/customizing_change_requests
reading sources... [  8%] developer_guide/customization/customizing_cycles
reading sources... [  8%] developer_guide/customization/customizing_entitlements
reading sources... [  9%] developer_guide/customization/customizing_fields
reading sources... [  9%] developer_guide/customization/customizing_indicators
reading sources... [ 10%] developer_guide/customization/customizing_programs
reading sources... [ 10%] developer_guide/customization/customizing_registry
reading sources... [ 11%] developer_guide/customization/customizing_service_points
reading sources... [ 11%] developer_guide/customization/implementing_pmt
reading sources... [ 11%] developer_guide/customization/index
reading sources... [ 12%] developer_guide/developer_mode
reading sources... [ 12%] developer_guide/i18n_l10n
reading sources... [ 13%] developer_guide/index
reading sources... [ 13%] developer_guide/integrations/dci
reading sources... [ 14%] developer_guide/integrations/esignet
reading sources... [ 14%] developer_guide/integrations/g2p-connect
reading sources... [ 14%] developer_guide/integrations/index
reading sources... [ 15%] developer_guide/integrations/keycloak_beneficiary_portal
reading sources... [ 15%] developer_guide/integrations/oidc
reading sources... [ 16%] developer_guide/module_development
reading sources... [ 16%] developer_guide/setup
reading sources... [ 17%] developer_guide/troubleshooting
reading sources... [ 17%] getting_started/index
reading sources... [ 18%] getting_started/installation_docker
reading sources... [ 18%] getting_started/installation_pypi
reading sources... [ 18%] getting_started/poc_and_pilot
reading sources... [ 19%] howto/index
reading sources... [ 19%] index
reading sources... [ 20%] overview/case_studies/index
reading sources... [ 20%] overview/concepts/data_collection_validation
reading sources... [ 21%] overview/concepts/data_protection
reading sources... [ 21%] overview/concepts/digital_public_infrastructure
reading sources... [ 22%] overview/concepts/extensibility
reading sources... [ 22%] overview/concepts/farmer_registry
reading sources... [ 22%] overview/concepts/index
reading sources... [ 23%] overview/concepts/integrated_beneficiary_registry
reading sources... [ 23%] overview/concepts/openg2p
reading sources... [ 24%] overview/concepts/registrant_concepts
reading sources... [ 24%] overview/concepts/registry_key_concepts
reading sources... [ 25%] overview/concepts/social_registry
reading sources... [ 25%] overview/concepts/sp_mis
reading sources... [ 25%] overview/concepts/user_management
reading sources... [ 26%] overview/features/index
reading sources... [ 26%] overview/features/integrations_apis
reading sources... [ 27%] overview/features/registry_data_management
reading sources... [ 27%] overview/index
reading sources... [ 28%] overview/use_cases/farmer_registry
reading sources... [ 28%] overview/use_cases/humanitarian
reading sources... [ 29%] overview/use_cases/index
reading sources... [ 29%] overview/use_cases/social-protection-management-information-system
reading sources... [ 29%] overview/use_cases/social_registry
reading sources... [ 30%] reference/api/index
reading sources... [ 30%] reference/glossary
reading sources... [ 31%] reference/index
reading sources... [ 31%] reference/modules/g2p_auth_id_oidc
reading sources... [ 32%] reference/modules/g2p_bank
reading sources... [ 32%] reference/modules/g2p_bank_rest_api
reading sources... [ 33%] reference/modules/g2p_connect_demo
reading sources... [ 33%] reference/modules/g2p_encryption
reading sources... [ 33%] reference/modules/g2p_encryption_keymanager
reading sources... [ 34%] reference/modules/g2p_encryption_rest_api
reading sources... [ 34%] reference/modules/g2p_entitlement_differential
reading sources... [ 35%] reference/modules/g2p_entitlement_in_kind
reading sources... [ 35%] reference/modules/g2p_entitlement_voucher
reading sources... [ 36%] reference/modules/g2p_openid_vci
reading sources... [ 36%] reference/modules/g2p_openid_vci_programs
reading sources... [ 37%] reference/modules/g2p_payment_cash
reading sources... [ 37%] reference/modules/g2p_payment_files
reading sources... [ 37%] reference/modules/g2p_payment_g2p_connect
reading sources... [ 38%] reference/modules/g2p_payment_interop_layer
reading sources... [ 38%] reference/modules/g2p_payment_phee
reading sources... [ 39%] reference/modules/g2p_payment_simple_mpesa
reading sources... [ 39%] reference/modules/g2p_program_approval
reading sources... [ 40%] reference/modules/g2p_program_assessment
reading sources... [ 40%] reference/modules/g2p_program_autoenrol
reading sources... [ 40%] reference/modules/g2p_program_cycleless
reading sources... [ 41%] reference/modules/g2p_program_documents
reading sources... [ 41%] reference/modules/g2p_program_registrant_info
reading sources... [ 42%] reference/modules/g2p_program_registrant_info_rest_api
reading sources... [ 42%] reference/modules/g2p_program_reimbursement
reading sources... [ 43%] reference/modules/g2p_programs
reading sources... [ 43%] reference/modules/g2p_programs_rest_api
reading sources... [ 44%] reference/modules/g2p_proxy_means_test
reading sources... [ 44%] reference/modules/g2p_registry_addl_info
reading sources... [ 44%] reference/modules/g2p_registry_addl_info_rest_api
reading sources... [ 45%] reference/modules/g2p_registry_base
reading sources... [ 45%] reference/modules/g2p_registry_encryption
reading sources... [ 46%] reference/modules/g2p_registry_group
reading sources... [ 46%] reference/modules/g2p_registry_individual
reading sources... [ 47%] reference/modules/g2p_registry_membership
reading sources... [ 47%] reference/modules/g2p_registry_rest_api
reading sources... [ 48%] reference/modules/g2p_registry_rest_api_extension_demo
reading sources... [ 48%] reference/modules/index
reading sources... [ 48%] reference/modules/spp_api
reading sources... [ 49%] reference/modules/spp_api_records
reading sources... [ 49%] reference/modules/spp_area
reading sources... [ 50%] reference/modules/spp_area_gis
reading sources... [ 50%] reference/modules/spp_audit_config
reading sources... [ 51%] reference/modules/spp_audit_log
reading sources... [ 51%] reference/modules/spp_audit_post
reading sources... [ 51%] reference/modules/spp_auto_update_entitlements
reading sources... [ 52%] reference/modules/spp_base
reading sources... [ 52%] reference/modules/spp_base_api
reading sources... [ 53%] reference/modules/spp_base_demo
reading sources... [ 53%] reference/modules/spp_base_gis
reading sources... [ 54%] reference/modules/spp_base_gis_demo
reading sources... [ 54%] reference/modules/spp_base_gis_rest
reading sources... [ 55%] reference/modules/spp_base_setting
reading sources... [ 55%] reference/modules/spp_basic_cash_entitlement_spent
reading sources... [ 55%] reference/modules/spp_change_request
reading sources... [ 56%] reference/modules/spp_change_request_add_children_demo
reading sources... [ 56%] reference/modules/spp_change_request_add_farmer
reading sources... [ 57%] reference/modules/spp_consent
reading sources... [ 57%] reference/modules/spp_custom_field
reading sources... [ 58%] reference/modules/spp_custom_field_custom_filter
reading sources... [ 58%] reference/modules/spp_custom_field_recompute_daily
reading sources... [ 59%] reference/modules/spp_custom_fields_ui
reading sources... [ 59%] reference/modules/spp_custom_filter
reading sources... [ 59%] reference/modules/spp_custom_filter_ui
reading sources... [ 60%] reference/modules/spp_data_export
reading sources... [ 60%] reference/modules/spp_dci_api_server
reading sources... [ 61%] reference/modules/spp_demo
reading sources... [ 61%] reference/modules/spp_dms
reading sources... [ 62%] reference/modules/spp_eligibility_sql
reading sources... [ 62%] reference/modules/spp_eligibility_tags
reading sources... [ 62%] reference/modules/spp_encryption
reading sources... [ 63%] reference/modules/spp_ent_trans
reading sources... [ 63%] reference/modules/spp_entitlement_basket
reading sources... [ 64%] reference/modules/spp_entitlement_cash
reading sources... [ 64%] reference/modules/spp_entitlement_in_kind
reading sources... [ 65%] reference/modules/spp_event_data
reading sources... [ 65%] reference/modules/spp_event_data_program_membership
reading sources... [ 66%] reference/modules/spp_event_demo
reading sources... [ 66%] reference/modules/spp_exclusion_filter
reading sources... [ 66%] reference/modules/spp_farmer_registry_base
reading sources... [ 67%] reference/modules/spp_farmer_registry_dashboard
reading sources... [ 67%] reference/modules/spp_farmer_registry_demo
reading sources... [ 68%] reference/modules/spp_idpass
reading sources... [ 68%] reference/modules/spp_idqueue
reading sources... [ 69%] reference/modules/spp_import_dci_api
reading sources... [ 69%] reference/modules/spp_import_match
reading sources... [ 70%] reference/modules/spp_irrigation
reading sources... [ 70%] reference/modules/spp_land_record
reading sources... [ 70%] reference/modules/spp_manual_entitlement
reading sources... [ 71%] reference/modules/spp_oauth
reading sources... [ 71%] reference/modules/spp_openid_vci
reading sources... [ 72%] reference/modules/spp_openid_vci_group
reading sources... [ 72%] reference/modules/spp_openid_vci_individual
reading sources... [ 73%] reference/modules/spp_pmt
reading sources... [ 73%] reference/modules/spp_pos
reading sources... [ 74%] reference/modules/spp_program_id
reading sources... [ 74%] reference/modules/spp_programs
reading sources... [ 74%] reference/modules/spp_programs_compliance_criteria
reading sources... [ 75%] reference/modules/spp_programs_sp
reading sources... [ 75%] reference/modules/spp_registrant_import
reading sources... [ 76%] reference/modules/spp_registrant_tag
reading sources... [ 76%] reference/modules/spp_registry_data_source
reading sources... [ 77%] reference/modules/spp_registry_group_hierarchy
reading sources... [ 77%] reference/modules/spp_scan_id_document
reading sources... [ 77%] reference/modules/spp_service_point_device
reading sources... [ 78%] reference/modules/spp_service_points
reading sources... [ 78%] reference/modules/spp_starter
reading sources... [ 79%] reference/modules/spp_user_roles
reading sources... [ 79%] reference/technical/audit_logs
reading sources... [ 80%] reference/technical/backup
reading sources... [ 80%] reference/technical/cycle_manager
reading sources... [ 81%] reference/technical/deduplication_manager
reading sources... [ 81%] reference/technical/eligibility_manager
reading sources... [ 81%] reference/technical/entitlement_manager
reading sources... [ 82%] reference/technical/index
reading sources... [ 82%] reference/technical/monitoring
reading sources... [ 83%] reference/technical/notification_manager
reading sources... [ 83%] reference/technical/performance
reading sources... [ 84%] reference/technical/program_manager
reading sources... [ 84%] reference/technical/security
reading sources... [ 85%] tutorial/managing_social_protection_programs
reading sources... [ 85%] tutorial/programs_and_cycles
reading sources... [ 85%] tutorial/user_guides/create_program_cycle_prepare_entitlements
reading sources... [ 86%] user_guide/administration/hardware_integration
reading sources... [ 86%] user_guide/administration/import_areas
reading sources... [ 87%] user_guide/administration/index
reading sources... [ 87%] user_guide/administration/managing_custom_fields
reading sources... [ 88%] user_guide/administration/service_points
reading sources... [ 88%] user_guide/administration/user_access
reading sources... [ 88%] user_guide/administration/using_audit_logs
reading sources... [ 89%] user_guide/consent_management
reading sources... [ 89%] user_guide/grievance_management
reading sources... [ 90%] user_guide/index
reading sources... [ 90%] user_guide/pos_usage
reading sources... [ 91%] user_guide/program_management/allocate_funds
reading sources... [ 91%] user_guide/program_management/configure_entitlements
reading sources... [ 92%] user_guide/program_management/create_cycle
reading sources... [ 92%] user_guide/program_management/create_program
reading sources... [ 92%] user_guide/program_management/enroll_beneficiaries
reading sources... [ 93%] user_guide/program_management/export_beneficiaries
reading sources... [ 93%] user_guide/program_management/implementing_pmt
reading sources... [ 94%] user_guide/program_management/index
reading sources... [ 94%] user_guide/program_management/programs_overview
reading sources... [ 95%] user_guide/program_management/using_geotargeting
reading sources... [ 95%] user_guide/program_management/using_indicators
reading sources... [ 96%] user_guide/program_management/using_pmt
reading sources... [ 96%] user_guide/program_management/using_vouchers
reading sources... [ 96%] user_guide/registry_management/identity_management
reading sources... [ 97%] user_guide/registry_management/import_export_data
reading sources... [ 97%] user_guide/registry_management/index
reading sources... [ 98%] user_guide/registry_management/register_individual
reading sources... [ 98%] user_guide/registry_management/setting_up_farmer_registry
reading sources... [ 99%] user_guide/registry_management/using_change_requests
reading sources... [ 99%] user_guide/registry_management/using_event_data
reading sources... [100%] user_guide/reporting_dashboards

/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/setup-build'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/authors'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/myst-reference'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/sphinx-extensions'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/redirects'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:519: WARNING: toctree contains reference to nonexisting document 'community/admins'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:1131: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:170: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:220: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:493: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:537: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:935: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:1101: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:: WARNING: image file not readable: _static/caching/caching-disabled.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:707: WARNING: image file not readable: _static/standards.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:725: WARNING: image file not readable: _static/voting_flowchart.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:14: WARNING: toctree contains reference to nonexisting document 'community/how_to_contribute_to_the_project'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:14: WARNING: toctree contains reference to nonexisting document 'community/i18n_l10n'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:14: WARNING: toctree contains reference to nonexisting document 'community/security_report'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:14: WARNING: toctree contains reference to nonexisting document 'community/l3_support'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:14: WARNING: toctree contains reference to nonexisting document 'community/# License'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/highlevel_architecture.jpg
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/deployment_architecture_onprem.jpg
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/deployment_architecture_on_prem_single_node.jpg
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/openspp_modular_architecture.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/architecture_ecosystem_1.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:: WARNING: image file not readable: developer_guide/images/openspp_architecture_large_project.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:265: WARNING: image file not readable: developer_guide/images/openspp_overview.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/developer_mode.md:31: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/oidc.md:: WARNING: image file not readable: developer_guide/integrations/images/openspp_oidc_configuration.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/getting_started/index.md:21: WARNING: toctree contains reference to nonexisting document 'getting_started/installation_guide'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#Developer Guides'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_mode'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/development_setup'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/setting_up_using_pypi'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/troubleshooting'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/indicators'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/module'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/troubleshooting'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#Customization'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_areas'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_audit'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_cr'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_entitlement'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_registry'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_registry_tab_fields'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_fields_indicators'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/custom_service_points'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/rest_api'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/dci'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/esignet'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/oidc'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/developer_guides/beneficiary_keycloak'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#User Guides'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/setting_up_farmer_registry'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/register_new_individual'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/enroll_beneficiaries'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/import_registrant_data'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/export_registrant_data'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/administrating_role_based_access'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/user_guides/setting_up_service_points'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#user_guides/implementing_pmt'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#developer_guides/custom_program'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#developer_guides/custom_cycle'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:46: WARNING: toctree contains reference to nonexisting document 'howto/#developer_guides/implmenting_pmt'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:17: WARNING: toctree contains reference to nonexisting document 'overview/concepts/social_protection_management_information_systems'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:17: WARNING: toctree contains reference to nonexisting document 'overview/concepts/user_mgt'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:17: WARNING: toctree contains reference to nonexisting document 'overview/concepts/security_archi'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:17: WARNING: toctree contains reference to nonexisting document 'overview/concepts/Registering_individuals_and_groups'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/integrations_apis.md:: WARNING: image file not readable: overview/features/images/integrations_mindmap.jpg
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:1: WARNING: top-level 'html_meta' key is deprecated, place under 'myst' key instead [myst.topmatter]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:14: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:25: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:72: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:93: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:106: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:129: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:142: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:208: WARNING: Non-consecutive header level increase; H1 to H3 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:3: WARNING: Document headings start at H3, not H1 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Configuration and Architecture'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/architecture'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/extensibility'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Security and Compliance'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/security'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/oidc'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/#audit_logs'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Code and Release Management'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/code'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/release_management'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Monitoring and Analytics'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/monitoring'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/dashboards'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Integrations'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/integrations'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/dci'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/external_api'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Other'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/backup'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/performance_optimization'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/# Managers and Modules'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/module'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/concepts'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/program_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/cycle_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/eligibility_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/entitlement_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/deduplication_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:48: WARNING: toctree contains reference to nonexisting document 'reference/programs/notification_manager'
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/eligibility_manager.py:docstring of odoo.addons.g2p_programs.models.managers.eligibility_manager.BaseEligibilityManager.enroll_eligible_registrants:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/eligibility_manager.py:docstring of odoo.addons.g2p_programs.models.managers.eligibility_manager.BaseEligibilityManager.verify_cycle_eligibility:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/index.md:3: WARNING: toctree contains reference to nonexisting document 'reference/technical/# Managers and Modules'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/index.md:3: WARNING: toctree contains reference to nonexisting document 'reference/technical/concepts'
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.enroll_eligible_registrants:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.last_cycle:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.new_cycle:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager:1: WARNING: duplicate object description of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager, other instance in reference/technical/program_manager, use :noindex: for one of them
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.enroll_eligible_registrants:1: WARNING: duplicate object description of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.enroll_eligible_registrants, other instance in reference/technical/program_manager, use :noindex: for one of them
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.enroll_eligible_registrants:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.last_cycle:1: WARNING: duplicate object description of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.last_cycle, other instance in reference/technical/program_manager, use :noindex: for one of them
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.last_cycle:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.mark_enroll_eligible_as_done:1: WARNING: duplicate object description of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.mark_enroll_eligible_as_done, other instance in reference/technical/program_manager, use :noindex: for one of them
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.new_cycle:1: WARNING: duplicate object description of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.new_cycle, other instance in reference/technical/program_manager, use :noindex: for one of them
/Users/jeremi/Projects/134-openspp/openspp-documentation/submodules/openg2p-program/g2p_programs/models/managers/program_manager.py:docstring of odoo.addons.g2p_programs.models.managers.program_manager.BaseProgramManager.new_cycle:3: ERROR: Unexpected indentation.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/security.md:: WARNING: image file not readable: reference/technical/images/security_architecture.jpg
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/programs_and_cycles.md:41: WARNING: image file not readable: tutorial/programs_and_cycles/program-wizard-1.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/1.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/2.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/3.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/4.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/5.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/6.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/7.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/8.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/9.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/10.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/11.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/12.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/13.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/14.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/15.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/16.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/17.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/18.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/19.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/20.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/21.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/22.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/23.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/24.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/25.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/26.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/27.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/28.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/29.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:: WARNING: image file not readable: tutorial/user_guides/create_program_cycle_prepare_entitlements/30.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/1.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/2.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/3.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/4.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/5.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/6.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/7.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/8.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/9.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/10.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/11.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/14.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md:: WARNING: image file not readable: user_guide/administration/setting_up_service_points/16.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:: WARNING: image file not readable: user_guide/administration/administrating_role_based_access/14.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:: WARNING: image file not readable: user_guide/administration/administrating_role_based_access/15.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:: WARNING: image file not readable: user_guide/administration/administrating_role_based_access/16.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:: WARNING: image file not readable: user_guide/administration/administrating_role_based_access/17.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:: WARNING: image file not readable: user_guide/administration/administrating_role_based_access/18.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#Developer Guides'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_mode'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/development_setup'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/setting_up_using_pypi'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/troubleshooting'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/indicators'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/module'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/troubleshooting'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#Customization'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_areas'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_audit'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_cr'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_entitlement'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_registry'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_registry_tab_fields'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_fields_indicators'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/custom_service_points'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/rest_api'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/dci'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/esignet'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/oidc'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/developer_guides/beneficiary_keycloak'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#User Guides'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/setting_up_farmer_registry'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/register_new_individual'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/enroll_beneficiaries'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/import_registrant_data'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/export_registrant_data'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/administrating_role_based_access'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/user_guides/setting_up_service_points'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#user_guides/implementing_pmt'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#developer_guides/custom_program'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#developer_guides/custom_cycle'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:46: WARNING: toctree contains reference to nonexisting document 'user_guide/#developer_guides/implmenting_pmt'
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/configure_entitlements.md:3: WARNING: Document headings start at H3, not H1 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_cycle.md:: WARNING: image file not readable: user_guide/program_management/create_program_cycle_prepare_entitlements/26.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_program.md:5: ERROR: Document or section may not begin with a transition.
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/enroll_beneficiaries.md:: WARNING: image file not readable: user_guide/program_management/enroll_beneficiaries/7.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/enroll_beneficiaries.md:: WARNING: image file not readable: user_guide/program_management/enroll_beneficiaries/8.png
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/import_export_data.md:3: WARNING: Document headings start at H3, not H1 [myst.header]
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/reporting_dashboards.md:: WARNING: image file not readable: user_guide/images/programs_dashboard.png
looking for now-outdated files... none found
pickling environment... done
checking consistency... /Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/release_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/security_reporting.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/support.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/contributing/redirects.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/api_usage/external_api_xmlrpc.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/api_usage/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/api_usage/rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/best_practices.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_areas.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_audit.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_change_requests.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_cycles.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_entitlements.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_fields.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_indicators.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_programs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_registry.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/customizing_service_points.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/implementing_pmt.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/customization/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/developer_mode.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/i18n_l10n.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/dci.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/esignet.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/g2p-connect.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/keycloak_beneficiary_portal.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/integrations/oidc.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/module_development.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/setup.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/troubleshooting.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/getting_started/installation_docker.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/getting_started/installation_pypi.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/case_studies/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/extensibility.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/openg2p.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/registrant_concepts.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/sp_mis.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/user_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/integrations_apis.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/registry_data_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/humanitarian.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/social-protection-management-information-system.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/social_registry.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/api/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_auth_id_oidc.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_bank.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_bank_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_connect_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_encryption.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_encryption_keymanager.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_encryption_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_entitlement_differential.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_entitlement_in_kind.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_entitlement_voucher.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_openid_vci.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_openid_vci_programs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_cash.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_files.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_g2p_connect.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_interop_layer.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_phee.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_payment_simple_mpesa.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_approval.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_assessment.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_autoenrol.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_cycleless.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_documents.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_registrant_info.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_registrant_info_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_reimbursement.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_programs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_programs_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_proxy_means_test.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_addl_info.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_addl_info_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_encryption.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_group.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_individual.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_membership.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_rest_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_rest_api_extension_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_api_records.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area_gis.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_config.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_log.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_post.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_auto_update_entitlements.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_gis.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_gis_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_gis_rest.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_setting.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_basic_cash_entitlement_spent.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_change_request.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_change_request_add_children_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_change_request_add_farmer.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_consent.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_field.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_field_custom_filter.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_field_recompute_daily.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_fields_ui.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_filter.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_custom_filter_ui.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_data_export.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_dci_api_server.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_dms.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_eligibility_sql.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_eligibility_tags.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_encryption.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_ent_trans.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_basket.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_cash.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_in_kind.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_event_data.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_event_data_program_membership.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_event_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_exclusion_filter.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_base.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_dashboard.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_demo.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_idpass.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_idqueue.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_dci_api.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_irrigation.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_land_record.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_manual_entitlement.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_oauth.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_openid_vci.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_openid_vci_group.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_openid_vci_individual.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_pmt.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_pos.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_program_id.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_programs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_programs_compliance_criteria.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_programs_sp.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_registrant_import.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_registrant_tag.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_registry_data_source.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_registry_group_hierarchy.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_scan_id_document.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_service_point_device.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_service_points.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_starter.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_user_roles.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/audit_logs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/backup.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/monitoring.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/performance.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/technical/security.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/managing_social_protection_programs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/programs_and_cycles.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/hardware_integration.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/import_areas.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/managing_custom_fields.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/service_points.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/using_audit_logs.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/consent_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/grievance_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/pos_usage.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/allocate_funds.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/configure_entitlements.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_cycle.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_program.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/enroll_beneficiaries.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/export_beneficiaries.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/implementing_pmt.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/programs_overview.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/using_geotargeting.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/using_indicators.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/using_pmt.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/using_vouchers.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/identity_management.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/import_export_data.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/index.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/register_individual.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/setting_up_farmer_registry.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/using_change_requests.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/registry_management/using_event_data.md: WARNING: document isn't included in any toctree
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/reporting_dashboards.md: WARNING: document isn't included in any toctree
done
preparing documents... done
writing output... [  0%] community/code_of_conduct
writing output... [  0%] community/contributing
writing output... [  1%] community/index
writing output... [  1%] community/license
writing output... [  2%] community/module_lifecycle_development_status
writing output... [  2%] community/module_lifecycle_maintainer_role
writing output... [  3%] community/release_management
writing output... [  3%] community/security_reporting
writing output... [  3%] community/support
writing output... [  4%] contributing/redirects
writing output... [  4%] developer_guide/api_usage/external_api_xmlrpc
writing output... [  5%] developer_guide/api_usage/index
writing output... [  5%] developer_guide/api_usage/rest_api
writing output... [  6%] developer_guide/architecture
writing output... [  6%] developer_guide/best_practices
writing output... [  7%] developer_guide/customization/customizing_areas
writing output... [  7%] developer_guide/customization/customizing_audit
writing output... [  7%] developer_guide/customization/customizing_change_requests
writing output... [  8%] developer_guide/customization/customizing_cycles
writing output... [  8%] developer_guide/customization/customizing_entitlements
writing output... [  9%] developer_guide/customization/customizing_fields
writing output... [  9%] developer_guide/customization/customizing_indicators
writing output... [ 10%] developer_guide/customization/customizing_programs
writing output... [ 10%] developer_guide/customization/customizing_registry
writing output... [ 11%] developer_guide/customization/customizing_service_points
writing output... [ 11%] developer_guide/customization/implementing_pmt
writing output... [ 11%] developer_guide/customization/index
writing output... [ 12%] developer_guide/developer_mode
writing output... [ 12%] developer_guide/i18n_l10n
writing output... [ 13%] developer_guide/index
writing output... [ 13%] developer_guide/integrations/dci
writing output... [ 14%] developer_guide/integrations/esignet
writing output... [ 14%] developer_guide/integrations/g2p-connect
writing output... [ 14%] developer_guide/integrations/index
writing output... [ 15%] developer_guide/integrations/keycloak_beneficiary_portal
writing output... [ 15%] developer_guide/integrations/oidc
writing output... [ 16%] developer_guide/module_development
writing output... [ 16%] developer_guide/setup
writing output... [ 17%] developer_guide/troubleshooting
writing output... [ 17%] getting_started/index
writing output... [ 18%] getting_started/installation_docker
writing output... [ 18%] getting_started/installation_pypi
writing output... [ 18%] getting_started/poc_and_pilot
writing output... [ 19%] howto/index
writing output... [ 19%] index
writing output... [ 20%] overview/case_studies/index
writing output... [ 20%] overview/concepts/data_collection_validation
writing output... [ 21%] overview/concepts/data_protection
writing output... [ 21%] overview/concepts/digital_public_infrastructure
writing output... [ 22%] overview/concepts/extensibility
writing output... [ 22%] overview/concepts/farmer_registry
writing output... [ 22%] overview/concepts/index
writing output... [ 23%] overview/concepts/integrated_beneficiary_registry
writing output... [ 23%] overview/concepts/openg2p
writing output... [ 24%] overview/concepts/registrant_concepts
writing output... [ 24%] overview/concepts/registry_key_concepts
writing output... [ 25%] overview/concepts/social_registry
writing output... [ 25%] overview/concepts/sp_mis
writing output... [ 25%] overview/concepts/user_management
writing output... [ 26%] overview/features/index
writing output... [ 26%] overview/features/integrations_apis
writing output... [ 27%] overview/features/registry_data_management
writing output... [ 27%] overview/index
writing output... [ 28%] overview/use_cases/farmer_registry
writing output... [ 28%] overview/use_cases/humanitarian
writing output... [ 29%] overview/use_cases/index
writing output... [ 29%] overview/use_cases/social-protection-management-information-system
writing output... [ 29%] overview/use_cases/social_registry
writing output... [ 30%] reference/api/index
writing output... [ 30%] reference/glossary
writing output... [ 31%] reference/index
writing output... [ 31%] reference/modules/g2p_auth_id_oidc
writing output... [ 32%] reference/modules/g2p_bank
writing output... [ 32%] reference/modules/g2p_bank_rest_api
writing output... [ 33%] reference/modules/g2p_connect_demo
writing output... [ 33%] reference/modules/g2p_encryption
writing output... [ 33%] reference/modules/g2p_encryption_keymanager
writing output... [ 34%] reference/modules/g2p_encryption_rest_api
writing output... [ 34%] reference/modules/g2p_entitlement_differential
writing output... [ 35%] reference/modules/g2p_entitlement_in_kind
writing output... [ 35%] reference/modules/g2p_entitlement_voucher
writing output... [ 36%] reference/modules/g2p_openid_vci
writing output... [ 36%] reference/modules/g2p_openid_vci_programs
writing output... [ 37%] reference/modules/g2p_payment_cash
writing output... [ 37%] reference/modules/g2p_payment_files
writing output... [ 37%] reference/modules/g2p_payment_g2p_connect
writing output... [ 38%] reference/modules/g2p_payment_interop_layer
writing output... [ 38%] reference/modules/g2p_payment_phee
writing output... [ 39%] reference/modules/g2p_payment_simple_mpesa
writing output... [ 39%] reference/modules/g2p_program_approval
writing output... [ 40%] reference/modules/g2p_program_assessment
writing output... [ 40%] reference/modules/g2p_program_autoenrol
writing output... [ 40%] reference/modules/g2p_program_cycleless
writing output... [ 41%] reference/modules/g2p_program_documents
writing output... [ 41%] reference/modules/g2p_program_registrant_info
writing output... [ 42%] reference/modules/g2p_program_registrant_info_rest_api
writing output... [ 42%] reference/modules/g2p_program_reimbursement
writing output... [ 43%] reference/modules/g2p_programs
writing output... [ 43%] reference/modules/g2p_programs_rest_api
writing output... [ 44%] reference/modules/g2p_proxy_means_test
writing output... [ 44%] reference/modules/g2p_registry_addl_info
writing output... [ 44%] reference/modules/g2p_registry_addl_info_rest_api
writing output... [ 45%] reference/modules/g2p_registry_base
writing output... [ 45%] reference/modules/g2p_registry_encryption
writing output... [ 46%] reference/modules/g2p_registry_group
writing output... [ 46%] reference/modules/g2p_registry_individual
writing output... [ 47%] reference/modules/g2p_registry_membership
writing output... [ 47%] reference/modules/g2p_registry_rest_api
writing output... [ 48%] reference/modules/g2p_registry_rest_api_extension_demo
writing output... [ 48%] reference/modules/index
writing output... [ 48%] reference/modules/spp_api
writing output... [ 49%] reference/modules/spp_api_records
writing output... [ 49%] reference/modules/spp_area
writing output... [ 50%] reference/modules/spp_area_gis
writing output... [ 50%] reference/modules/spp_audit_config
writing output... [ 51%] reference/modules/spp_audit_log
writing output... [ 51%] reference/modules/spp_audit_post
writing output... [ 51%] reference/modules/spp_auto_update_entitlements
writing output... [ 52%] reference/modules/spp_base
writing output... [ 52%] reference/modules/spp_base_api
writing output... [ 53%] reference/modules/spp_base_demo
writing output... [ 53%] reference/modules/spp_base_gis
writing output... [ 54%] reference/modules/spp_base_gis_demo
writing output... [ 54%] reference/modules/spp_base_gis_rest
writing output... [ 55%] reference/modules/spp_base_setting
writing output... [ 55%] reference/modules/spp_basic_cash_entitlement_spent
writing output... [ 55%] reference/modules/spp_change_request
writing output... [ 56%] reference/modules/spp_change_request_add_children_demo
writing output... [ 56%] reference/modules/spp_change_request_add_farmer
writing output... [ 57%] reference/modules/spp_consent
writing output... [ 57%] reference/modules/spp_custom_field
writing output... [ 58%] reference/modules/spp_custom_field_custom_filter
writing output... [ 58%] reference/modules/spp_custom_field_recompute_daily
writing output... [ 59%] reference/modules/spp_custom_fields_ui
writing output... [ 59%] reference/modules/spp_custom_filter
writing output... [ 59%] reference/modules/spp_custom_filter_ui
writing output... [ 60%] reference/modules/spp_data_export
writing output... [ 60%] reference/modules/spp_dci_api_server
writing output... [ 61%] reference/modules/spp_demo
writing output... [ 61%] reference/modules/spp_dms
writing output... [ 62%] reference/modules/spp_eligibility_sql
writing output... [ 62%] reference/modules/spp_eligibility_tags
writing output... [ 62%] reference/modules/spp_encryption
writing output... [ 63%] reference/modules/spp_ent_trans
writing output... [ 63%] reference/modules/spp_entitlement_basket
writing output... [ 64%] reference/modules/spp_entitlement_cash
writing output... [ 64%] reference/modules/spp_entitlement_in_kind
writing output... [ 65%] reference/modules/spp_event_data
writing output... [ 65%] reference/modules/spp_event_data_program_membership
writing output... [ 66%] reference/modules/spp_event_demo
writing output... [ 66%] reference/modules/spp_exclusion_filter
writing output... [ 66%] reference/modules/spp_farmer_registry_base
writing output... [ 67%] reference/modules/spp_farmer_registry_dashboard
writing output... [ 67%] reference/modules/spp_farmer_registry_demo
writing output... [ 68%] reference/modules/spp_idpass
writing output... [ 68%] reference/modules/spp_idqueue
writing output... [ 69%] reference/modules/spp_import_dci_api
writing output... [ 69%] reference/modules/spp_import_match
writing output... [ 70%] reference/modules/spp_irrigation
writing output... [ 70%] reference/modules/spp_land_record
writing output... [ 70%] reference/modules/spp_manual_entitlement
writing output... [ 71%] reference/modules/spp_oauth
writing output... [ 71%] reference/modules/spp_openid_vci
writing output... [ 72%] reference/modules/spp_openid_vci_group
writing output... [ 72%] reference/modules/spp_openid_vci_individual
writing output... [ 73%] reference/modules/spp_pmt
writing output... [ 73%] reference/modules/spp_pos
writing output... [ 74%] reference/modules/spp_program_id
writing output... [ 74%] reference/modules/spp_programs
writing output... [ 74%] reference/modules/spp_programs_compliance_criteria
writing output... [ 75%] reference/modules/spp_programs_sp
writing output... [ 75%] reference/modules/spp_registrant_import
writing output... [ 76%] reference/modules/spp_registrant_tag
writing output... [ 76%] reference/modules/spp_registry_data_source
writing output... [ 77%] reference/modules/spp_registry_group_hierarchy
writing output... [ 77%] reference/modules/spp_scan_id_document
writing output... [ 77%] reference/modules/spp_service_point_device
writing output... [ 78%] reference/modules/spp_service_points
writing output... [ 78%] reference/modules/spp_starter
writing output... [ 79%] reference/modules/spp_user_roles
writing output... [ 79%] reference/technical/audit_logs
writing output... [ 80%] reference/technical/backup
writing output... [ 80%] reference/technical/cycle_manager
writing output... [ 81%] reference/technical/deduplication_manager
writing output... [ 81%] reference/technical/eligibility_manager
writing output... [ 81%] reference/technical/entitlement_manager
writing output... [ 82%] reference/technical/index
writing output... [ 82%] reference/technical/monitoring
writing output... [ 83%] reference/technical/notification_manager
writing output... [ 83%] reference/technical/performance
writing output... [ 84%] reference/technical/program_manager
writing output... [ 84%] reference/technical/security
writing output... [ 85%] tutorial/managing_social_protection_programs
writing output... [ 85%] tutorial/programs_and_cycles
writing output... [ 85%] tutorial/user_guides/create_program_cycle_prepare_entitlements
writing output... [ 86%] user_guide/administration/hardware_integration
writing output... [ 86%] user_guide/administration/import_areas
writing output... [ 87%] user_guide/administration/index
writing output... [ 87%] user_guide/administration/managing_custom_fields
writing output... [ 88%] user_guide/administration/service_points
writing output... [ 88%] user_guide/administration/user_access
writing output... [ 88%] user_guide/administration/using_audit_logs
writing output... [ 89%] user_guide/consent_management
writing output... [ 89%] user_guide/grievance_management
writing output... [ 90%] user_guide/index
writing output... [ 90%] user_guide/pos_usage
writing output... [ 91%] user_guide/program_management/allocate_funds
writing output... [ 91%] user_guide/program_management/configure_entitlements
writing output... [ 92%] user_guide/program_management/create_cycle
writing output... [ 92%] user_guide/program_management/create_program
writing output... [ 92%] user_guide/program_management/enroll_beneficiaries
writing output... [ 93%] user_guide/program_management/export_beneficiaries
writing output... [ 93%] user_guide/program_management/implementing_pmt
writing output... [ 94%] user_guide/program_management/index
writing output... [ 94%] user_guide/program_management/programs_overview
writing output... [ 95%] user_guide/program_management/using_geotargeting
writing output... [ 95%] user_guide/program_management/using_indicators
writing output... [ 96%] user_guide/program_management/using_pmt
writing output... [ 96%] user_guide/program_management/using_vouchers
writing output... [ 96%] user_guide/registry_management/identity_management
writing output... [ 97%] user_guide/registry_management/import_export_data
writing output... [ 97%] user_guide/registry_management/index
writing output... [ 98%] user_guide/registry_management/register_individual
writing output... [ 98%] user_guide/registry_management/setting_up_farmer_registry
writing output... [ 99%] user_guide/registry_management/using_change_requests
writing output... [ 99%] user_guide/registry_management/using_event_data
writing output... [100%] user_guide/reporting_dashboards

/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:14: WARNING: 'myst' reference target not found: security_report
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:211: WARNING: undefined label: contributing-editing-external-package-documentation-label
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:233: WARNING: unknown document: myst-reference
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:260: WARNING: unknown document: myst-reference
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:514: WARNING: unknown document: setup-build
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:587: WARNING: unknown document: /contributing/setup-build
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:881: WARNING: undefined label: glossary-label
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/contributing.md:888: WARNING: undefined label: glossary-label
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:5: WARNING: unknown document: how_to_contribute_to_the_project
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:6: WARNING: unknown document: i18n_l10n
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:10: WARNING: unknown document: security_report
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/community/index.md:11: WARNING: unknown document: l3_support
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:235: WARNING: 'myst' reference target not found: programs/eligibility_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:236: WARNING: 'myst' reference target not found: programs/entitlement_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:237: WARNING: 'myst' reference target not found: programs/deduplication_manager.md
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:238: WARNING: 'myst' reference target not found: programs/notification_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:239: WARNING: 'myst' reference target not found: programs/program_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:240: WARNING: 'myst' reference target not found: programs/cycle_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:298: WARNING: 'myst' reference target not found: eligibility_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:299: WARNING: 'myst' reference target not found: entitlement_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:300: WARNING: 'myst' reference target not found: deduplication_manager.md
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:301: WARNING: 'myst' reference target not found: notification_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:302: WARNING: 'myst' reference target not found: program_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/architecture.md:303: WARNING: 'myst' reference target not found: cycle_manager.rst
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/developer_mode.md:26: WARNING: 'myst' reference target not found: #frontendframeworkassets_debug_mode
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/developer_mode.md:26: WARNING: 'myst' reference target not found: #frontendframeworktests_debug_mode
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/i18n_l10n.md:14: WARNING: term not in glossary: Internationalization
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/developer_guide/i18n_l10n.md:18: WARNING: term not in glossary: Localization
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:7: WARNING: unknown document: developer_mode
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:8: WARNING: unknown document: developer_guides/development_setup
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:9: WARNING: unknown document: developer_guides/setting_up_using_pypi
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:10: WARNING: unknown document: developer_guides/module
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:11: WARNING: unknown document: developer_guides/indicators
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:12: WARNING: unknown document: developer_guides/troubleshooting
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:16: WARNING: unknown document: developer_guides/custom_areas
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:17: WARNING: unknown document: developer_guides/custom_audit
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:18: WARNING: unknown document: developer_guides/custom_cr
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:19: WARNING: unknown document: developer_guides/custom_entitlement
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:20: WARNING: unknown document: developer_guides/custom_registry
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:21: WARNING: unknown document: developer_guides/custom_registry_tab_fields
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:22: WARNING: unknown document: developer_guides/custom_fields_indicators
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:23: WARNING: unknown document: developer_guides/custom_service_points
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:24: WARNING: unknown document: developer_guides/rest_api
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:28: WARNING: unknown document: developer_guides/dci
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:32: WARNING: unknown document: developer_guides/esignet
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:33: WARNING: unknown document: developer_guides/oidc
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:34: WARNING: unknown document: developer_guides/beneficiary_keycloak
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:38: WARNING: unknown document: user_guides/setting_up_farmer_registry
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:39: WARNING: unknown document: user_guides/register_new_individual
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:40: WARNING: unknown document: user_guides/enroll_beneficiaries
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:41: WARNING: unknown document: user_guides/import_registrant_data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:42: WARNING: unknown document: user_guides/export_registrant_data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:43: WARNING: unknown document: user_guides/administrating_role_based_access
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/howto/index.md:44: WARNING: unknown document: user_guides/setting_up_service_points
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/digital_public_infrastructure.md:16: WARNING: term not in glossary: Civil Registration and Vital Statistics
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:9: WARNING: unknown document: social_protection_management_information_systems
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:10: WARNING: unknown document: user_mgt
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:11: WARNING: unknown document: security_archi
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/index.md:13: WARNING: unknown document: Registering_individuals_and_groups
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/registry_key_concepts.md:21: WARNING: term not in glossary: event data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/concepts/registry_key_concepts.md:169: WARNING: Pygments lexer name 'mermaid' is not known
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/integrations_apis.md:25: WARNING: 'myst' reference target not found: /technical_reference/external_api.html
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/registry_data_management.md:43: WARNING: unknown document: /explanation/registry_key_concepts
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/registry_data_management.md:43: WARNING: unknown document: /explanation/data_protection
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/registry_data_management.md:44: WARNING: unknown document: /tutorial/user_guides/register_new_individual
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/features/registry_data_management.md:45: WARNING: unknown document: /howto/user_guides/import_export_data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/overview/use_cases/farmer_registry.md:146: WARNING: Pygments lexer name 'mermaid' is not known
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:11: WARNING: unknown document: architecture
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:12: WARNING: unknown document: extensibility
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:16: WARNING: unknown document: security
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:20: WARNING: unknown document: code
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:21: WARNING: unknown document: release_management
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:25: WARNING: unknown document: monitoring
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:26: WARNING: unknown document: programs/dashboards
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:30: WARNING: unknown document: integrations
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:31: WARNING: unknown document: external_api
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:35: WARNING: unknown document: backup
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:36: WARNING: unknown document: performance_optimization
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:40: WARNING: unknown document: programs/concepts
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:41: WARNING: unknown document: programs/program_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:42: WARNING: unknown document: programs/cycle_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:43: WARNING: unknown document: programs/eligibility_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:44: WARNING: unknown document: programs/entitlement_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:45: WARNING: unknown document: programs/deduplication_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/index.md:46: WARNING: unknown document: programs/notification_manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_entitlement_voucher.md:28: WARNING: 'myst' reference target not found: [g2p_programs](g2p_programs)#entitlement-manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_documents.md:10: WARNING: 'myst' reference target not found: g2p_documents
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_documents.md:35: WARNING: 'myst' reference target not found: g2p_documents
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_documents.md:40: WARNING: 'myst' reference target not found: g2p_documents
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_registrant_info.md:25: WARNING: 'myst' reference target not found: g2p_program
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_program_registrant_info.md:26: WARNING: 'myst' reference target not found: g2p_program_membership
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md:36: WARNING: 'myst' reference target not found: g2p.reg.id
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md:37: WARNING: 'myst' reference target not found: g2p.phone.number
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md:38: WARNING: 'myst' reference target not found: g2p.reg.rel
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md:39: WARNING: 'myst' reference target not found: g2p.registrant.tags
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_base.md:40: WARNING: 'myst' reference target not found: g2p.district
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/g2p_registry_group.md:26: WARNING: 'myst' reference target not found: g2p.group.kind
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area.md:26: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area.md:30: WARNING: 'myst' reference target not found: spp.area
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area.md:35: WARNING: 'myst' reference target not found: spp.area.kind
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_area_gis.md:8: WARNING: 'myst' reference target not found: link-to-area-module-documentation
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_log.md:30: WARNING: 'myst' reference target not found: spp.audit.rule
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_log.md:35: WARNING: 'myst' reference target not found: spp.audit.log
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_audit_post.md:29: WARNING: 'myst' reference target not found: spp.audit.log
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base.md:31: WARNING: 'myst' reference target not found: utm
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_api.md:30: WARNING: 'myst' reference target not found: spp_external_integration
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_demo.md:22: WARNING: 'myst' reference target not found: product
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_demo.md:23: WARNING: 'myst' reference target not found: stock
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_gis.md:37: WARNING: 'myst' reference target not found: Registries
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_base_setting.md:21: WARNING: 'myst' reference target not found: Base
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_change_request_add_children_demo.md:36: WARNING: 'myst' reference target not found: phone_validation
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_change_request_add_farmer.md:28: WARNING: 'myst' reference target not found: phone_validation
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_demo.md:20: WARNING: 'myst' reference target not found: theme_openspp_muk
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_demo.md:23: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_eligibility_sql.md:29: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_eligibility_sql.md:33: WARNING: 'myst' reference target not found: g2p.program_membership.manager.sql
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_encryption.md:8: WARNING: 'myst' reference target not found: g2p-encryption
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_encryption.md:21: WARNING: 'myst' reference target not found: g2p-encryption
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_basket.md:28: WARNING: 'myst' reference target not found: product
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_basket.md:30: WARNING: 'myst' reference target not found: stock
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_entitlement_cash.md:22: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_demo.md:18: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_demo.md:24: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_farmer_registry_demo.md:24: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_idqueue.md:25: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md:20: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md:24: WARNING: 'myst' reference target not found: base_import
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md:24: WARNING: 'myst' reference target not found: base_import
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md:24: WARNING: 'myst' reference target not found: base_import
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_import_match.md:37: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/reference/modules/spp_manual_entitlement.md:22: WARNING: 'myst' reference target not found: queue_job
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/programs_and_cycles.md:5: WARNING: term not in glossary: Program
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/programs_and_cycles.md:5: WARNING: term not in glossary: Cycle
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:25: WARNING: 'myst' reference target not found: #creating-cycle
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:153: WARNING: 'myst' reference target not found: #cycle-manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md:161: WARNING: 'myst' reference target not found: #entitlement-manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/administration/user_access.md:127: WARNING: undefined label: access_rights
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:7: WARNING: unknown document: developer_mode
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:8: WARNING: unknown document: developer_guides/development_setup
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:9: WARNING: unknown document: developer_guides/setting_up_using_pypi
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:10: WARNING: unknown document: developer_guides/module
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:11: WARNING: unknown document: developer_guides/indicators
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:12: WARNING: unknown document: developer_guides/troubleshooting
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:16: WARNING: unknown document: developer_guides/custom_areas
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:17: WARNING: unknown document: developer_guides/custom_audit
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:18: WARNING: unknown document: developer_guides/custom_cr
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:19: WARNING: unknown document: developer_guides/custom_entitlement
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:20: WARNING: unknown document: developer_guides/custom_registry
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:21: WARNING: unknown document: developer_guides/custom_registry_tab_fields
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:22: WARNING: unknown document: developer_guides/custom_fields_indicators
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:23: WARNING: unknown document: developer_guides/custom_service_points
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:24: WARNING: unknown document: developer_guides/rest_api
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:28: WARNING: unknown document: developer_guides/dci
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:32: WARNING: unknown document: developer_guides/esignet
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:33: WARNING: unknown document: developer_guides/oidc
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:34: WARNING: unknown document: developer_guides/beneficiary_keycloak
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:38: WARNING: unknown document: user_guides/setting_up_farmer_registry
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:39: WARNING: unknown document: user_guides/register_new_individual
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:40: WARNING: unknown document: user_guides/enroll_beneficiaries
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:41: WARNING: unknown document: user_guides/import_registrant_data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:42: WARNING: unknown document: user_guides/export_registrant_data
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:43: WARNING: unknown document: user_guides/administrating_role_based_access
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/index.md:44: WARNING: unknown document: user_guides/setting_up_service_points
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/pos_usage.md:99: WARNING: 'myst' reference target not found: #starting-point-of-sale-in-mobile-view
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/pos_usage.md:141: WARNING: 'myst' reference target not found: #starting-point-of-sale-in-web-view
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_cycle.md:25: WARNING: 'myst' reference target not found: #creating-cycle
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_cycle.md:153: WARNING: 'myst' reference target not found: #cycle-manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/create_cycle.md:161: WARNING: 'myst' reference target not found: #entitlement-manager
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/programs_overview.md:5: WARNING: term not in glossary: Program
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/programs_overview.md:5: WARNING: term not in glossary: Cycle
/Users/jeremi/Projects/134-openspp/openspp-documentation/docs/user_guide/program_management/using_geotargeting.md:100: WARNING: 'myst' reference target not found: programs_and_cycles.md
generating indices... genindex done
highlighting module code... [ 16%] odoo.addons.g2p_programs.models.managers.cycle_manager
highlighting module code... [ 33%] odoo.addons.g2p_programs.models.managers.eligibility_manager
highlighting module code... [ 50%] odoo.addons.g2p_programs.models.managers.entitlement_manager
highlighting module code... [ 66%] odoo.addons.g2p_programs.models.managers.notification_manager
highlighting module code... [ 83%] odoo.addons.g2p_programs.models.managers.program_manager
highlighting module code... [100%] odoo.addons.g2p_registry_membership.models.group

writing additional pages... search opensearch done
copying images... [  0%] _static/copy.svg
copying images... [  0%] developer_guide/api_usage/rest_api/1.png
copying images... [  1%] developer_guide/api_usage/rest_api/2.png
copying images... [  1%] developer_guide/api_usage/rest_api/3.png
copying images... [  1%] developer_guide/customization/custom_areas/1.png
copying images... [  2%] developer_guide/customization/custom_areas/2.png
copying images... [  2%] developer_guide/customization/custom_audit/0.png
copying images... [  3%] developer_guide/customization/custom_audit/1.png
copying images... [  3%] developer_guide/customization/custom_audit/2.png
copying images... [  3%] developer_guide/customization/custom_audit/3.png
copying images... [  4%] developer_guide/customization/custom_audit/4.png
copying images... [  4%] developer_guide/customization/custom_cr/change_request_module_in_apps.png
copying images... [  5%] developer_guide/customization/custom_cr/blank_request_type.png
copying images... [  5%] developer_guide/customization/custom_cr/with_request_type.png
copying images... [  5%] developer_guide/customization/custom_cr/request_form_view.png
copying images... [  6%] developer_guide/customization/custom_entitlement/1.png
copying images... [  6%] developer_guide/customization/custom_entitlement/2.png
copying images... [  7%] developer_guide/customization/custom_registry/1.png
copying images... [  7%] developer_guide/customization/custom_registry/2.png
copying images... [  7%] developer_guide/customization/custom_registry/3.png
copying images... [  8%] developer_guide/customization/custom_registry/4.png
copying images... [  8%] developer_guide/customization/custom_service_points/1.png
copying images... [  9%] developer_guide/customization/custom_service_points/2.png
copying images... [  9%] developer_guide/developer_mode/1.png
copying images... [  9%] developer_guide/developer_mode/2.png
copying images... [ 10%] developer_guide/developer_mode/3.png
copying images... [ 10%] developer_guide/integrations/esignet/1.png
copying images... [ 10%] developer_guide/integrations/esignet/2.png
copying images... [ 11%] developer_guide/integrations/esignet/3.png
copying images... [ 11%] developer_guide/integrations/beneficiary_keycloak/3.1.png
copying images... [ 12%] developer_guide/integrations/beneficiary_keycloak/3.3.png
copying images... [ 12%] developer_guide/integrations/beneficiary_keycloak/3.4.png
copying images... [ 12%] developer_guide/integrations/beneficiary_keycloak/6.2.png
copying images... [ 13%] images/openspp_bb.png
copying images... [ 13%] overview/concepts/images/registrants/individual_list.png
copying images... [ 14%] overview/concepts/images/registrants/indivividual_ui.png
copying images... [ 14%] overview/concepts/images/registrants/group_list.png
copying images... [ 14%] overview/concepts/images/registrants/group_ui.png
copying images... [ 15%] overview/concepts/images/registrants/group_membership.png
copying images... [ 15%] overview/concepts/images/registrants/group_membership_type.png
copying images... [ 16%] overview/concepts/images/registrants/registrant_relations.png
copying images... [ 16%] overview/concepts/images/registrants/registrant_relation_config.png
copying images... [ 16%] overview/concepts/images/registrants/registrant_ids.png
copying images... [ 17%] overview/concepts/images/registrants/import_2.png
copying images... [ 17%] overview/concepts/images/registrants/import_3.png
copying images... [ 18%] overview/concepts/images/registrants/import_mapping.png
copying images... [ 18%] overview/concepts/images/registrants/import_4.png
copying images... [ 18%] overview/concepts/images/registrants/export_to_import.png
copying images... [ 19%] overview/concepts/images/registrants/export_2.png
copying images... [ 19%] overview/concepts/images/registrants/export_1.png
copying images... [ 20%] overview/concepts/images/registrants/export_3.png
copying images... [ 20%] overview/concepts/images/registrants/export_configure.png
copying images... [ 20%] overview/concepts/images/social_registry.jpg
copying images... [ 21%] user_guide/administration/import_areas/1.png
copying images... [ 21%] user_guide/administration/import_areas/2.png
copying images... [ 21%] user_guide/administration/import_areas/3.png
copying images... [ 22%] user_guide/administration/import_areas/4.png
copying images... [ 22%] user_guide/administration/import_areas/5.png
copying images... [ 23%] user_guide/administration/import_areas/6.png
copying images... [ 23%] user_guide/administration/import_areas/7.png
copying images... [ 23%] user_guide/administration/import_areas/8.png
copying images... [ 24%] user_guide/administration/setting_up_service_points/1.1.png
copying images... [ 24%] user_guide/administration/setting_up_service_points/1.2.png
copying images... [ 25%] user_guide/administration/setting_up_service_points/1.3.png
copying images... [ 25%] user_guide/administration/setting_up_service_points/1.4.png
copying images... [ 25%] user_guide/administration/setting_up_service_points/1.5.png
copying images... [ 26%] user_guide/administration/setting_up_service_points/2.2.png
copying images... [ 26%] user_guide/administration/setting_up_service_points/3.2.png
copying images... [ 27%] user_guide/administration/setting_up_service_points/4.2.png
copying images... [ 27%] user_guide/administration/administrating_role_based_access/1.png
copying images... [ 27%] user_guide/administration/administrating_role_based_access/2.png
copying images... [ 28%] user_guide/administration/administrating_role_based_access/3.png
copying images... [ 28%] user_guide/administration/administrating_role_based_access/4.png
copying images... [ 29%] user_guide/administration/administrating_role_based_access/5.png
copying images... [ 29%] user_guide/administration/administrating_role_based_access/6.png
copying images... [ 29%] user_guide/administration/administrating_role_based_access/7.png
copying images... [ 30%] user_guide/administration/administrating_role_based_access/8.png
copying images... [ 30%] user_guide/administration/administrating_role_based_access/9.png
copying images... [ 30%] user_guide/administration/administrating_role_based_access/10.png
copying images... [ 31%] user_guide/administration/administrating_role_based_access/11.png
copying images... [ 31%] user_guide/administration/administrating_role_based_access/12.png
copying images... [ 32%] user_guide/administration/administrating_role_based_access/13.png
copying images... [ 32%] user_guide/administration/access_management/manage-users.png
copying images... [ 32%] user_guide/administration/access_management/new_user.png
copying images... [ 33%] user_guide/administration/access_management/invitation-email.png
copying images... [ 33%] user_guide/administration/access_management/user-type.png
copying images... [ 34%] user_guide/administration/access_management/groups-users.png
copying images... [ 34%] user_guide/administration/access_management/groups-inherited.png
copying images... [ 34%] user_guide/administration/access_management/groups-menus.png
copying images... [ 35%] user_guide/administration/access_management/groups-access-rights.png
copying images... [ 35%] user_guide/administration/access_management/groups-record-rules.png
copying images... [ 36%] user_guide/point_of_sales/1.png
copying images... [ 36%] user_guide/point_of_sales/2.png
copying images... [ 36%] user_guide/point_of_sales/3.png
copying images... [ 37%] user_guide/point_of_sales/4.png
copying images... [ 37%] user_guide/point_of_sales/5.png
copying images... [ 38%] user_guide/point_of_sales/6.png
copying images... [ 38%] user_guide/point_of_sales/7.png
copying images... [ 38%] user_guide/point_of_sales/8.png
copying images... [ 39%] user_guide/point_of_sales/9.png
copying images... [ 39%] user_guide/point_of_sales/10.png
copying images... [ 40%] user_guide/point_of_sales/11.png
copying images... [ 40%] user_guide/point_of_sales/12.png
copying images... [ 40%] user_guide/point_of_sales/13.png
copying images... [ 41%] user_guide/point_of_sales/14.png
copying images... [ 41%] user_guide/point_of_sales/15.png
copying images... [ 41%] user_guide/point_of_sales/16.png
copying images... [ 42%] user_guide/point_of_sales/17.png
copying images... [ 42%] user_guide/point_of_sales/18.png
copying images... [ 43%] user_guide/point_of_sales/19.png
copying images... [ 43%] user_guide/point_of_sales/20.png
copying images... [ 43%] user_guide/point_of_sales/21.png
copying images... [ 44%] user_guide/point_of_sales/22.png
copying images... [ 44%] user_guide/point_of_sales/23.png
copying images... [ 45%] user_guide/point_of_sales/24.png
copying images... [ 45%] user_guide/point_of_sales/25.png
copying images... [ 45%] user_guide/point_of_sales/26.png
copying images... [ 46%] user_guide/point_of_sales/27.png
copying images... [ 46%] user_guide/point_of_sales/28.png
copying images... [ 47%] user_guide/point_of_sales/29.png
copying images... [ 47%] user_guide/point_of_sales/30.png
copying images... [ 47%] user_guide/point_of_sales/31.png
copying images... [ 48%] user_guide/point_of_sales/32.png
copying images... [ 48%] user_guide/point_of_sales/33.png
copying images... [ 49%] user_guide/point_of_sales/34.png
copying images... [ 49%] user_guide/point_of_sales/35.png
copying images... [ 49%] user_guide/point_of_sales/36.png
copying images... [ 50%] user_guide/point_of_sales/37.png
copying images... [ 50%] user_guide/point_of_sales/38.png
copying images... [ 50%] user_guide/point_of_sales/39.png
copying images... [ 51%] user_guide/point_of_sales/40.png
copying images... [ 51%] user_guide/point_of_sales/41.png
copying images... [ 52%] user_guide/point_of_sales/42.png
copying images... [ 52%] user_guide/point_of_sales/43.png
copying images... [ 52%] user_guide/point_of_sales/44.png
copying images... [ 53%] user_guide/point_of_sales/45.png
copying images... [ 53%] user_guide/point_of_sales/46.png
copying images... [ 54%] user_guide/program_management/allocate_funds/1.png
copying images... [ 54%] user_guide/program_management/allocate_funds/2.png
copying images... [ 54%] user_guide/program_management/allocate_funds/3.png
copying images... [ 55%] user_guide/program_management/configure_cash_entitlements/1.png
copying images... [ 55%] user_guide/program_management/configure_cash_entitlements/2.png
copying images... [ 56%] user_guide/program_management/configure_cash_entitlements/3.png
copying images... [ 56%] user_guide/program_management/configure_cash_entitlements/4.png
copying images... [ 56%] user_guide/program_management/configure_cash_entitlements/5.png
copying images... [ 57%] user_guide/program_management/configure_cash_entitlements/6.png
copying images... [ 57%] user_guide/program_management/configure_cash_entitlements/7.png
copying images... [ 58%] user_guide/program_management/configure_cash_entitlements/8.png
copying images... [ 58%] user_guide/program_management/configure_cash_entitlements/9.png
copying images... [ 58%] user_guide/program_management/configure_cash_entitlements/10.png
copying images... [ 59%] user_guide/program_management/create_program_cycle_prepare_entitlements/1.png
copying images... [ 59%] user_guide/program_management/create_program_cycle_prepare_entitlements/2.png
copying images... [ 60%] user_guide/program_management/create_program_cycle_prepare_entitlements/3.png
copying images... [ 60%] user_guide/program_management/create_program_cycle_prepare_entitlements/4.png
copying images... [ 60%] user_guide/program_management/create_program_cycle_prepare_entitlements/5.png
copying images... [ 61%] user_guide/program_management/create_program_cycle_prepare_entitlements/6.png
copying images... [ 61%] user_guide/program_management/create_program_cycle_prepare_entitlements/7.png
copying images... [ 61%] user_guide/program_management/create_program_cycle_prepare_entitlements/8.png
copying images... [ 62%] user_guide/program_management/create_program_cycle_prepare_entitlements/9.png
copying images... [ 62%] user_guide/program_management/create_program_cycle_prepare_entitlements/10.png
copying images... [ 63%] user_guide/program_management/create_program_cycle_prepare_entitlements/11.png
copying images... [ 63%] user_guide/program_management/create_program_cycle_prepare_entitlements/12.png
copying images... [ 63%] user_guide/program_management/create_program_cycle_prepare_entitlements/13.png
copying images... [ 64%] user_guide/program_management/create_program_cycle_prepare_entitlements/14.png
copying images... [ 64%] user_guide/program_management/create_program_cycle_prepare_entitlements/15.png
copying images... [ 65%] user_guide/program_management/create_program_cycle_prepare_entitlements/16.png
copying images... [ 65%] user_guide/program_management/create_program_cycle_prepare_entitlements/17.png
copying images... [ 65%] user_guide/program_management/create_program_cycle_prepare_entitlements/18.png
copying images... [ 66%] user_guide/program_management/create_program_cycle_prepare_entitlements/19.png
copying images... [ 66%] user_guide/program_management/create_program_cycle_prepare_entitlements/20.png
copying images... [ 67%] user_guide/program_management/create_program_cycle_prepare_entitlements/21.png
copying images... [ 67%] user_guide/program_management/create_program_cycle_prepare_entitlements/22.png
copying images... [ 67%] user_guide/program_management/create_program_cycle_prepare_entitlements/23.png
copying images... [ 68%] user_guide/program_management/create_program_cycle_prepare_entitlements/24.png
copying images... [ 68%] user_guide/program_management/create_program_cycle_prepare_entitlements/25.png
copying images... [ 69%] user_guide/program_management/create_program_cycle_prepare_entitlements/27.png
copying images... [ 69%] user_guide/program_management/create_program_cycle_prepare_entitlements/28.png
copying images... [ 69%] user_guide/program_management/create_program_cycle_prepare_entitlements/29.png
copying images... [ 70%] user_guide/program_management/create_program_cycle_prepare_entitlements/30.png
copying images... [ 70%] user_guide/program_management/create_social_protection_program/1.png
copying images... [ 70%] user_guide/program_management/create_social_protection_program/2.png
copying images... [ 71%] user_guide/program_management/create_social_protection_program/3.png
copying images... [ 71%] user_guide/program_management/create_social_protection_program/4.png
copying images... [ 72%] user_guide/program_management/create_social_protection_program/5.png
copying images... [ 72%] user_guide/program_management/create_social_protection_program/6.png
copying images... [ 72%] user_guide/program_management/create_social_protection_program/7.png
copying images... [ 73%] user_guide/program_management/create_social_protection_program/8.png
copying images... [ 73%] user_guide/program_management/create_social_protection_program/9.png
copying images... [ 74%] user_guide/program_management/enroll_beneficiaries/1.png
copying images... [ 74%] user_guide/program_management/enroll_beneficiaries/2.png
copying images... [ 74%] user_guide/program_management/enroll_beneficiaries/3.png
copying images... [ 75%] user_guide/program_management/enroll_beneficiaries/4.png
copying images... [ 75%] user_guide/program_management/enroll_beneficiaries/5.png
copying images... [ 76%] user_guide/program_management/enroll_beneficiaries/6.png
copying images... [ 76%] user_guide/program_management/programs_and_cycles/program-wizard-1.png
copying images... [ 76%] user_guide/program_management/geotargeting/area-upload-1.png
copying images... [ 77%] user_guide/program_management/geotargeting/area-upload-2.png
copying images... [ 77%] user_guide/program_management/geotargeting/area-upload-3.png
copying images... [ 78%] user_guide/program_management/geotargeting/area-upload-4.png
copying images... [ 78%] user_guide/program_management/geotargeting/area-kind-1.png
copying images... [ 78%] user_guide/program_management/geotargeting/area-kind-2.png
copying images... [ 79%] user_guide/program_management/indicators/indicator-1.png
copying images... [ 79%] user_guide/registry_management/configure_ID_generate_qr/1.png
copying images... [ 80%] user_guide/registry_management/configure_ID_generate_qr/2.png
copying images... [ 80%] user_guide/registry_management/configure_ID_generate_qr/3.png
copying images... [ 80%] user_guide/registry_management/configure_ID_generate_qr/4.png
copying images... [ 81%] user_guide/registry_management/configure_ID_generate_qr/5.png
copying images... [ 81%] user_guide/registry_management/configure_ID_generate_qr/6.png
copying images... [ 81%] user_guide/registry_management/configure_ID_generate_qr/7.png
copying images... [ 82%] user_guide/registry_management/configure_ID_generate_qr/8.png
copying images... [ 82%] user_guide/registry_management/configure_ID_generate_qr/9.png
copying images... [ 83%] user_guide/registry_management/configure_ID_generate_qr/10.png
copying images... [ 83%] user_guide/registry_management/configure_ID_generate_qr/11.png
copying images... [ 83%] user_guide/registry_management/configure_ID_generate_qr/12.png
copying images... [ 84%] user_guide/registry_management/export_registrant_data/1.png
copying images... [ 84%] user_guide/registry_management/export_registrant_data/2.png
copying images... [ 85%] user_guide/registry_management/export_registrant_data/3.png
copying images... [ 85%] user_guide/registry_management/export_registrant_data/4.png
copying images... [ 85%] user_guide/registry_management/import_registrant_data/1.png
copying images... [ 86%] user_guide/registry_management/import_registrant_data/2.png
copying images... [ 86%] user_guide/registry_management/import_registrant_data/3.png
copying images... [ 87%] user_guide/registry_management/import_registrant_data/4.png
copying images... [ 87%] user_guide/registry_management/import_registrant_data/5.png
copying images... [ 87%] user_guide/registry_management/import_registrant_data/6.png
copying images... [ 88%] user_guide/registry_management/import_registrant_data/7.png
copying images... [ 88%] user_guide/registry_management/import_registrant_data/8.png
copying images... [ 89%] user_guide/registry_management/import_registrant_data/9.png
copying images... [ 89%] user_guide/registry_management/import_registrant_data/10.png
copying images... [ 89%] user_guide/registry_management/import_registrant_data/11.png
copying images... [ 90%] user_guide/registry_management/import_registrant_data/12.png
copying images... [ 90%] user_guide/registry_management/import_registrant_data/13.png
copying images... [ 90%] user_guide/registry_management/import_registrant_data/14.png
copying images... [ 91%] user_guide/registry_management/import_registrant_data/15.png
copying images... [ 91%] user_guide/registry_management/import_registrant_data/16.png
copying images... [ 92%] user_guide/registry_management/register_new_individual/1.png
copying images... [ 92%] user_guide/registry_management/register_new_individual/2.png
copying images... [ 92%] user_guide/registry_management/register_new_individual/3.png
copying images... [ 93%] user_guide/registry_management/register_new_individual/4.png
copying images... [ 93%] user_guide/registry_management/register_new_individual/5.png
copying images... [ 94%] user_guide/registry_management/register_new_individual/6.png
copying images... [ 94%] user_guide/registry_management/register_new_individual/7.png
copying images... [ 94%] user_guide/registry_management/register_new_individual/8.png
copying images... [ 95%] user_guide/registry_management/register_new_individual/9.png
copying images... [ 95%] user_guide/registry_management/register_new_individual/10.png
copying images... [ 96%] user_guide/registry_management/register_new_individual/11.png
copying images... [ 96%] user_guide/registry_management/register_new_individual/12.png
copying images... [ 96%] user_guide/registry_management/register_new_individual/13.png
copying images... [ 97%] user_guide/registry_management/register_new_individual/14.png
copying images... [ 97%] user_guide/registry_management/setting_up_farmer_registry/1.png
copying images... [ 98%] user_guide/registry_management/setting_up_farmer_registry/2.1.png
copying images... [ 98%] user_guide/registry_management/setting_up_farmer_registry/2.2.png
copying images... [ 98%] user_guide/registry_management/setting_up_farmer_registry/5.png
copying images... [ 99%] user_guide/registry_management/setting_up_farmer_registry/6.png
copying images... [ 99%] user_guide/registry_management/setting_up_farmer_registry/3.png
copying images... [100%] user_guide/registry_management/setting_up_farmer_registry/4.png

copying downloadable files... [100%] user_guide/program_management/geotargeting/sdn_adminboundaries_tabulardata.xlsx

copying static files... done
copying extra files... done
dumping search index in English (code: en)... done
dumping object inventory... done
build succeeded, 587 warnings.

The HTML pages are in ../_build/html.
sphinx-sitemap: sitemap.xml was generated for URL https://docs.openspp.org/ in /Users/jeremi/Projects/134-openspp/openspp-documentation/_build/html/sitemap.xml

Build finished. The HTML pages are in ../_build//html.
</file>

<file path="Makefile">
# Makefile for Sphinx documentation
.DEFAULT_GOAL   = help
SHELL           = bash

# You can set these variables from the command line.
SPHINXOPTS      ?=
PAPER           ?=

# Internal variables.
SPHINXBUILD     = $(realpath bin/sphinx-build)
SPHINXAUTOBUILD = $(realpath bin/sphinx-autobuild)
DOCS_DIR        = ./docs/
BUILDDIR        = ../_build/
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
# the i18n builder cannot share the environment and doctrees with the others
I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
VALEFILES       := $(shell find -L $(DOCS_DIR) -type f -name "*.md" -print)

# Add the following 'help' target to your Makefile
# And add help text after each target name starting with '\#\#'
.PHONY: help
help:  # This help message
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: clean
clean:  ## Clean docs build directory
	cd $(DOCS_DIR) && rm -rf $(BUILDDIR)/

.PHONY: distclean
distclean:  ## Clean docs build directory and Python virtual environment
	cd $(DOCS_DIR) && rm -rf $(BUILDDIR)/
	rm -rf ./bin/ ./lib/ ./lib64 ./include ./pyvenv.cfg

bin/python:
	python3 -m venv . || virtualenv --clear --python=python3 .
	bin/pip install -r requirements_frozen.txt

docs/openg2p-program:
	git submodule init; \
	git submodule update; \
	bin/pip install -r submodules/openg2p-program/requirements.txt;
#	ln -s ../submodules/openg2p-program/docs ./docs/openg2p-program
	@echo
	@echo "Documentation of openg2p-program initialized."

docs/openg2p-registry:
	git submodule init; \
	git submodule update; \
	bin/pip install -r submodules/openg2p-registry/requirements.txt;
#	ln -s ../submodules/openg2p-registry/docs ./docs/openg2p-program
	@echo
	@echo "Documentation of openg2p-registry initialized."

.PHONY: deps
deps: bin/python docs/openg2p-registry docs/openg2p-program  ## Create Python virtual environment, install requirements, initialize or update the submodules, and finally create symlinks to the source files.


.PHONY: html
html: deps  ## Build html
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."

.PHONY: manual
manual: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b html -t manual . $(BUILDDIR)/manual

.PHONY: dirhtml
dirhtml: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
	@echo
	@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."

.PHONY: singlehtml
singlehtml: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml
	@echo
	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."

.PHONY: pickle
pickle: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle
	@echo
	@echo "Build finished; now you can process the pickle files."

.PHONY: json
json: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json
	@echo
	@echo "Build finished; now you can process the JSON files."

.PHONY: htmlhelp
htmlhelp: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp
	@echo
	@echo "Build finished; now you can run HTML Help Workshop with the" \
	      ".hhp project file in $(BUILDDIR)/htmlhelp."

.PHONY: epub
epub: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub
	@echo
	@echo "Build finished. The epub file is in $(BUILDDIR)/epub."

.PHONY: latex
latex: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
	@echo
	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
	@echo "Run \`make' in that directory to run these through (pdf)latex" \
	      "(use \`make latexpdf' here to do that automatically)."

.PHONY: latexpdf
latexpdf: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
	@echo "Running LaTeX files through pdflatex..."
	$(MAKE) -C $(BUILDDIR)/latex all-pdf
	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."

.PHONY: text
text: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text
	@echo
	@echo "Build finished. The text files are in $(BUILDDIR)/text."

.PHONY: man
man: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man
	@echo
	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."

.PHONY: texinfo
texinfo: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
	@echo
	@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."
	@echo "Run \`make' in that directory to run these through makeinfo" \
	      "(use \`make info' here to do that automatically)."

.PHONY: info
info: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
	@echo "Running Texinfo files through makeinfo..."
	make -C $(BUILDDIR)/texinfo info
	@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."

.PHONY: changes
changes: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes
	@echo
	@echo "The overview file is in $(BUILDDIR)/changes."

.PHONY: linkcheck
linkcheck: deps  ## Run linkcheck
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck
	@echo
	@echo "Link check complete; look for any errors in the above output " \
		"or in $(BUILDDIR)/linkcheck/ ."

.PHONY: vale
vale: deps  ## Run Vale style, grammar, and spell checks
	vale sync
	vale --no-wrap $(VALEFILES)
	@echo
	@echo "Vale is finished; look for any errors in the above output."

.PHONY: html_meta
html_meta: deps  ## Add meta data headers to all Markdown pages
	python ./docs/addMetaData.py

.PHONY: doctest
doctest: deps
	cd $(DOCS_DIR) && $(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
	@echo "Testing of doctests in the sources finished, look at the " \
	      "results in $(BUILDDIR)/doctest/output.txt."

.PHONY: test
test: clean linkcheckbroken  ## Clean docs build, then run linkcheckbroken

.PHONY: deploy
deploy: clean html

.PHONY: livehtml
livehtml: deps  ## Rebuild Sphinx documentation on changes, with live-reload in the browser
	cd "$(DOCS_DIR)" && ${SPHINXAUTOBUILD} \
		--ignore "*.swp" \
		--port 8050 \
		-b html . "$(BUILDDIR)/html" $(SPHINXOPTS) $(O)

.PHONY: storybook
storybook:
	cd submodules/volto && yarn && yarn build-storybook -o ../../_build/html/storybook

.PHONY: all
all: clean vale linkcheck html  ## Clean docs build, then run vale and linkcheck, and build html
</file>

<file path="netlify.toml">
[build.environment]
  PYTHON_VERSION = "3.8"
</file>

<file path="README.md">
[![OpenSPP documentation build](https://github.com/OpenSPP/documentation/actions/workflows/build_deploy.yml/badge.svg)](https://github.com/OpenSPP/documentation/actions/workflows/build_deploy.yml)

# OpenSPP - Social Protection Platform Documentation

OpenSPP is an open-source project that aims to streamline the management of social protection programs. It can be used on its own or in conjunction with other services.


## OpenSPP

Browse the OpenSPP Documentation at https://docs.openspp.org/.

Active development on the OpenSPP Documentation takes place on the branch [`main`](https://github.com/openspp/documentation/).

## Contribute

- [Contributing to OpenSPP Documentation](https://docs.openspp.org/contributing/index.html)
- [Issue Tracker](https://github.com/openspp/documentation/issues)
- [Source Code](https://github.com/openspp/documentation)

## License

The project is licensed under the [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/) by [Newlogic](https://newlogic.com).
</file>

<file path="refactor_docs.py">
#!/usr/bin/env python3
"""
OpenSPP Documentation Refactoring Script

This script refactors the OpenSPP documentation structure according to the 
migration mapping provided in review_work/refactor_pages.md.

Usage:
    python refactor_docs.py --dry-run  # Test mode - shows what would be done
    python refactor_docs.py           # Execute the refactoring
"""

import os
import re
import shutil
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import argparse
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class DocumentationRefactorer:
    def __init__(self, docs_root: str, dry_run: bool = True):
        self.docs_root = Path(docs_root)
        self.dry_run = dry_run
        self.file_mappings = {}
        self.redirects = {}
        self.merged_files = {}
        self.split_files = {}
        self.new_directories = set()
        
    def load_mappings(self):
        """Load the file mappings from the refactor_pages.md document."""
        # File mappings based on the refactor_pages.md content
        mappings = [
            # Community and support mappings
            ("docs/community_and_support/code_of_conduct.md", "docs/community/code_of_conduct.md"),
            ("docs/community_and_support/how_to_contribute_to_the_project.md", "docs/community/contributing.md"),
            ("docs/community_and_support/index.md", "docs/community/index.md"),
            ("docs/community_and_support/l3_support.md", "docs/community/support.md"),
            ("docs/community_and_support/license.md", "docs/community/license.md"),
            ("docs/community_and_support/security_report.md", "docs/community/security_reporting.md"),
            
            # Contributing mappings (merge into community)
            ("docs/contributing/admins.md", "docs/community/contributing.md", "merge"),
            ("docs/contributing/authors.md", "docs/community/contributing.md", "merge"),
            ("docs/contributing/index.md", "docs/community/contributing.md", "merge"),
            ("docs/contributing/myst-reference.md", "docs/community/contributing.md", "merge"),
            ("docs/contributing/setup-build.md", "docs/community/contributing.md", "merge"),
            ("docs/contributing/sphinx-extensions.md", "docs/community/contributing.md", "merge"),
            
            # Explanation to overview/concepts mappings
            ("docs/explanation/data_collection_validation.md", "docs/overview/concepts/data_collection_validation.md"),
            ("docs/explanation/data_protection.md", "docs/overview/concepts/data_protection.md"),
            ("docs/explanation/digital_public_infrastructure.md", "docs/overview/concepts/digital_public_infrastructure.md"),
            ("docs/explanation/farmer_registry.md", "docs/overview/concepts/farmer_registry.md"),
            ("docs/explanation/index.md", "docs/overview/concepts/index.md"),
            ("docs/explanation/integrated_beneficiary_registry.md", "docs/overview/concepts/integrated_beneficiary_registry.md"),
            ("docs/explanation/Registering_individuals_and_groups.md", "docs/overview/concepts/registrant_concepts.md"),
            ("docs/explanation/registry_key_concepts.md", "docs/overview/concepts/registry_key_concepts.md"),
            ("docs/explanation/security_archi.md", "docs/reference/technical/security.md", "merge"),
            ("docs/explanation/social_protection_management_information_systems.md", "docs/overview/concepts/sp_mis.md"),
            ("docs/explanation/social_registry.md", "docs/overview/concepts/social_registry.md"),
            ("docs/explanation/user_mgt.md", "docs/overview/concepts/user_management.md"),
            
            # Getting started mappings
            ("docs/getting_started/creating_a_program.md", "docs/user_guide/program_management/create_program.md"),
            ("docs/getting_started/index.md", "docs/getting_started/index.md"),
            ("docs/getting_started/installation_guide.md", "docs/getting_started/installation_docker.md", "split"),
            ("docs/getting_started/poc_and_pilot.md", "docs/getting_started/poc_and_pilot.md"),
            
            # Developer guides mappings
            ("docs/howto/developer_guides/beneficiary_keycloak.md", "docs/developer_guide/integrations/keycloak_beneficiary_portal.md"),
            ("docs/howto/developer_guides/custom_areas.md", "docs/developer_guide/customization/customizing_areas.md"),
            ("docs/howto/developer_guides/custom_audit.md", "docs/developer_guide/customization/customizing_audit.md"),
            ("docs/howto/developer_guides/custom_cr.md", "docs/developer_guide/customization/customizing_change_requests.md"),
            ("docs/howto/developer_guides/custom_cycle.md", "docs/developer_guide/customization/customizing_cycles.md"),
            ("docs/howto/developer_guides/custom_entitlement.md", "docs/developer_guide/customization/customizing_entitlements.md"),
            ("docs/howto/developer_guides/custom_fields_indicators.md", "docs/developer_guide/customization/customizing_fields.md"),
            ("docs/howto/developer_guides/custom_program.md", "docs/developer_guide/customization/customizing_programs.md"),
            ("docs/howto/developer_guides/custom_registry_tab_fields.md", "docs/developer_guide/customization/customizing_registry.md", "merge"),
            ("docs/howto/developer_guides/custom_registry.md", "docs/developer_guide/customization/customizing_registry.md"),
            ("docs/howto/developer_guides/custom_service_points.md", "docs/developer_guide/customization/customizing_service_points.md"),
            ("docs/howto/developer_guides/dci.md", "docs/developer_guide/integrations/dci.md"),
            ("docs/howto/developer_guides/development_setup.md", "docs/developer_guide/setup.md"),
            ("docs/howto/developer_guides/esignet.md", "docs/developer_guide/integrations/esignet.md"),
            ("docs/howto/developer_guides/implmenting_pmt.md", "docs/developer_guide/customization/implementing_pmt.md"),
            ("docs/howto/developer_guides/indicators.md", "docs/developer_guide/customization/customizing_indicators.md"),
            ("docs/howto/developer_guides/module.md", "docs/developer_guide/module_development.md"),
            ("docs/howto/developer_guides/oidc.md", "docs/developer_guide/integrations/oidc.md"),
            ("docs/howto/developer_guides/rest_api.md", "docs/developer_guide/api_usage/rest_api.md"),
            ("docs/howto/developer_guides/setting_up_using_pypi.md", "docs/getting_started/installation_pypi.md"),
            ("docs/howto/developer_guides/troubleshooting.md", "docs/developer_guide/troubleshooting.md"),
            
            # User guides mappings
            ("docs/howto/user_guides/administrating_role_based_access.md", "docs/user_guide/administration/user_access.md"),
            ("docs/howto/user_guides/enroll_beneficiaries.md", "docs/user_guide/program_management/enroll_beneficiaries.md"),
            ("docs/howto/user_guides/export_registrant_data.md", "docs/user_guide/registry_management/import_export_data.md", "merge"),
            ("docs/howto/user_guides/implementing_pmt.md", "docs/user_guide/program_management/implementing_pmt.md"),
            ("docs/howto/user_guides/import_registrant_data.md", "docs/user_guide/registry_management/import_export_data.md", "merge"),
            ("docs/howto/user_guides/register_new_individual.md", "docs/user_guide/registry_management/register_individual.md"),
            ("docs/howto/user_guides/setting_up_farmer_registry.md", "docs/user_guide/registry_management/setting_up_farmer_registry.md"),
            ("docs/howto/user_guides/setting_up_service_points.md", "docs/user_guide/administration/service_points.md"),
            
            # Other howto mappings
            ("docs/howto/developer_mode.md", "docs/developer_guide/developer_mode.md"),
            ("docs/howto/index.md", "docs/user_guide/index.md", "split"),
            ("docs/howto/translation.md", "docs/community/contributing.md", "merge"),
            
            # Best practices
            ("docs/best_practices/index.md", "docs/developer_guide/best_practices.md"),
            
            # Modules - all go to reference/modules
            ("docs/modules/", "docs/reference/modules/"),  # Directory mapping
            
            # Technical reference mappings
            ("docs/technical_reference/programs/concepts.md", "docs/developer_guide/architecture.md", "merge"),
            ("docs/technical_reference/programs/cycle_manager.rst", "docs/reference/technical/cycle_manager.rst"),
            ("docs/technical_reference/programs/dashboards.md", "docs/user_guide/reporting_dashboards.md"),
            ("docs/technical_reference/programs/deduplication_manager.md", "docs/reference/technical/deduplication_manager.md"),
            ("docs/technical_reference/programs/eligibility_manager.rst", "docs/reference/technical/eligibility_manager.rst"),
            ("docs/technical_reference/programs/entitlement_manager.rst", "docs/reference/technical/entitlement_manager.rst"),
            ("docs/technical_reference/programs/index.md", "docs/reference/technical/index.md"),
            ("docs/technical_reference/programs/notification_manager.rst", "docs/reference/technical/notification_manager.rst"),
            ("docs/technical_reference/programs/program_manager.rst", "docs/reference/technical/program_manager.rst"),
            ("docs/technical_reference/architecture.md", "docs/developer_guide/architecture.md"),
            ("docs/technical_reference/audit_logs.md", "docs/reference/technical/audit_logs.md"),
            ("docs/technical_reference/backup.md", "docs/reference/technical/backup.md"),
            ("docs/technical_reference/code.md", "docs/developer_guide/best_practices.md", "merge"),
            ("docs/technical_reference/extensibility.md", "docs/overview/concepts/extensibility.md"),
            ("docs/technical_reference/external_api.rst", "docs/developer_guide/api_usage/external_api_xmlrpc.md"),
            ("docs/technical_reference/index.md", "docs/reference/index.md", "merge"),
            ("docs/technical_reference/integrations.md", "docs/overview/features/integrations_apis.md"),
            ("docs/technical_reference/monitoring.md", "docs/reference/technical/monitoring.md"),
            ("docs/technical_reference/performance_optimization.md", "docs/reference/technical/performance.md"),
            ("docs/technical_reference/release_management.md", "docs/community/release_management.md"),
            ("docs/technical_reference/security.md", "docs/reference/technical/security.md"),
            ("docs/technical_reference/apis.md", "docs/developer_guide/api_usage/index.md"),
            ("docs/technical_reference/g2p-connect.md", "docs/developer_guide/integrations/g2p-connect.md"),
            ("docs/technical_reference/openg2p.md", "docs/overview/concepts/openg2p.md"),
            
            # Tutorial mappings
            ("docs/tutorial/user_guides/administrating_role_based_access.md", "docs/user_guide/administration/user_access.md", "merge"),
            ("docs/tutorial/user_guides/allocate_funds.md", "docs/user_guide/program_management/allocate_funds.md"),
            ("docs/tutorial/user_guides/configure_cash_entitlements.md", "docs/user_guide/program_management/configure_entitlements.md", "merge"),
            ("docs/tutorial/user_guides/configure_ID_generate_qr.md", "docs/user_guide/registry_management/identity_management.md"),
            ("docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md", "docs/user_guide/program_management/create_cycle.md", "split"),
            ("docs/tutorial/user_guides/create_social_protection_program.md", "docs/user_guide/program_management/create_program.md", "merge"),
            ("docs/tutorial/user_guides/enroll_beneficiaries.md", "docs/user_guide/program_management/enroll_beneficiaries.md", "merge"),
            ("docs/tutorial/user_guides/export_registrant_data.md", "docs/user_guide/registry_management/import_export_data.md", "merge"),
            ("docs/tutorial/user_guides/import_areas.md", "docs/user_guide/administration/import_areas.md"),
            ("docs/tutorial/user_guides/import_registrant_data.md", "docs/user_guide/registry_management/import_export_data.md", "merge"),
            ("docs/tutorial/user_guides/point_of_sales.md", "docs/user_guide/pos_usage.md"),
            ("docs/tutorial/user_guides/register_new_individual.md", "docs/user_guide/registry_management/register_individual.md", "merge"),
            ("docs/tutorial/user_guides/setting_up_service_points.md", "docs/user_guide/administration/service_points.md", "merge"),
            ("docs/tutorial/access_management.md", "docs/user_guide/administration/user_access.md", "merge"),
            ("docs/tutorial/audit_log.md", "docs/user_guide/administration/using_audit_logs.md"),
            ("docs/tutorial/change_requests.md", "docs/user_guide/registry_management/using_change_requests.md"),
            ("docs/tutorial/consent_management.md", "docs/user_guide/consent_management.md"),
            ("docs/tutorial/custom_fields.md", "docs/user_guide/administration/managing_custom_fields.md"),
            ("docs/tutorial/dashboards_and_reports.md", "docs/user_guide/reporting_dashboards.md", "merge"),
            ("docs/tutorial/event_data.md", "docs/user_guide/registry_management/using_event_data.md"),
            ("docs/tutorial/geotargeting.md", "docs/user_guide/program_management/using_geotargeting.md"),
            ("docs/tutorial/grievance_redressal_management.md", "docs/user_guide/grievance_management.md"),
            ("docs/tutorial/hardware_integration.md", "docs/user_guide/administration/hardware_integration.md"),
            ("docs/tutorial/index.md", "docs/user_guide/index.md", "merge"),
            ("docs/tutorial/indicators.md", "docs/user_guide/program_management/using_indicators.md"),
            ("docs/tutorial/managing_social_protection_programs.md", "docs/user_guide/program_management/index.md", "split"),
            ("docs/tutorial/programs_and_cycles.md", "docs/user_guide/program_management/programs_overview.md", "split"),
            ("docs/tutorial/proxy_means_test.md", "docs/user_guide/program_management/using_pmt.md"),
            ("docs/tutorial/vouchers.md", "docs/user_guide/program_management/using_vouchers.md"),
            ("docs/tutorial/programs/export_beneficiaries.md", "docs/user_guide/program_management/export_beneficiaries.md"),
            
            # Other root level files
            ("docs/glossary.rst", "docs/reference/glossary.rst"),
        ]
        
        # Process mappings
        for mapping in mappings:
            if len(mapping) == 2:
                src, dst = mapping
                action = "move"
            else:
                src, dst, action = mapping
            
            self.file_mappings[src] = (dst, action)
            
            # Generate redirect
            src_path = src.replace("docs/", "")
            dst_path = dst.replace("docs/", "").replace(".md", ".html").replace(".rst", ".html")
            self.redirects[src_path] = dst_path
            
            # Track new directories
            dst_dir = str(Path(dst).parent)
            if dst_dir != "docs":
                self.new_directories.add(dst_dir)

    def create_directories(self):
        """Create all necessary directories."""
        for directory in sorted(self.new_directories):
            dir_path = self.docs_root / directory.replace("docs/", "")
            if not dir_path.exists():
                if self.dry_run:
                    logger.info(f"[DRY RUN] Would create directory: {dir_path}")
                else:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    logger.info(f"Created directory: {dir_path}")

    def move_files(self):
        """Move files according to the mappings."""
        # Sort mappings to process regular moves before merges
        sorted_mappings = sorted(self.file_mappings.items(), 
                                key=lambda x: (x[1][1] == "merge", x[0]))
        
        for src, (dst, action) in sorted_mappings:
            src_path = self.docs_root / src.replace("docs/", "")
            dst_path = self.docs_root / dst.replace("docs/", "")
            
            # Handle directory mappings
            if src.endswith("/"):
                if src_path.exists() and src_path.is_dir():
                    if self.dry_run:
                        logger.info(f"[DRY RUN] Would move directory: {src_path} -> {dst_path}")
                    else:
                        # Move all files in the directory
                        for file in src_path.glob("**/*.md"):
                            rel_path = file.relative_to(src_path)
                            new_file = dst_path / rel_path
                            new_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.move(str(file), str(new_file))
                            logger.info(f"Moved: {file} -> {new_file}")
                        
                        for file in src_path.glob("**/*.rst"):
                            rel_path = file.relative_to(src_path)
                            new_file = dst_path / rel_path
                            new_file.parent.mkdir(parents=True, exist_ok=True)
                            shutil.move(str(file), str(new_file))
                            logger.info(f"Moved: {file} -> {new_file}")
                continue
            
            # Handle file mappings
            if not src_path.exists():
                logger.warning(f"Source file not found: {src_path}")
                continue
            
            if action == "move":
                if self.dry_run:
                    logger.info(f"[DRY RUN] Would move: {src_path} -> {dst_path}")
                else:
                    dst_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.move(str(src_path), str(dst_path))
                    logger.info(f"Moved: {src_path} -> {dst_path}")
                    
            elif action == "merge":
                if dst not in self.merged_files:
                    self.merged_files[dst] = []
                self.merged_files[dst].append(src)
                
                if self.dry_run:
                    logger.info(f"[DRY RUN] Would merge: {src_path} into {dst_path}")
                else:
                    # For merge, we'll append content (implement actual merge logic as needed)
                    logger.info(f"Marked for merge: {src_path} -> {dst_path}")
                    
            elif action == "split":
                if src not in self.split_files:
                    self.split_files[src] = []
                self.split_files[src].append(dst)
                
                if self.dry_run:
                    logger.info(f"[DRY RUN] Would split: {src_path} -> {dst_path}")
                else:
                    # For split, copy to first destination, mark others for manual handling
                    dst_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(str(src_path), str(dst_path))
                    logger.info(f"Split (copied): {src_path} -> {dst_path}")

    def handle_merged_files(self):
        """Handle files that need to be merged."""
        for dst, sources in self.merged_files.items():
            dst_path = self.docs_root / dst.replace("docs/", "")
            
            if self.dry_run:
                logger.info(f"[DRY RUN] Would merge {len(sources)} files into {dst_path}")
                for src in sources:
                    logger.info(f"  - {src}")
            else:
                # Create a merged file with content from all sources
                dst_path.parent.mkdir(parents=True, exist_ok=True)
                
                # If destination exists, append to it
                if dst_path.exists():
                    with open(dst_path, 'a') as f:
                        f.write("\n\n---\n\n")
                        f.write(f"## Merged Content\n\n")
                
                for src in sources:
                    src_path = self.docs_root / src.replace("docs/", "")
                    if src_path.exists():
                        with open(src_path, 'r') as f:
                            content = f.read()
                        
                        with open(dst_path, 'a') as f:
                            f.write(f"\n\n### Content from {src}\n\n")
                            f.write(content)
                        
                        # Remove source file after merging
                        src_path.unlink()
                        logger.info(f"Merged and removed: {src_path}")

    def generate_redirects_config(self):
        """Generate the redirects configuration for conf.py."""
        redirect_dict = "redirects = {\n"
        for old_path, new_path in sorted(self.redirects.items()):
            # Skip self-redirects and directory redirects
            if old_path == new_path.replace(".html", ".md"):
                continue
            if old_path.endswith("/"):
                continue
            redirect_dict += f'    "{old_path}": "{new_path}",\n'
        redirect_dict += "}\n"
        
        return redirect_dict

    def update_conf_py(self):
        """Update conf.py with the new redirects."""
        conf_path = self.docs_root / "conf.py"
        
        if not conf_path.exists():
            logger.error("conf.py not found!")
            return
        
        with open(conf_path, 'r') as f:
            content = f.read()
        
        # Find the redirects section
        redirect_pattern = r'redirects = \{[^}]*\}'
        new_redirects = self.generate_redirects_config()
        
        if re.search(redirect_pattern, content, re.DOTALL):
            # Replace existing redirects
            content = re.sub(redirect_pattern, new_redirects.strip(), content, flags=re.DOTALL)
        else:
            # Add redirects before the smartquotes setting
            content = content.replace('# If true, the Docutils Smart Quotes', 
                                    f'{new_redirects}\n# If true, the Docutils Smart Quotes')
        
        if self.dry_run:
            logger.info("[DRY RUN] Would update conf.py with new redirects")
            logger.info(f"Redirect count: {len(self.redirects)}")
        else:
            with open(conf_path, 'w') as f:
                f.write(content)
            logger.info(f"Updated conf.py with {len(self.redirects)} redirects")

    def update_internal_links(self):
        """Update internal links in all documentation files."""
        # Get all markdown and rst files
        all_files = list(self.docs_root.glob("**/*.md")) + list(self.docs_root.glob("**/*.rst"))
        
        # Create reverse mapping of new locations
        new_to_old = {}
        for old, (new, _) in self.file_mappings.items():
            if not old.endswith("/"):
                new_to_old[new.replace("docs/", "")] = old.replace("docs/", "")
        
        for file_path in all_files:
            if not file_path.is_file():
                continue
                
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                original_content = content
                
                # Update {doc} links
                doc_pattern = r'\{doc\}`([^`]+)`'
                
                def replace_doc_link(match):
                    old_link = match.group(1)
                    # Check if this link needs updating
                    for old_path, new_path in self.redirects.items():
                        if old_link.endswith(old_path.replace(".html", "")):
                            new_link = new_path.replace(".html", "")
                            return f'{{doc}}`{new_link}`'
                    return match.group(0)
                
                content = re.sub(doc_pattern, replace_doc_link, content)
                
                # Update markdown links
                md_link_pattern = r'\[([^\]]+)\]\(([^)]+\.md)\)'
                
                def replace_md_link(match):
                    link_text = match.group(1)
                    old_link = match.group(2)
                    
                    # Normalize the link
                    if old_link.startswith("/"):
                        old_link = old_link[1:]
                    
                    # Check if this link needs updating
                    for old_path, new_path in self.redirects.items():
                        if old_link.endswith(old_path):
                            new_link = "/" + new_path.replace(".html", ".md")
                            return f'[{link_text}]({new_link})'
                    return match.group(0)
                
                content = re.sub(md_link_pattern, replace_md_link, content)
                
                # Only write if content changed
                if content != original_content:
                    if self.dry_run:
                        logger.info(f"[DRY RUN] Would update links in: {file_path}")
                    else:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        logger.info(f"Updated links in: {file_path}")
                        
            except Exception as e:
                logger.error(f"Error processing {file_path}: {e}")

    def create_index_files(self):
        """Create index files for new directories that need them."""
        index_files = [
            "docs/overview/index.md",
            "docs/overview/features/index.md",
            "docs/overview/use_cases/index.md",
            "docs/overview/case_studies/index.md",
            "docs/user_guide/registry_management/index.md",
            "docs/user_guide/program_management/index.md",
            "docs/user_guide/administration/index.md",
            "docs/developer_guide/index.md",
            "docs/developer_guide/customization/index.md",
            "docs/developer_guide/integrations/index.md",
            "docs/developer_guide/api_usage/index.md",
            "docs/reference/api/index.md",
            "docs/reference/technical/index.md",
        ]
        
        for index_file in index_files:
            index_path = self.docs_root / index_file.replace("docs/", "")
            
            if not index_path.exists():
                section_name = index_path.parent.name.replace("_", " ").title()
                content = f"""# {section_name}

This section contains documentation about {section_name.lower()}.

```{{toctree}}
:maxdepth: 2
:caption: Contents

```
"""
                if self.dry_run:
                    logger.info(f"[DRY RUN] Would create index: {index_path}")
                else:
                    index_path.parent.mkdir(parents=True, exist_ok=True)
                    with open(index_path, 'w') as f:
                        f.write(content)
                    logger.info(f"Created index: {index_path}")

    def run(self):
        """Execute the complete refactoring process."""
        logger.info("Starting OpenSPP documentation refactoring...")
        
        # Load mappings
        self.load_mappings()
        logger.info(f"Loaded {len(self.file_mappings)} file mappings")
        
        # Create directories
        self.create_directories()
        
        # Move files
        self.move_files()
        
        # Handle merged files
        if self.merged_files:
            self.handle_merged_files()
        
        # Create index files
        self.create_index_files()
        
        # Update internal links
        self.update_internal_links()
        
        # Update conf.py
        self.update_conf_py()
        
        logger.info("Refactoring complete!")
        
        # Report on manual actions needed
        if self.split_files:
            logger.warning("\nFiles that need manual splitting:")
            for src, destinations in self.split_files.items():
                logger.warning(f"  {src} -> {', '.join(destinations)}")
        
        if self.merged_files:
            logger.warning("\nFiles that were merged (review content):")
            for dst, sources in self.merged_files.items():
                logger.warning(f"  {dst} <- {', '.join(sources)}")

def main():
    parser = argparse.ArgumentParser(description="Refactor OpenSPP documentation structure")
    parser.add_argument("--dry-run", action="store_true", 
                      help="Show what would be done without making changes")
    parser.add_argument("--docs-root", default="docs", 
                      help="Path to the docs directory (default: docs)")
    
    args = parser.parse_args()
    
    refactorer = DocumentationRefactorer(args.docs_root, dry_run=args.dry_run)
    refactorer.run()

if __name__ == "__main__":
    main()
</file>

<file path="refactor_log.txt">
INFO: Starting OpenSPP documentation refactoring...
INFO: Loaded 117 file mappings
INFO: Created directory: docs/community
INFO: Created directory: docs/developer_guide
INFO: Created directory: docs/developer_guide/api_usage
INFO: Created directory: docs/developer_guide/customization
INFO: Created directory: docs/developer_guide/integrations
INFO: Created directory: docs/overview/concepts
INFO: Created directory: docs/reference
INFO: Created directory: docs/reference/technical
INFO: Created directory: docs/user_guide
INFO: Created directory: docs/user_guide/administration
INFO: Created directory: docs/user_guide/program_management
INFO: Created directory: docs/user_guide/registry_management
INFO: Moved: docs/best_practices/index.md -> docs/developer_guide/best_practices.md
INFO: Moved: docs/community_and_support/code_of_conduct.md -> docs/community/code_of_conduct.md
INFO: Moved: docs/community_and_support/how_to_contribute_to_the_project.md -> docs/community/contributing.md
INFO: Moved: docs/community_and_support/index.md -> docs/community/index.md
INFO: Moved: docs/community_and_support/l3_support.md -> docs/community/support.md
INFO: Moved: docs/community_and_support/license.md -> docs/community/license.md
INFO: Moved: docs/community_and_support/security_report.md -> docs/community/security_reporting.md
INFO: Moved: docs/explanation/Registering_individuals_and_groups.md -> docs/overview/concepts/registrant_concepts.md
INFO: Moved: docs/explanation/data_collection_validation.md -> docs/overview/concepts/data_collection_validation.md
INFO: Moved: docs/explanation/data_protection.md -> docs/overview/concepts/data_protection.md
INFO: Moved: docs/explanation/digital_public_infrastructure.md -> docs/overview/concepts/digital_public_infrastructure.md
INFO: Moved: docs/explanation/farmer_registry.md -> docs/overview/concepts/farmer_registry.md
INFO: Moved: docs/explanation/index.md -> docs/overview/concepts/index.md
INFO: Moved: docs/explanation/integrated_beneficiary_registry.md -> docs/overview/concepts/integrated_beneficiary_registry.md
INFO: Moved: docs/explanation/registry_key_concepts.md -> docs/overview/concepts/registry_key_concepts.md
INFO: Moved: docs/explanation/social_protection_management_information_systems.md -> docs/overview/concepts/sp_mis.md
INFO: Moved: docs/explanation/social_registry.md -> docs/overview/concepts/social_registry.md
INFO: Moved: docs/explanation/user_mgt.md -> docs/overview/concepts/user_management.md
INFO: Moved: docs/getting_started/creating_a_program.md -> docs/user_guide/program_management/create_program.md
INFO: Moved: docs/getting_started/index.md -> docs/getting_started/index.md
INFO: Split (copied): docs/getting_started/installation_guide.md -> docs/getting_started/installation_docker.md
INFO: Moved: docs/getting_started/poc_and_pilot.md -> docs/getting_started/poc_and_pilot.md
INFO: Moved: docs/glossary.rst -> docs/reference/glossary.rst
INFO: Moved: docs/howto/developer_guides/beneficiary_keycloak.md -> docs/developer_guide/integrations/keycloak_beneficiary_portal.md
INFO: Moved: docs/howto/developer_guides/custom_areas.md -> docs/developer_guide/customization/customizing_areas.md
INFO: Moved: docs/howto/developer_guides/custom_audit.md -> docs/developer_guide/customization/customizing_audit.md
INFO: Moved: docs/howto/developer_guides/custom_cr.md -> docs/developer_guide/customization/customizing_change_requests.md
INFO: Moved: docs/howto/developer_guides/custom_cycle.md -> docs/developer_guide/customization/customizing_cycles.md
INFO: Moved: docs/howto/developer_guides/custom_entitlement.md -> docs/developer_guide/customization/customizing_entitlements.md
INFO: Moved: docs/howto/developer_guides/custom_fields_indicators.md -> docs/developer_guide/customization/customizing_fields.md
INFO: Moved: docs/howto/developer_guides/custom_program.md -> docs/developer_guide/customization/customizing_programs.md
INFO: Moved: docs/howto/developer_guides/custom_registry.md -> docs/developer_guide/customization/customizing_registry.md
INFO: Moved: docs/howto/developer_guides/custom_service_points.md -> docs/developer_guide/customization/customizing_service_points.md
INFO: Moved: docs/howto/developer_guides/dci.md -> docs/developer_guide/integrations/dci.md
INFO: Moved: docs/howto/developer_guides/development_setup.md -> docs/developer_guide/setup.md
INFO: Moved: docs/howto/developer_guides/esignet.md -> docs/developer_guide/integrations/esignet.md
INFO: Moved: docs/howto/developer_guides/implmenting_pmt.md -> docs/developer_guide/customization/implementing_pmt.md
INFO: Moved: docs/howto/developer_guides/indicators.md -> docs/developer_guide/customization/customizing_indicators.md
INFO: Moved: docs/howto/developer_guides/module.md -> docs/developer_guide/module_development.md
INFO: Moved: docs/howto/developer_guides/oidc.md -> docs/developer_guide/integrations/oidc.md
INFO: Moved: docs/howto/developer_guides/rest_api.md -> docs/developer_guide/api_usage/rest_api.md
INFO: Moved: docs/howto/developer_guides/setting_up_using_pypi.md -> docs/getting_started/installation_pypi.md
INFO: Moved: docs/howto/developer_guides/troubleshooting.md -> docs/developer_guide/troubleshooting.md
INFO: Moved: docs/howto/developer_mode.md -> docs/developer_guide/developer_mode.md
INFO: Split (copied): docs/howto/index.md -> docs/user_guide/index.md
INFO: Moved: docs/howto/user_guides/administrating_role_based_access.md -> docs/user_guide/administration/user_access.md
INFO: Moved: docs/howto/user_guides/enroll_beneficiaries.md -> docs/user_guide/program_management/enroll_beneficiaries.md
INFO: Moved: docs/howto/user_guides/implementing_pmt.md -> docs/user_guide/program_management/implementing_pmt.md
INFO: Moved: docs/howto/user_guides/register_new_individual.md -> docs/user_guide/registry_management/register_individual.md
INFO: Moved: docs/howto/user_guides/setting_up_farmer_registry.md -> docs/user_guide/registry_management/setting_up_farmer_registry.md
INFO: Moved: docs/howto/user_guides/setting_up_service_points.md -> docs/user_guide/administration/service_points.md
INFO: Moved: docs/modules/spp_custom_field_custom_filter.md -> docs/reference/modules/spp_custom_field_custom_filter.md
INFO: Moved: docs/modules/spp_base_api.md -> docs/reference/modules/spp_base_api.md
INFO: Moved: docs/modules/spp_audit_post.md -> docs/reference/modules/spp_audit_post.md
INFO: Moved: docs/modules/spp_entitlement_in_kind.md -> docs/reference/modules/spp_entitlement_in_kind.md
INFO: Moved: docs/modules/g2p_auth_id_oidc.md -> docs/reference/modules/g2p_auth_id_oidc.md
INFO: Moved: docs/modules/spp_change_request.md -> docs/reference/modules/spp_change_request.md
INFO: Moved: docs/modules/spp_exclusion_filter.md -> docs/reference/modules/spp_exclusion_filter.md
INFO: Moved: docs/modules/spp_auto_update_entitlements.md -> docs/reference/modules/spp_auto_update_entitlements.md
INFO: Moved: docs/modules/g2p_bank_rest_api.md -> docs/reference/modules/g2p_bank_rest_api.md
INFO: Moved: docs/modules/g2p_entitlement_in_kind.md -> docs/reference/modules/g2p_entitlement_in_kind.md
INFO: Moved: docs/modules/g2p_payment_interop_layer.md -> docs/reference/modules/g2p_payment_interop_layer.md
INFO: Moved: docs/modules/spp_openid_vci_individual.md -> docs/reference/modules/spp_openid_vci_individual.md
INFO: Moved: docs/modules/g2p_registry_encryption.md -> docs/reference/modules/g2p_registry_encryption.md
INFO: Moved: docs/modules/spp_idpass.md -> docs/reference/modules/spp_idpass.md
INFO: Moved: docs/modules/spp_api.md -> docs/reference/modules/spp_api.md
INFO: Moved: docs/modules/g2p_payment_cash.md -> docs/reference/modules/g2p_payment_cash.md
INFO: Moved: docs/modules/g2p_entitlement_differential.md -> docs/reference/modules/g2p_entitlement_differential.md
INFO: Moved: docs/modules/spp_programs_compliance_criteria.md -> docs/reference/modules/spp_programs_compliance_criteria.md
INFO: Moved: docs/modules/g2p_bank.md -> docs/reference/modules/g2p_bank.md
INFO: Moved: docs/modules/spp_entitlement_basket.md -> docs/reference/modules/spp_entitlement_basket.md
INFO: Moved: docs/modules/spp_custom_fields_ui.md -> docs/reference/modules/spp_custom_fields_ui.md
INFO: Moved: docs/modules/spp_basic_cash_entitlement_spent.md -> docs/reference/modules/spp_basic_cash_entitlement_spent.md
INFO: Moved: docs/modules/g2p_program_registrant_info_rest_api.md -> docs/reference/modules/g2p_program_registrant_info_rest_api.md
INFO: Moved: docs/modules/g2p_encryption.md -> docs/reference/modules/g2p_encryption.md
INFO: Moved: docs/modules/spp_data_export.md -> docs/reference/modules/spp_data_export.md
INFO: Moved: docs/modules/g2p_programs.md -> docs/reference/modules/g2p_programs.md
INFO: Moved: docs/modules/spp_farmer_registry_dashboard.md -> docs/reference/modules/spp_farmer_registry_dashboard.md
INFO: Moved: docs/modules/spp_registrant_import.md -> docs/reference/modules/spp_registrant_import.md
INFO: Moved: docs/modules/spp_pmt.md -> docs/reference/modules/spp_pmt.md
INFO: Moved: docs/modules/spp_starter.md -> docs/reference/modules/spp_starter.md
INFO: Moved: docs/modules/g2p_proxy_means_test.md -> docs/reference/modules/g2p_proxy_means_test.md
INFO: Moved: docs/modules/spp_encryption.md -> docs/reference/modules/spp_encryption.md
INFO: Moved: docs/modules/spp_registry_group_hierarchy.md -> docs/reference/modules/spp_registry_group_hierarchy.md
INFO: Moved: docs/modules/spp_consent.md -> docs/reference/modules/spp_consent.md
INFO: Moved: docs/modules/spp_programs_sp.md -> docs/reference/modules/spp_programs_sp.md
INFO: Moved: docs/modules/spp_demo.md -> docs/reference/modules/spp_demo.md
INFO: Moved: docs/modules/spp_base_gis_demo.md -> docs/reference/modules/spp_base_gis_demo.md
INFO: Moved: docs/modules/spp_base.md -> docs/reference/modules/spp_base.md
INFO: Moved: docs/modules/spp_base_gis.md -> docs/reference/modules/spp_base_gis.md
INFO: Moved: docs/modules/g2p_program_documents.md -> docs/reference/modules/g2p_program_documents.md
INFO: Moved: docs/modules/g2p_programs_rest_api.md -> docs/reference/modules/g2p_programs_rest_api.md
INFO: Moved: docs/modules/spp_area.md -> docs/reference/modules/spp_area.md
INFO: Moved: docs/modules/g2p_program_assessment.md -> docs/reference/modules/g2p_program_assessment.md
INFO: Moved: docs/modules/spp_land_record.md -> docs/reference/modules/spp_land_record.md
INFO: Moved: docs/modules/g2p_openid_vci_programs.md -> docs/reference/modules/g2p_openid_vci_programs.md
INFO: Moved: docs/modules/g2p_entitlement_voucher.md -> docs/reference/modules/g2p_entitlement_voucher.md
INFO: Moved: docs/modules/g2p_registry_rest_api_extension_demo.md -> docs/reference/modules/g2p_registry_rest_api_extension_demo.md
INFO: Moved: docs/modules/spp_custom_field_recompute_daily.md -> docs/reference/modules/spp_custom_field_recompute_daily.md
INFO: Moved: docs/modules/spp_audit_log.md -> docs/reference/modules/spp_audit_log.md
INFO: Moved: docs/modules/spp_idqueue.md -> docs/reference/modules/spp_idqueue.md
INFO: Moved: docs/modules/spp_api_records.md -> docs/reference/modules/spp_api_records.md
INFO: Moved: docs/modules/spp_ent_trans.md -> docs/reference/modules/spp_ent_trans.md
INFO: Moved: docs/modules/spp_event_demo.md -> docs/reference/modules/spp_event_demo.md
INFO: Moved: docs/modules/spp_custom_field.md -> docs/reference/modules/spp_custom_field.md
INFO: Moved: docs/modules/spp_audit_config.md -> docs/reference/modules/spp_audit_config.md
INFO: Moved: docs/modules/spp_dms.md -> docs/reference/modules/spp_dms.md
INFO: Moved: docs/modules/spp_farmer_registry_base.md -> docs/reference/modules/spp_farmer_registry_base.md
INFO: Moved: docs/modules/spp_service_points.md -> docs/reference/modules/spp_service_points.md
INFO: Moved: docs/modules/index.md -> docs/reference/modules/index.md
INFO: Moved: docs/modules/g2p_program_cycleless.md -> docs/reference/modules/g2p_program_cycleless.md
INFO: Moved: docs/modules/g2p_openid_vci.md -> docs/reference/modules/g2p_openid_vci.md
INFO: Moved: docs/modules/spp_farmer_registry_demo.md -> docs/reference/modules/spp_farmer_registry_demo.md
INFO: Moved: docs/modules/g2p_registry_rest_api.md -> docs/reference/modules/g2p_registry_rest_api.md
INFO: Moved: docs/modules/spp_scan_id_document.md -> docs/reference/modules/spp_scan_id_document.md
INFO: Moved: docs/modules/spp_registry_data_source.md -> docs/reference/modules/spp_registry_data_source.md
INFO: Moved: docs/modules/g2p_payment_files.md -> docs/reference/modules/g2p_payment_files.md
INFO: Moved: docs/modules/g2p_connect_demo.md -> docs/reference/modules/g2p_connect_demo.md
INFO: Moved: docs/modules/spp_registrant_tag.md -> docs/reference/modules/spp_registrant_tag.md
INFO: Moved: docs/modules/g2p_program_registrant_info.md -> docs/reference/modules/g2p_program_registrant_info.md
INFO: Moved: docs/modules/spp_service_point_device.md -> docs/reference/modules/spp_service_point_device.md
INFO: Moved: docs/modules/g2p_payment_g2p_connect.md -> docs/reference/modules/g2p_payment_g2p_connect.md
INFO: Moved: docs/modules/spp_programs.md -> docs/reference/modules/spp_programs.md
INFO: Moved: docs/modules/spp_entitlement_cash.md -> docs/reference/modules/spp_entitlement_cash.md
INFO: Moved: docs/modules/g2p_registry_individual.md -> docs/reference/modules/g2p_registry_individual.md
INFO: Moved: docs/modules/spp_change_request_add_children_demo.md -> docs/reference/modules/spp_change_request_add_children_demo.md
INFO: Moved: docs/modules/g2p_encryption_keymanager.md -> docs/reference/modules/g2p_encryption_keymanager.md
INFO: Moved: docs/modules/g2p_program_autoenrol.md -> docs/reference/modules/g2p_program_autoenrol.md
INFO: Moved: docs/modules/spp_event_data.md -> docs/reference/modules/spp_event_data.md
INFO: Moved: docs/modules/spp_openid_vci.md -> docs/reference/modules/spp_openid_vci.md
INFO: Moved: docs/modules/spp_pos.md -> docs/reference/modules/spp_pos.md
INFO: Moved: docs/modules/spp_custom_filter.md -> docs/reference/modules/spp_custom_filter.md
INFO: Moved: docs/modules/g2p_program_reimbursement.md -> docs/reference/modules/g2p_program_reimbursement.md
INFO: Moved: docs/modules/spp_base_setting.md -> docs/reference/modules/spp_base_setting.md
INFO: Moved: docs/modules/spp_manual_entitlement.md -> docs/reference/modules/spp_manual_entitlement.md
INFO: Moved: docs/modules/spp_oauth.md -> docs/reference/modules/spp_oauth.md
INFO: Moved: docs/modules/spp_import_dci_api.md -> docs/reference/modules/spp_import_dci_api.md
INFO: Moved: docs/modules/spp_eligibility_sql.md -> docs/reference/modules/spp_eligibility_sql.md
INFO: Moved: docs/modules/spp_eligibility_tags.md -> docs/reference/modules/spp_eligibility_tags.md
INFO: Moved: docs/modules/g2p_program_approval.md -> docs/reference/modules/g2p_program_approval.md
INFO: Moved: docs/modules/g2p_encryption_rest_api.md -> docs/reference/modules/g2p_encryption_rest_api.md
INFO: Moved: docs/modules/g2p_payment_simple_mpesa.md -> docs/reference/modules/g2p_payment_simple_mpesa.md
INFO: Moved: docs/modules/spp_base_demo.md -> docs/reference/modules/spp_base_demo.md
INFO: Moved: docs/modules/spp_dci_api_server.md -> docs/reference/modules/spp_dci_api_server.md
INFO: Moved: docs/modules/g2p_registry_addl_info_rest_api.md -> docs/reference/modules/g2p_registry_addl_info_rest_api.md
INFO: Moved: docs/modules/spp_area_gis.md -> docs/reference/modules/spp_area_gis.md
INFO: Moved: docs/modules/g2p_registry_addl_info.md -> docs/reference/modules/g2p_registry_addl_info.md
INFO: Moved: docs/modules/spp_base_gis_rest.md -> docs/reference/modules/spp_base_gis_rest.md
INFO: Moved: docs/modules/g2p_registry_group.md -> docs/reference/modules/g2p_registry_group.md
INFO: Moved: docs/modules/spp_program_id.md -> docs/reference/modules/spp_program_id.md
INFO: Moved: docs/modules/spp_openid_vci_group.md -> docs/reference/modules/spp_openid_vci_group.md
INFO: Moved: docs/modules/spp_import_match.md -> docs/reference/modules/spp_import_match.md
INFO: Moved: docs/modules/spp_custom_filter_ui.md -> docs/reference/modules/spp_custom_filter_ui.md
INFO: Moved: docs/modules/spp_event_data_program_membership.md -> docs/reference/modules/spp_event_data_program_membership.md
INFO: Moved: docs/modules/g2p_registry_membership.md -> docs/reference/modules/g2p_registry_membership.md
INFO: Moved: docs/modules/g2p_payment_phee.md -> docs/reference/modules/g2p_payment_phee.md
INFO: Moved: docs/modules/spp_irrigation.md -> docs/reference/modules/spp_irrigation.md
INFO: Moved: docs/modules/spp_change_request_add_farmer.md -> docs/reference/modules/spp_change_request_add_farmer.md
INFO: Moved: docs/modules/spp_user_roles.md -> docs/reference/modules/spp_user_roles.md
INFO: Moved: docs/modules/g2p_registry_base.md -> docs/reference/modules/g2p_registry_base.md
INFO: Moved: docs/technical_reference/apis.md -> docs/developer_guide/api_usage/index.md
INFO: Moved: docs/technical_reference/architecture.md -> docs/developer_guide/architecture.md
INFO: Moved: docs/technical_reference/audit_logs.md -> docs/reference/technical/audit_logs.md
INFO: Moved: docs/technical_reference/backup.md -> docs/reference/technical/backup.md
INFO: Moved: docs/technical_reference/extensibility.md -> docs/overview/concepts/extensibility.md
INFO: Moved: docs/technical_reference/external_api.rst -> docs/developer_guide/api_usage/external_api_xmlrpc.md
INFO: Moved: docs/technical_reference/g2p-connect.md -> docs/developer_guide/integrations/g2p-connect.md
INFO: Moved: docs/technical_reference/integrations.md -> docs/overview/features/integrations_apis.md
INFO: Moved: docs/technical_reference/monitoring.md -> docs/reference/technical/monitoring.md
INFO: Moved: docs/technical_reference/openg2p.md -> docs/overview/concepts/openg2p.md
INFO: Moved: docs/technical_reference/performance_optimization.md -> docs/reference/technical/performance.md
INFO: Moved: docs/technical_reference/programs/cycle_manager.rst -> docs/reference/technical/cycle_manager.rst
INFO: Moved: docs/technical_reference/programs/dashboards.md -> docs/user_guide/reporting_dashboards.md
INFO: Moved: docs/technical_reference/programs/deduplication_manager.md -> docs/reference/technical/deduplication_manager.md
INFO: Moved: docs/technical_reference/programs/eligibility_manager.rst -> docs/reference/technical/eligibility_manager.rst
INFO: Moved: docs/technical_reference/programs/entitlement_manager.rst -> docs/reference/technical/entitlement_manager.rst
INFO: Moved: docs/technical_reference/programs/index.md -> docs/reference/technical/index.md
INFO: Moved: docs/technical_reference/programs/notification_manager.rst -> docs/reference/technical/notification_manager.rst
INFO: Moved: docs/technical_reference/programs/program_manager.rst -> docs/reference/technical/program_manager.rst
INFO: Moved: docs/technical_reference/release_management.md -> docs/community/release_management.md
INFO: Moved: docs/technical_reference/security.md -> docs/reference/technical/security.md
INFO: Moved: docs/tutorial/audit_log.md -> docs/user_guide/administration/using_audit_logs.md
INFO: Moved: docs/tutorial/change_requests.md -> docs/user_guide/registry_management/using_change_requests.md
INFO: Moved: docs/tutorial/consent_management.md -> docs/user_guide/consent_management.md
INFO: Moved: docs/tutorial/custom_fields.md -> docs/user_guide/administration/managing_custom_fields.md
INFO: Moved: docs/tutorial/event_data.md -> docs/user_guide/registry_management/using_event_data.md
INFO: Moved: docs/tutorial/geotargeting.md -> docs/user_guide/program_management/using_geotargeting.md
INFO: Moved: docs/tutorial/grievance_redressal_management.md -> docs/user_guide/grievance_management.md
INFO: Moved: docs/tutorial/hardware_integration.md -> docs/user_guide/administration/hardware_integration.md
INFO: Moved: docs/tutorial/indicators.md -> docs/user_guide/program_management/using_indicators.md
INFO: Split (copied): docs/tutorial/managing_social_protection_programs.md -> docs/user_guide/program_management/index.md
INFO: Moved: docs/tutorial/programs/export_beneficiaries.md -> docs/user_guide/program_management/export_beneficiaries.md
INFO: Split (copied): docs/tutorial/programs_and_cycles.md -> docs/user_guide/program_management/programs_overview.md
INFO: Moved: docs/tutorial/proxy_means_test.md -> docs/user_guide/program_management/using_pmt.md
INFO: Moved: docs/tutorial/user_guides/allocate_funds.md -> docs/user_guide/program_management/allocate_funds.md
INFO: Moved: docs/tutorial/user_guides/configure_ID_generate_qr.md -> docs/user_guide/registry_management/identity_management.md
INFO: Split (copied): docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md -> docs/user_guide/program_management/create_cycle.md
INFO: Moved: docs/tutorial/user_guides/import_areas.md -> docs/user_guide/administration/import_areas.md
INFO: Moved: docs/tutorial/user_guides/point_of_sales.md -> docs/user_guide/pos_usage.md
INFO: Moved: docs/tutorial/vouchers.md -> docs/user_guide/program_management/using_vouchers.md
INFO: Marked for merge: docs/contributing/admins.md -> docs/community/contributing.md
INFO: Marked for merge: docs/contributing/authors.md -> docs/community/contributing.md
INFO: Marked for merge: docs/contributing/index.md -> docs/community/contributing.md
INFO: Marked for merge: docs/contributing/myst-reference.md -> docs/community/contributing.md
INFO: Marked for merge: docs/contributing/setup-build.md -> docs/community/contributing.md
INFO: Marked for merge: docs/contributing/sphinx-extensions.md -> docs/community/contributing.md
INFO: Marked for merge: docs/explanation/security_archi.md -> docs/reference/technical/security.md
INFO: Marked for merge: docs/howto/developer_guides/custom_registry_tab_fields.md -> docs/developer_guide/customization/customizing_registry.md
INFO: Marked for merge: docs/howto/translation.md -> docs/community/contributing.md
INFO: Marked for merge: docs/howto/user_guides/export_registrant_data.md -> docs/user_guide/registry_management/import_export_data.md
INFO: Marked for merge: docs/howto/user_guides/import_registrant_data.md -> docs/user_guide/registry_management/import_export_data.md
INFO: Marked for merge: docs/technical_reference/code.md -> docs/developer_guide/best_practices.md
INFO: Marked for merge: docs/technical_reference/index.md -> docs/reference/index.md
INFO: Marked for merge: docs/technical_reference/programs/concepts.md -> docs/developer_guide/architecture.md
INFO: Marked for merge: docs/tutorial/access_management.md -> docs/user_guide/administration/user_access.md
INFO: Marked for merge: docs/tutorial/dashboards_and_reports.md -> docs/user_guide/reporting_dashboards.md
INFO: Marked for merge: docs/tutorial/index.md -> docs/user_guide/index.md
INFO: Marked for merge: docs/tutorial/user_guides/administrating_role_based_access.md -> docs/user_guide/administration/user_access.md
INFO: Marked for merge: docs/tutorial/user_guides/configure_cash_entitlements.md -> docs/user_guide/program_management/configure_entitlements.md
INFO: Marked for merge: docs/tutorial/user_guides/create_social_protection_program.md -> docs/user_guide/program_management/create_program.md
INFO: Marked for merge: docs/tutorial/user_guides/enroll_beneficiaries.md -> docs/user_guide/program_management/enroll_beneficiaries.md
INFO: Marked for merge: docs/tutorial/user_guides/export_registrant_data.md -> docs/user_guide/registry_management/import_export_data.md
INFO: Marked for merge: docs/tutorial/user_guides/import_registrant_data.md -> docs/user_guide/registry_management/import_export_data.md
INFO: Marked for merge: docs/tutorial/user_guides/register_new_individual.md -> docs/user_guide/registry_management/register_individual.md
INFO: Marked for merge: docs/tutorial/user_guides/setting_up_service_points.md -> docs/user_guide/administration/service_points.md
INFO: Merged and removed: docs/contributing/admins.md
INFO: Merged and removed: docs/contributing/authors.md
INFO: Merged and removed: docs/contributing/index.md
INFO: Merged and removed: docs/contributing/myst-reference.md
INFO: Merged and removed: docs/contributing/setup-build.md
INFO: Merged and removed: docs/contributing/sphinx-extensions.md
INFO: Merged and removed: docs/howto/translation.md
INFO: Merged and removed: docs/explanation/security_archi.md
INFO: Merged and removed: docs/howto/developer_guides/custom_registry_tab_fields.md
INFO: Merged and removed: docs/howto/user_guides/export_registrant_data.md
INFO: Merged and removed: docs/howto/user_guides/import_registrant_data.md
INFO: Merged and removed: docs/tutorial/user_guides/export_registrant_data.md
INFO: Merged and removed: docs/tutorial/user_guides/import_registrant_data.md
INFO: Merged and removed: docs/technical_reference/code.md
INFO: Merged and removed: docs/technical_reference/index.md
INFO: Merged and removed: docs/technical_reference/programs/concepts.md
INFO: Merged and removed: docs/tutorial/access_management.md
INFO: Merged and removed: docs/tutorial/user_guides/administrating_role_based_access.md
INFO: Merged and removed: docs/tutorial/dashboards_and_reports.md
INFO: Merged and removed: docs/tutorial/index.md
INFO: Merged and removed: docs/tutorial/user_guides/configure_cash_entitlements.md
INFO: Merged and removed: docs/tutorial/user_guides/create_social_protection_program.md
INFO: Merged and removed: docs/tutorial/user_guides/enroll_beneficiaries.md
INFO: Merged and removed: docs/tutorial/user_guides/register_new_individual.md
INFO: Merged and removed: docs/tutorial/user_guides/setting_up_service_points.md
INFO: Created index: docs/overview/index.md
INFO: Created index: docs/overview/features/index.md
INFO: Created index: docs/overview/use_cases/index.md
INFO: Created index: docs/overview/case_studies/index.md
INFO: Created index: docs/user_guide/registry_management/index.md
INFO: Created index: docs/user_guide/administration/index.md
INFO: Created index: docs/developer_guide/index.md
INFO: Created index: docs/developer_guide/customization/index.md
INFO: Created index: docs/developer_guide/integrations/index.md
INFO: Created index: docs/reference/api/index.md
INFO: Updated conf.py with 117 redirects
INFO: Refactoring complete!
WARNING: 
Files that need manual splitting:
WARNING:   docs/getting_started/installation_guide.md -> docs/getting_started/installation_docker.md
WARNING:   docs/howto/index.md -> docs/user_guide/index.md
WARNING:   docs/tutorial/managing_social_protection_programs.md -> docs/user_guide/program_management/index.md
WARNING:   docs/tutorial/programs_and_cycles.md -> docs/user_guide/program_management/programs_overview.md
WARNING:   docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md -> docs/user_guide/program_management/create_cycle.md
WARNING: 
Files that were merged (review content):
WARNING:   docs/community/contributing.md <- docs/contributing/admins.md, docs/contributing/authors.md, docs/contributing/index.md, docs/contributing/myst-reference.md, docs/contributing/setup-build.md, docs/contributing/sphinx-extensions.md, docs/howto/translation.md
WARNING:   docs/reference/technical/security.md <- docs/explanation/security_archi.md
WARNING:   docs/developer_guide/customization/customizing_registry.md <- docs/howto/developer_guides/custom_registry_tab_fields.md
WARNING:   docs/user_guide/registry_management/import_export_data.md <- docs/howto/user_guides/export_registrant_data.md, docs/howto/user_guides/import_registrant_data.md, docs/tutorial/user_guides/export_registrant_data.md, docs/tutorial/user_guides/import_registrant_data.md
WARNING:   docs/developer_guide/best_practices.md <- docs/technical_reference/code.md
WARNING:   docs/reference/index.md <- docs/technical_reference/index.md
WARNING:   docs/developer_guide/architecture.md <- docs/technical_reference/programs/concepts.md
WARNING:   docs/user_guide/administration/user_access.md <- docs/tutorial/access_management.md, docs/tutorial/user_guides/administrating_role_based_access.md
WARNING:   docs/user_guide/reporting_dashboards.md <- docs/tutorial/dashboards_and_reports.md
WARNING:   docs/user_guide/index.md <- docs/tutorial/index.md
WARNING:   docs/user_guide/program_management/configure_entitlements.md <- docs/tutorial/user_guides/configure_cash_entitlements.md
WARNING:   docs/user_guide/program_management/create_program.md <- docs/tutorial/user_guides/create_social_protection_program.md
WARNING:   docs/user_guide/program_management/enroll_beneficiaries.md <- docs/tutorial/user_guides/enroll_beneficiaries.md
WARNING:   docs/user_guide/registry_management/register_individual.md <- docs/tutorial/user_guides/register_new_individual.md
WARNING:   docs/user_guide/administration/service_points.md <- docs/tutorial/user_guides/setting_up_service_points.md
</file>

<file path="requirements_frozen.txt">
AccessControl==6.0
Acquisition==4.13
alabaster==0.7.13
appdirs==1.4.4
astunparse==1.6.3
attrs==22.2.0
AuthEncoding==5.0
Babel==2.9.1
beautifulsoup4==4.11.2
borg.localrole==3.1.10
BTrees==5.0
cached-property==1.5.2
certifi==2022.12.7
cffi==1.15.1
Chameleon==4.0.0
chardet==3.0.4
charset-normalizer==3.1.0
collective.monkeypatcher==1.2.1
colorama==0.4.6
contourpy==1.0.7
cryptography==38.0.2
cssselect==1.2.0
cycler==0.11.0
DateTime==5.1
decorator==4.4.2
defusedxml==0.7.1
diazo==1.5.0
DocumentTemplate==4.4
docutils==0.16
ebaysdk==2.1.5
extendable==0.0.3
extendable_pydantic==0.0.3
ExtensionClass==5.0
feedparser==6.0.10
five.customerize==2.1.0
five.intid==1.2.7
five.localsitemanager==4.0
fonttools==4.39.0
freezegun==0.3.15
future==0.18.3
gevent==22.10.2
graphviz==0.20.1
greenlet==2.0.2
icalendar==5.0.4
idna==2.8
imagesize==1.4.1
iso3166==2.1.1
isodate==0.6.1
Jinja2==2.11.3
jsonschema==4.17.3
jsx-lexer==2.0.0
kiwisolver==1.4.4
lesscpy==0.15.1
libsass==0.18.0
linkify-it-py==2.0.0
livereload==2.6.3
lxml==4.9.2
manuel==1.12.4
Markdown==3.4.1
markdown-it-py==2.2.0
MarkupSafe==1.1.0
matplotlib==3.7.1
mdit-py-plugins==0.3.5
mdurl==0.1.2
Missing==4.2
MultiMapping==5.0
multipart==0.2.4
myst-parser==0.18.1
num2words==0.5.6
numpy==1.24.2
ofxparse==0.21
packaging==23.0
passlib==1.7.3
Paste==3.5.2
PasteDeploy==3.0.1
pbr==5.11.1
Persistence==3.6
persistent==5.0
piexif==1.1.3
Pillow==9.0.1
ply==3.11
polib==1.1.0
psutil==5.6.7
psycopg2==2.9.5
pyasn1==0.4.8
pyasn1-modules==0.2.8
pycountry==22.3.5
pycparser==2.21
pydantic==1.10.6
pydata-sphinx-theme==0.8.1
pydot==1.4.1
Pygments==2.14.0
pyOpenSSL==23.0.0
pyparsing==3.0.9
PyPDF2==1.26.0
pyrsistent==0.19.3
pyserial==3.4
python-dateutil==2.7.3
python-gettext==4.1
python-ldap==3.4.0
python-stdnum==1.13
pytz==2019.3
pyusb==1.0.2
PyYAML==6.0
qrcode==6.1
Record==3.6
reportlab==3.6.12
repoze.xmliter==0.6.1
requests==2.25.1
requests-toolbelt==0.10.1
RestrictedPython==7.0a1.dev0
roman==4.0
schwifty==2023.3.0
sgmllib3k==1.0.0
simplejson==3.18.3
six==1.16.0
snowballstemmer==2.2.0
soupsieve==2.4
Sphinx==4.5.0
sphinx-autobuild==2021.3.14
sphinx-book-theme==0.3.3
sphinx-copybutton==0.5.1
sphinx-notfound-page==0.8.3
sphinx-sitemap==2.5.0
sphinx-togglebutton==0.3.2
sphinx_design==0.3.0
sphinxcontrib-applehelp==1.0.4
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==2.0.1
sphinxcontrib-httpdomain==1.8.1
sphinxcontrib-httpexample==1.1
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.5
sphinxcontrib-video==0.0.1.dev3
sphinxext-opengraph==0.8.1
tornado==6.2
transaction==3.0.1
typing_extensions==4.5.0
uc-micro-py==1.0.1
Unidecode==1.3.6
urllib3==1.26.5
vobject==0.9.6.1
waitress==2.1.2
WebOb==1.8.7
webresource==1.2
WebTest==3.0.0
Werkzeug==2.0.2
wrapt==1.15.0
WSGIProxy2==0.5.1
xlrd==1.2.0
XlsxWriter==1.1.2
xlwt==1.3.0
z3c.caching==3.0
z3c.form==4.3
z3c.formwidget.query==1.0.0
z3c.objpath==1.3
z3c.pt==3.3.1
z3c.relationfield==1.0
z3c.zcmlhook==2.0
zc.lockfile==3.0.post1
zc.relation==1.1.post2
ZConfig==3.6.1
sphinx-tabs==3.2.0
sphinxcontrib-googleanalytics==0.4
</file>

<file path="requirements_odoo.txt">
Babel==2.9.1  # min version = 2.6.0 (Focal with security backports)
chardet==3.0.4
#cryptography==2.6.1  # incompatibility between pyopenssl 19.0.0 and cryptography>=37.0.0
decorator==4.4.2
docutils==0.16
ebaysdk==2.1.5
freezegun==0.3.11; python_version < '3.8'
freezegun==0.3.15; python_version >= '3.8'
#gevent==1.5.0 ; python_version == '3.7'
#gevent==20.9.0 ; python_version > '3.7' and python_version <= '3.9'
#gevent==21.8.0 ; python_version > '3.9'  # (Jammy)
#greenlet==0.4.15 ; python_version == '3.7'
#greenlet==0.4.17 ; python_version > '3.7' and python_version <= '3.9'
#greenlet==1.1.2 ; python_version  > '3.9'  # (Jammy)
idna==2.8
Jinja2==2.11.3 # min version = 2.10.1 (Focal - with security backports)
libsass==0.18.0
#lxml==4.6.5 # min version = 4.5.0 (Focal - with security backports)
MarkupSafe==1.1.0
num2words==0.5.6
ofxparse==0.19; python_version <= '3.9'
ofxparse==0.21; python_version > '3.9'  # (Jammy)
passlib==1.7.3 # min version = 1.7.2 (Focal with security backports)
Pillow==9.0.1  # min version = 7.0.0 (Focal with security backports)
polib==1.1.0
psutil==5.6.7 # min version = 5.5.1 (Focal with security backports)
psycopg2==2.7.7; sys_platform != 'win32' and python_version < '3.8'
psycopg2==2.8.6; sys_platform == 'win32' or python_version >= '3.8'
pydot==1.4.1
pyopenssl==19.0.0
PyPDF2==1.26.0
pypiwin32 ; sys_platform == 'win32'
pyserial==3.4
python-dateutil==2.7.3
python-ldap==3.4.0 ; sys_platform != 'win32'  # min version = 3.2.0 (Focal with security backports)
python-stdnum==1.13
pytz==2019.3
pyusb==1.0.2
qrcode==6.1
#reportlab==3.5.59 # version < 3.5.54 are not compatible with Pillow 8.1.2 and 3.5.59 is bullseye
requests==2.25.1 # versions < 2.25 aren't compatible w/ urllib3 1.26. Bullseye = 2.25.1. min version = 2.22.0 (Focal)
urllib3==1.26.5 # indirect / min version = 1.25.8 (Focal with security backports)
vobject==0.9.6.1
Werkzeug==0.16.1 ; python_version <= '3.9'
Werkzeug==2.0.2 ; python_version > '3.9'  # (Jammy)
xlrd==1.1.0; python_version < '3.8'
xlrd==1.2.0; python_version >= '3.8'
XlsxWriter==1.1.2
xlwt==1.3.*
zeep==3.4.0
</file>

<file path="requirements-initial.txt">
pip==22.3.1
setuptools==65.5.1
wheel==0.38.4
</file>

<file path="update_links.py">
#!/usr/bin/env python3
"""Update all internal links in documentation files after refactoring."""

import re
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# Map of old paths to new paths (without extensions)
path_mappings = {
    # Community and support
    "community_and_support/code_of_conduct": "community/code_of_conduct",
    "community_and_support/how_to_contribute_to_the_project": "community/contributing",
    "community_and_support/index": "community/index",
    "community_and_support/l3_support": "community/support",
    "community_and_support/license": "community/license",
    "community_and_support/security_report": "community/security_reporting",
    "community_and_support/i18n_l10n": "developer_guide/i18n_l10n",
    "community_and_support/module_lifecycle_development_status": "community/module_lifecycle_development_status",
    "community_and_support/module_lifecycle_maintainer_role": "community/module_lifecycle_maintainer_role",
    
    # Contributing
    "contributing/admins": "community/contributing",
    "contributing/authors": "community/contributing",
    "contributing/index": "community/contributing",
    "contributing/myst-reference": "community/contributing",
    "contributing/setup-build": "community/contributing",
    "contributing/sphinx-extensions": "community/contributing",
    
    # Explanation to overview/concepts
    "explanation/data_collection_validation": "overview/concepts/data_collection_validation",
    "explanation/data_protection": "overview/concepts/data_protection",
    "explanation/digital_public_infrastructure": "overview/concepts/digital_public_infrastructure",
    "explanation/farmer_registry": "overview/concepts/farmer_registry",
    "explanation/index": "overview/concepts/index",
    "explanation/integrated_beneficiary_registry": "overview/concepts/integrated_beneficiary_registry",
    "explanation/Registering_individuals_and_groups": "overview/concepts/registrant_concepts",
    "explanation/registry_key_concepts": "overview/concepts/registry_key_concepts",
    "explanation/security_archi": "reference/technical/security",
    "explanation/social_protection_management_information_systems": "overview/concepts/sp_mis",
    "explanation/social_registry": "overview/concepts/social_registry",
    "explanation/user_mgt": "overview/concepts/user_management",
    
    # Getting started
    "getting_started/creating_a_program": "user_guide/program_management/create_program",
    "getting_started/installation_guide": "getting_started/installation_docker",
    
    # Glossary
    "glossary": "reference/glossary",
    
    # Developer guides
    "howto/developer_guides/beneficiary_keycloak": "developer_guide/integrations/keycloak_beneficiary_portal",
    "howto/developer_guides/custom_areas": "developer_guide/customization/customizing_areas",
    "howto/developer_guides/custom_audit": "developer_guide/customization/customizing_audit",
    "howto/developer_guides/custom_cr": "developer_guide/customization/customizing_change_requests",
    "howto/developer_guides/custom_cycle": "developer_guide/customization/customizing_cycles",
    "howto/developer_guides/custom_entitlement": "developer_guide/customization/customizing_entitlements",
    "howto/developer_guides/custom_fields_indicators": "developer_guide/customization/customizing_fields",
    "howto/developer_guides/custom_program": "developer_guide/customization/customizing_programs",
    "howto/developer_guides/custom_registry_tab_fields": "developer_guide/customization/customizing_registry",
    "howto/developer_guides/custom_registry": "developer_guide/customization/customizing_registry",
    "howto/developer_guides/custom_service_points": "developer_guide/customization/customizing_service_points",
    "howto/developer_guides/dci": "developer_guide/integrations/dci",
    "howto/developer_guides/development_setup": "developer_guide/setup",
    "howto/developer_guides/esignet": "developer_guide/integrations/esignet",
    "howto/developer_guides/implmenting_pmt": "developer_guide/customization/implementing_pmt",
    "howto/developer_guides/indicators": "developer_guide/customization/customizing_indicators",
    "howto/developer_guides/module": "developer_guide/module_development",
    "howto/developer_guides/oidc": "developer_guide/integrations/oidc",
    "howto/developer_guides/rest_api": "developer_guide/api_usage/rest_api",
    "howto/developer_guides/setting_up_using_pypi": "getting_started/installation_pypi",
    "howto/developer_guides/troubleshooting": "developer_guide/troubleshooting",
    "howto/developer_mode": "developer_guide/developer_mode",
    "howto/index": "user_guide/index",
    "howto/translation": "community/contributing",
    
    # User guides
    "howto/user_guides/administrating_role_based_access": "user_guide/administration/user_access",
    "howto/user_guides/enroll_beneficiaries": "user_guide/program_management/enroll_beneficiaries",
    "howto/user_guides/export_registrant_data": "user_guide/registry_management/import_export_data",
    "howto/user_guides/implementing_pmt": "user_guide/program_management/implementing_pmt",
    "howto/user_guides/import_registrant_data": "user_guide/registry_management/import_export_data",
    "howto/user_guides/register_new_individual": "user_guide/registry_management/register_individual",
    "howto/user_guides/setting_up_farmer_registry": "user_guide/registry_management/setting_up_farmer_registry",
    "howto/user_guides/setting_up_service_points": "user_guide/administration/service_points",
    
    # Technical reference
    "technical_reference/apis": "developer_guide/api_usage/index",
    "technical_reference/architecture": "developer_guide/architecture",
    "technical_reference/audit_logs": "reference/technical/audit_logs",
    "technical_reference/backup": "reference/technical/backup",
    "technical_reference/code": "developer_guide/best_practices",
    "technical_reference/extensibility": "overview/concepts/extensibility",
    "technical_reference/external_api": "developer_guide/api_usage/external_api_xmlrpc",
    "technical_reference/g2p-connect": "developer_guide/integrations/g2p-connect",
    "technical_reference/index": "reference/index",
    "technical_reference/integrations": "overview/features/integrations_apis",
    "technical_reference/monitoring": "reference/technical/monitoring",
    "technical_reference/openg2p": "overview/concepts/openg2p",
    "technical_reference/performance_optimization": "reference/technical/performance",
    "technical_reference/programs/concepts": "developer_guide/architecture",
    "technical_reference/programs/cycle_manager": "reference/technical/cycle_manager",
    "technical_reference/programs/dashboards": "user_guide/reporting_dashboards",
    "technical_reference/programs/deduplication_manager": "reference/technical/deduplication_manager",
    "technical_reference/programs/eligibility_manager": "reference/technical/eligibility_manager",
    "technical_reference/programs/entitlement_manager": "reference/technical/entitlement_manager",
    "technical_reference/programs/index": "reference/technical/index",
    "technical_reference/programs/notification_manager": "reference/technical/notification_manager",
    "technical_reference/programs/program_manager": "reference/technical/program_manager",
    "technical_reference/release_management": "community/release_management",
    "technical_reference/security": "reference/technical/security",
    
    # Tutorial mappings
    "tutorial/access_management": "user_guide/administration/user_access",
    "tutorial/audit_log": "user_guide/administration/using_audit_logs",
    "tutorial/change_requests": "user_guide/registry_management/using_change_requests",
    "tutorial/consent_management": "user_guide/consent_management",
    "tutorial/custom_fields": "user_guide/administration/managing_custom_fields",
    "tutorial/dashboards_and_reports": "user_guide/reporting_dashboards",
    "tutorial/event_data": "user_guide/registry_management/using_event_data",
    "tutorial/geotargeting": "user_guide/program_management/using_geotargeting",
    "tutorial/grievance_redressal_management": "user_guide/grievance_management",
    "tutorial/hardware_integration": "user_guide/administration/hardware_integration",
    "tutorial/index": "user_guide/index",
    "tutorial/indicators": "user_guide/program_management/using_indicators",
    "tutorial/managing_social_protection_programs": "user_guide/program_management/index",
    "tutorial/programs/export_beneficiaries": "user_guide/program_management/export_beneficiaries",
    "tutorial/programs_and_cycles": "user_guide/program_management/programs_overview",
    "tutorial/proxy_means_test": "user_guide/program_management/using_pmt",
    "tutorial/user_guides/administrating_role_based_access": "user_guide/administration/user_access",
    "tutorial/user_guides/allocate_funds": "user_guide/program_management/allocate_funds",
    "tutorial/user_guides/configure_ID_generate_qr": "user_guide/registry_management/identity_management",
    "tutorial/user_guides/configure_cash_entitlements": "user_guide/program_management/configure_entitlements",
    "tutorial/user_guides/create_program_cycle_prepare_entitlements": "user_guide/program_management/create_cycle",
    "tutorial/user_guides/create_social_protection_program": "user_guide/program_management/create_program",
    "tutorial/user_guides/enroll_beneficiaries": "user_guide/program_management/enroll_beneficiaries",
    "tutorial/user_guides/export_registrant_data": "user_guide/registry_management/import_export_data",
    "tutorial/user_guides/import_areas": "user_guide/administration/import_areas",
    "tutorial/user_guides/import_registrant_data": "user_guide/registry_management/import_export_data",
    "tutorial/user_guides/point_of_sales": "user_guide/pos_usage",
    "tutorial/user_guides/register_new_individual": "user_guide/registry_management/register_individual",
    "tutorial/user_guides/setting_up_service_points": "user_guide/administration/service_points",
    "tutorial/vouchers": "user_guide/program_management/using_vouchers",
}

def update_links_in_file(file_path: Path) -> bool:
    """Update links in a single file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # Update markdown links [text](path.md)
        def replace_md_link(match):
            link_text = match.group(1)
            link_path = match.group(2)
            
            # Skip external links
            if link_path.startswith(('http://', 'https://', 'mailto:', '#')):
                return match.group(0)
            
            # Remove leading slash if present
            clean_path = link_path.lstrip('/')
            
            # Remove .md extension for comparison
            path_without_ext = clean_path.replace('.md', '').replace('.rst', '')
            
            # Check if this path needs updating
            for old_path, new_path in path_mappings.items():
                if path_without_ext.endswith(old_path):
                    # Calculate the relative path from current file to new location
                    current_depth = len(file_path.parts) - 2  # -2 for 'docs' and filename
                    new_depth = len(new_path.split('/'))
                    
                    # Build relative path
                    if current_depth > 0:
                        prefix = '/'.join(['..'] * current_depth) + '/'
                    else:
                        prefix = ''
                    
                    # Determine extension
                    if '.rst' in link_path:
                        ext = '.rst'
                    else:
                        ext = '.md'
                    
                    new_link = f"{prefix}{new_path}{ext}"
                    return f'[{link_text}]({new_link})'
            
            return match.group(0)
        
        # Pattern for markdown links
        md_link_pattern = r'\[([^\]]+)\]\(([^)]+)\)'
        content = re.sub(md_link_pattern, replace_md_link, content)
        
        # Update RST doc references :doc:`path`
        def replace_rst_doc(match):
            doc_path = match.group(1)
            
            # Remove leading slash if present
            clean_path = doc_path.lstrip('/')
            
            # Check if this path needs updating
            for old_path, new_path in path_mappings.items():
                if clean_path.endswith(old_path):
                    # Calculate the relative path
                    current_depth = len(file_path.parts) - 2
                    
                    if current_depth > 0:
                        prefix = '/'.join(['..'] * current_depth) + '/'
                    else:
                        prefix = ''
                    
                    new_doc = f"{prefix}{new_path}"
                    return f':doc:`{new_doc}`'
            
            return match.group(0)
        
        # Pattern for RST doc references
        rst_doc_pattern = r':doc:`([^`]+)`'
        content = re.sub(rst_doc_pattern, replace_rst_doc, content)
        
        # Update image paths
        content = content.replace('](/explanation/images/', '](/overview/concepts/images/')
        content = content.replace('](/technical_reference/images/', '](/reference/technical/images/')
        content = content.replace('](/howto/developer_guides/', '](/developer_guide/')
        content = content.replace('](/howto/user_guides/', '](/user_guide/')
        content = content.replace('](/tutorial/user_guides/', '](/user_guide/')
        
        # Write back if changed
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"Error processing {file_path}: {e}")
        return False

def main():
    """Update links in all documentation files."""
    docs_path = Path('docs')
    
    # Get all markdown and RST files
    all_files = list(docs_path.glob('**/*.md')) + list(docs_path.glob('**/*.rst'))
    
    updated_count = 0
    for file_path in all_files:
        if update_links_in_file(file_path):
            logger.info(f"Updated links in: {file_path}")
            updated_count += 1
    
    logger.info(f"Updated links in {updated_count} files")

if __name__ == "__main__":
    main()
</file>

<file path="update_navigation.py">
#!/usr/bin/env python3
"""Update navigation menus (toctree) in index files after refactoring."""

import os
from pathlib import Path

# Define the content for each index file
index_files = {
    "docs/user_guide/program_management/index.md": {
        "title": "Program Management",
        "description": "This section contains guides for creating and managing social protection programs.",
        "files": [
            "create_program",
            "enroll_beneficiaries", 
            "create_cycle",
            "configure_entitlements",
            "allocate_funds",
            "implementing_pmt",
            "using_pmt",
            "using_geotargeting",
            "using_indicators",
            "using_vouchers",
            "export_beneficiaries",
            "programs_overview"
        ]
    },
    
    "docs/user_guide/administration/index.md": {
        "title": "Administration",
        "description": "This section contains administrative tasks and system management guides.",
        "files": [
            "user_access",
            "service_points", 
            "managing_custom_fields",
            "using_audit_logs",
            "import_areas",
            "hardware_integration"
        ]
    },
    
    "docs/developer_guide/index.md": {
        "title": "Developer Guide", 
        "description": "This section provides technical information and instructions for developers who need to customize, extend, integrate with, or contribute to OpenSPP.",
        "files": [
            "setup",
            "architecture",
            "module_development",
            "best_practices",
            "troubleshooting",
            "developer_mode",
            "i18n_l10n",
            "customization/index",
            "integrations/index", 
            "api_usage/index"
        ]
    },
    
    "docs/developer_guide/customization/index.md": {
        "title": "Customization",
        "description": "This section contains guides for customizing OpenSPP functionality.",
        "files": [
            "customizing_areas",
            "customizing_audit",
            "customizing_change_requests", 
            "customizing_cycles",
            "customizing_entitlements",
            "customizing_fields",
            "customizing_programs",
            "customizing_registry",
            "customizing_service_points",
            "customizing_indicators",
            "implementing_pmt"
        ]
    },
    
    "docs/developer_guide/integrations/index.md": {
        "title": "Integrations",
        "description": "This section contains guides for integrating OpenSPP with external systems.",
        "files": [
            "dci",
            "esignet",
            "oidc", 
            "keycloak_beneficiary_portal",
            "g2p-connect"
        ]
    },
    
    "docs/developer_guide/api_usage/index.md": {
        "title": "API Usage",
        "description": "This section contains guides for using OpenSPP APIs.",
        "files": [
            "rest_api",
            "external_api_xmlrpc"
        ]
    },
    
    "docs/reference/index.md": {
        "title": "Reference",
        "description": "This section provides detailed reference material about OpenSPP components.",
        "files": [
            "modules/index",
            "technical/index", 
            "api/index",
            "glossary"
        ]
    },
    
    "docs/reference/technical/index.md": {
        "title": "Technical Reference", 
        "description": "This section contains detailed technical specifications and references.",
        "files": [
            "security",
            "backup",
            "performance",
            "monitoring",
            "audit_logs",
            "cycle_manager",
            "deduplication_manager", 
            "eligibility_manager",
            "entitlement_manager",
            "notification_manager",
            "program_manager"
        ]
    },
    
    "docs/community/index.md": {
        "title": "Community",
        "description": "This section contains information about the OpenSPP project, community interaction, contribution processes, and legal information.",
        "files": [
            "contributing",
            "code_of_conduct",
            "license",
            "security_reporting",
            "support",
            "release_management",
            "module_lifecycle_development_status",
            "module_lifecycle_maintainer_role"
        ]
    },
    
    "docs/overview/features/index.md": {
        "title": "Features",
        "description": "This section provides an overview of OpenSPP features organized by functional area.",
        "files": [
            "registry_data_management",
            "integrations_apis"
        ]
    },
    
    "docs/overview/use_cases/index.md": {
        "title": "Use Cases", 
        "description": "This section provides entry points for OpenSPP's main use cases.",
        "files": [
            "social_registry",
            "farmer_registry",
            "humanitarian",
            "social-protection-management-information-system"
        ]
    },
    
    "docs/overview/case_studies/index.md": {
        "title": "Case Studies",
        "description": "This section contains examples of OpenSPP implementations and use cases.",
        "files": []
    }
}

def create_index_content(title, description, files):
    """Create content for an index file."""
    content = f"# {title}\n\n{description}\n\n"
    
    if files:
        content += "```{toctree}\n:maxdepth: 2\n:caption: Contents\n\n"
        for file in files:
            content += f"{file}\n"
        content += "```\n"
    else:
        content += "```{toctree}\n:maxdepth: 2\n:caption: Contents\n\n```\n"
    
    return content

def main():
    """Update all index files."""
    for file_path, config in index_files.items():
        path = Path(file_path)
        
        # Create directory if it doesn't exist
        path.parent.mkdir(parents=True, exist_ok=True)
        
        # Create content
        content = create_index_content(
            config["title"],
            config["description"], 
            config["files"]
        )
        
        # Write file
        with open(path, 'w') as f:
            f.write(content)
        
        print(f"Updated: {file_path}")

if __name__ == "__main__":
    main()
</file>

<file path=".github/workflows/build_deploy.yml">
name: Build and deploy OpenSPP documentation

on:
  push:
    branches:
      - "main"

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          sudo apt-get install libsasl2-dev libldap2-dev libssl-dev &&
          pip install -q -r requirements_frozen.txt

      # - name: Run Vale
      #   run: make vale

      # - name: Run linkcheck
      #   run: make linkcheck

      - name: Prepare deploy
        run: make deploy

      # # node setup
      # - name: Use Node.js 16
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '16'
      # - name: Install Yarn
      #   run: npm install -g yarn
      # # node cache
      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   working-directory: submodules/volto
      #   run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      # - uses: actions/cache@v3
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # - name: StoryBook build
      #   run: |
      #     cd submodules/volto 
      #     yarn install --immutable 
      #     yarn build-storybook -o ../../_build/html/storybook

      # - name: Deploy to server
      #   id: deploy
      #   uses: Pendect/action-rsyncer@v2.0.0
      #   env:
      #     DEPLOY_KEY: ${{secrets.DEPLOY_KEY_DOCS}}
      #   with:
      #     flags: '-avzr --delete'
      #     options: ''
      #     ssh_options: '-p ${{secrets.DEPLOY_PORT}}'
      #     src: '_build/html/'
      #     dest: '${{secrets.DEPLOY_USER_DOCS}}@${{secrets.DEPLOY_SERVER_DOCS}}:${{secrets.DEPLOY_PATH_DOCS}}'
      - name: Commit documentation changes
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/html
      - name: Display status from deploy
        run: echo "${{ steps.deploy.outputs.status }}"
</file>

<file path="docs/contributing/redirects.md">
# Managing Documentation Redirects

This guide explains how to handle redirects when refactoring or moving documentation pages in the OpenSPP documentation.

## Configuration

The OpenSPP documentation uses the `sphinx-reredirects` extension to handle redirects. The configuration is located in `docs/conf.py`.

## Adding Redirects

To add a redirect when moving or renaming a page:

1. Open `docs/conf.py`
2. Find the `redirects` dictionary (around line 177)
3. Add your redirect mapping:

```python
redirects = {
    # Redirect from old path to new path
    "old-page": "new-page.html",
    "old-folder/page": "new-folder/page.html",
    
    # Examples:
    "getting-started": "getting_started/index.html",
    "api/v1/reference": "technical_reference/apis.html",
}
```

## Important Notes

- Paths in the `redirects` dictionary are relative to the documentation root
- The old path should NOT include the `.html` extension
- The new path MUST include the `.html` extension
- Redirects work for both files and directories
- You can redirect to external URLs as well

## Testing Redirects

After adding redirects:

1. Build the documentation locally:
   ```bash
   make clean
   make html
   ```

2. Navigate to the old URL in your browser
3. Verify that you are automatically redirected to the new location

## Best Practices

1. **Always add redirects** when moving or renaming documentation pages
2. **Keep redirects for at least 6-12 months** for public documentation
3. **Document major moves** in the changelog or release notes
4. **Update internal links** to point directly to new locations
5. **Test redirects** after deployment to ensure they work correctly

## Example Use Cases

### Renaming a Page
```python
redirects = {
    "installation": "getting_started/installation_guide.html",
}
```

### Moving to a Different Section
```python
redirects = {
    "tutorials/basic-setup": "getting_started/installation_guide.html",
}
```

### Consolidating Multiple Pages
```python
redirects = {
    "setup/requirements": "getting_started/installation_guide.html",
    "setup/installation": "getting_started/installation_guide.html",
    "setup/configuration": "getting_started/installation_guide.html",
}
```
</file>

<file path="docs/getting_started/index.md">
# Getting Started

## How the documentation is organized

This overview of how OpenSPP's documentation is organized will help you know where to look for certain things:

- {doc}`../overview/index` provides high-level information about OpenSPP's features, concepts, and use cases for decision makers and new users.
- {doc}`../user_guide/index` provides practical, task-oriented instructions for using OpenSPP's features in day-to-day operations for administrators and end-users.
- {doc}`../developer_guide/index` provides technical information and instructions for developers who need to customize, extend, integrate with, or contribute to OpenSPP.
- {doc}`../reference/index` provides detailed reference material about OpenSPP components, including module documentation and technical specifications.
- {doc}`../community/index` contains information about the OpenSPP project, community interaction, contribution processes, and legal information.
- {doc}`../reference/glossary` provides definitions and explanations of terms or specialized language used in social protection. Translations are provided in French, Spanish and Arabic.

## Technical information

OpenSPP is built on top of [Odoo 15.0](https://www.odoo.com/documentation/15.0/), a popular open-source [ERP](https://en.wikipedia.org/wiki/Enterprise_resource_planning). It is designed to be easy to install and maintain, and can be run on any Linux distribution.

To learn more, visit the {doc}`../developer_guide/architecture` section.

To begin working with OpenSPP, refer to the installation guides below.

```{toctree}
---
caption: Getting Started
maxdepth: 2
hidden: true
---

installation_docker
installation_pypi
poc_and_pilot
```
</file>

<file path="docs/getting_started/poc_and_pilot.md">
# From Proof of Concept to Pilot

Implementing OpenSPP progresses through four key phases: Proof of Concept, Pilot, Scale-up, and Operational Support. This guide focuses on the first two phases, providing insights into the PoC and Pilot stages. The PoC, typically lasting 4-8 weeks, demonstrates OpenSPP's core capabilities and adaptability to specific needs. The Pilot, spanning 3-6 months, involves a small-scale but real-world implementation to test feasibility, effectiveness, and scalability. This document provides a comprehensive overview of both phases, including their purposes, key components, and success criteria.

## Proof of Concept (PoC)

A PoC serves as the initial step in exploring OpenSPP's potential within a specific context, typically lasting 4-8 weeks. It involves a basic OpenSPP configuration with customization of Aone key feature, deployed in either a cloud or on-premise environment. The PoC uses mock data and does not include integrations with existing systems, allowing for a focused evaluation of core capabilities.

The PoC process begins with an initial workshop lasting 1-2 days, where project scope and objectives are defined, the key feature for customization is identified, and stakeholder expectations are aligned. This is followed by a 3-6 week implementation and internal testing period. The PoC concludes with a demonstration event where the configured system is showcased, stakeholder feedback is collected, and potential areas for development are discussed.

Key outputs of the PoC include a configured OpenSPP instance with one customized feature, a high-level analysis document outlining findings, an initial list of requirements for further development, and a preliminary plan for a more comprehensive pilot.

Success criteria for the PoC include successful demonstration of core OpenSPP capabilities in the specific use case, positive stakeholder feedback on the customized feature, clear identification of potential benefits and challenges, alignment with initial project objectives, and a feasibility assessment for moving to the Pilot phase.

### Prerequisites and Considerations

Before initiating a Proof of Concept, consider the following factors:

1. **Stakeholder Engagement:** Identify and engage key stakeholders who will be involved in decision-making for the PoC. This typically includes project sponsors, potential end-users, and technical team members.

2. **Clear Objectives:** Define specific, measurable objectives for the PoC. What key feature or capability of OpenSPP do you want to demonstrate?

3. **Resource Allocation:** For the duration of the PoC, assign a small, focused team (typically 3-5 people) and ensure they have the necessary time and resources to dedicate to this short-term project.

4. **Data Considerations:** Determine what mock data will be used for the PoC. Ensure it's representative of real scenarios without using actual sensitive information. Using mock data rather than live data reduces the need to focus attention on data privacy and security.

5. **Technical Environment:** Decide whether the PoC will be deployed in a cloud or on-premise environment. Ensure the necessary infrastructure is available.

6. **Evaluation Criteria:** Establish clear criteria for evaluating the PoC's success. This will help decide whether to proceed to a Pilot phase.

## Pilot Implementation

A Pilot represents a small-scale but real-world implementation of OpenSPP, typically spanning 3-6 months. It involves comprehensive business analysis, multiple feature customizations, integrations with existing systems, and the use of real data with appropriate protections. The Pilot also includes change management, training, and the establishment of a monitoring and evaluation framework.

The Pilot phase encompasses several core workstreams: Business Analysis, Product Development and Testing, Integrations, Change Management and Training, Monitoring and Evaluation, and Operational Support.

The process begins with a four-day kickoff workshop for in-depth requirements gathering, detailed process mapping, and integration planning. This is followed by a 2-5 month implementation of core workstreams, 2-4 weeks of user acceptance testing, and 2-4 weeks of evaluation and next steps planning.

Success criteria for the Pilot include system uptime and reliability, user adoption rates, data accuracy and completeness, process efficiency improvements, and beneficiary satisfaction.

### Prerequisites and Considerations

Before moving to the Pilot phase, ensure the following prerequisites are met:

1. **Stakeholder Commitment:** Secure firm commitment from a broader range of stakeholders, including higher-level decision-makers, for a more extensive implementation.

2. **Comprehensive Objectives:** Develop a detailed set of objectives for the Pilot, covering multiple features and integration points.

3. **Resource Planning:** Assemble a larger team (typically 8-12 people) with diverse skills. This includes roles such as project manager, developer, business analyst, and change management specialist.

4. **Data Privacy and Security:** Establish robust data protection measures for handling real beneficiary data and ensure compliance with relevant data protection regulations.

5. **Integration Strategy:** Develop a clear plan for integrating OpenSPP with existing systems. Identify which systems will be involved and how data will flow between them.

6. **Change Management:** Prepare a change management and training strategy for users who will be involved in the Pilot.

7. **Monitoring and Evaluation Framework:** Develop a comprehensive framework for monitoring the Pilot's progress and evaluating its success.

8. **Scalability Considerations:** Begin thinking about how the Pilot implementation could scale to a full deployment if successful.

## Comparison of PoC and Pilot Phases

| Aspect | Proof of Concept | Pilot |
| :---- | :---- | :---- |
| Duration | 4-8 weeks | 3-6 months |
| Scope | Limited, focus on one key feature | Comprehensive, multiple features |
| Data Used | Mock data | Real data |
| System Integration | No integrations | Integrations with existing systems |
| User Involvement | Limited, mainly for feedback | Extensive, including training |
| Outcome | Demonstration of potential | Real-world feasibility assessment |

## Next Steps

Based on the outcomes of the PoC or Pilot, different paths can be taken. For a successful PoC, the next step would be to proceed to the Pilot phase. A successful Pilot would lead to planning for full-scale implementation. If challenges arise during either phase, it may be necessary to reassess, make adjustments, or explore alternatives.

## Estimated Resource Requirements

For a Proof of Concept, a team of 3-5 people is typically required, including roles such as Project Manager, Developer, Business Analyst, and Stakeholder Representative. A Pilot, being more comprehensive, usually requires a larger team of 8-12 people, with roles including Project Manager, multiple Developers, Business Analysts, an Integration Specialist, a Change Management Specialist, a Trainer, Support Staff, and Stakeholder Representatives.

## Frequently Asked Questions

### When should we choose a PoC over a Pilot?

Choose a PoC when you need to quickly validate OpenSPP's potential in your context with minimal investment. Choose a Pilot when you're ready for a more comprehensive, real-world test of the system.

### Can we skip the PoC and go directly to a Pilot?

While possible, it's generally recommended to start with a PoC to minimize risks and ensure alignment before committing to a more resource-intensive Pilot.

### How do we decide to move from PoC to Pilot?

The decision should be based on the PoC's success criteria, stakeholder feedback, and an assessment of readiness for a larger-scale implementation.

### What if the PoC or Pilot doesn't meet our expectations?

Use the insights gained to reassess your needs, adjust the implementation approach, or explore alternative solutions. Failure to meet expectations can provide valuable learnings for future efforts.

### How much customization should we expect during the PoC and Pilot phases?

The PoC typically involves minimal customization (one key feature), while the Pilot allows for more extensive customization to meet specific needs.

### What are the main differences between a PoC and a Pilot?

The main differences lie in duration, scope, data used, system integration, and user involvement. A PoC is shorter (4-8 weeks) with a limited scope, uses mock data, and has no system integrations. A Pilot is longer (3-6 months), more comprehensive, uses real data, includes system integrations, and involves extensive user training and involvement.

### How long does each phase typically last?

A PoC typically lasts 4-8 weeks, while a Pilot usually spans 3-6 months.

### What kind of team do we need for each phase?

A PoC usually requires a smaller team of 3-5 people, including a Project Manager, Developer, Business Analyst, and Stakeholder Representative. A Pilot needs a larger team of 8-12 people, with additional roles such as multiple Developers, Integration Specialist, Change Management Specialist, Trainer, and Support Staff.

### How do we measure the success of a PoC or Pilot?

Success is measured against predefined criteria. For a PoC, this includes demonstrating core capabilities, receiving positive stakeholder feedback, and aligning with project objectives. For a Pilot, criteria often include system uptime, user adoption rates, data accuracy, process efficiency improvements, and beneficiary satisfaction.

### What happens after a successful Pilot?

After a successful Pilot, the next step is typically planning for a full-scale implementation of OpenSPP across the intended scope of your social protection program.
</file>

<file path="docs/overview/features/registry_data_management.md">
---
myst:
  html_meta:
    "description": "Overview of how OpenSPP manages secure and flexible registry data for social protection programs, including individuals, groups, and data validation."
    "property=og:description": "Overview of how OpenSPP manages secure and flexible registry data for social protection programs, including individuals, groups, and data validation."
    "property=og:title": "Feature Area: Registry & Data Management"
    "keywords": "OpenSPP, Registry, Data Management, Social Registry, Farmer Registry, Data Protection, Beneficiary Management"
---

# Feature area: Registry & data management

## What is registry & data management in OpenSPP?

At its core, OpenSPP's registry securely organizes essential information about the people and groups (like households or farmer cooperatives) your programs serve. It's the system of record that helps you know who is who, understand their basic situation, and manage their information reliably over time. This involves collecting the right details, ensuring they are accurate, and keeping them safe.

## Why is good data management important for your programs?

Having well-managed registry data is fundamental to running effective and accountable social protection programs. It directly supports:

* **Targeting accuracy:** Reliable data helps ensure that benefits reach the intended recipients, minimizing errors of inclusion and exclusion.
* **Operational efficiency:** Streamlines processes like enrollment and calculating benefits, reducing administrative workload and potential delays.
* **Program coordination:** Creates a consistent data foundation that can be potentially leveraged across multiple programs, reducing repetitive data collection for beneficiaries.
* **Informed decision-making:** Provides the basis for accurate monitoring, evaluation, and reporting, allowing you to track progress and adapt program strategies effectively.
* **Accountability and trust:** Demonstrates responsible handling of personal information, upholding privacy standards and building confidence among beneficiaries and stakeholders.
* **Responsiveness:** Enables programs to maintain up-to-date information, which is crucial for adapting to beneficiaries' changing circumstances or responding during crises.

## How OpenSPP supports registry & data management

OpenSPP provides the tools and structure needed for effective data management:

* **Flexible registry:** You can register and manage data for both individuals and different types of groups.
* **Customizable data collection:** Define specific fields necessary for your programs beyond standard demographic information.
* **Data quality tools:** Incorporates validation steps during data entry and import processes.
* **Unique identification:** Supports various ID types and includes features to help identify and manage potential duplicates.
* **Relationship tracking:** Allows you to define and track relationships, such as family members within a household or farmers within a cooperative.
* **Structured updates:** Offers a managed process for requesting, approving, and applying changes to registrant information.
* **Secure foundation:** Emphasizes data protection and includes features for managing user consent.
* **Data handling:** Provides tools for importing existing datasets and exporting information for analysis or reporting.
* **Historical context:** Can log significant changes or events related to registrant data over time.

## Learn more

* **To understand key concepts:** See {doc}`/explanation/registry_key_concepts` and {doc}`/explanation/data_protection`.
* **For step-by-step instructions on registering users:** See {doc}`/tutorial/user_guides/register_new_individual`.
* **To learn how to import/export data:** See {doc}`/howto/user_guides/import_export_data`.
* **For technical details on registry modules:** See {doc}`/reference/modules/g2p_registry_base`, {doc}`/reference/modules/g2p_registry_individual`, {doc}`/reference/modules/g2p_registry_group`, {doc}`/reference/modules/g2p_registry_membership`.
* **For developer guides on customization:** See {doc}`/developer_guide/customization/customizing_registry` and {doc}`/developer_guide/customization/customizing_fields`.
</file>

<file path="docs/overview/use_cases/farmer_registry.md">
---
html_meta:
  "title": "Farmer Registry with OpenSPP"
  "description": "Overview of Farmer Registries, key principles, and how OpenSPP helps implement them, guiding users to relevant documentation features."
  "property=og:description": "Overview of Farmer Registries, key principles, and how OpenSPP helps implement them, guiding users to relevant documentation features."
  "property=og:title": "Farmer Registry with OpenSPP"
  "keywords": "OpenSPP, Farmer Registry, Agricultural Registry, Farm Management, Social Protection, GIS, Data Management, Interoperability"
---

# Farmer Registry with OpenSPP

This page explains how OpenSPP helps you implement effective Farmer Registries, outlining key principles and guiding you to relevant features. It serves as an entry point for users interested specifically in this use case.

### 1. Introduction: What is a Farmer Registry?

*   **General Definition:** A :term:`farmer registry` is a system designed to collect, store, and manage information about :term:`farm holdings` (the land and associated assets) and :term:`farmholders` (the individuals or groups managing the farms).
    
*   **Purpose:** The primary goals of implementing a farmer registry include supporting better planning and coordination for agricultural and :term:`social protection` programs, helping to address rural poverty and food insecurity, and aiding climate change adaptation efforts. Globally, :term:`agricultural censuses` and registries are common tools for administration and policy-making.
    
*   **OpenSPP's Role:** OpenSPP offers a flexible, modular, :term:`open-source software` platform that enables governments and organizations to build and manage robust Farmer Registries. A key strength is its ability to integrate these registries with other critical systems, such as social protection programs (:term:`SP-MIS`) and land administration databases.
    
*   **Further Reading:** For a deeper dive into the concept, see {doc}`/overview/concepts/farmer_registry`.
    

### 2. Key Principles & Components of a Farmer Registry (General)

Implementing a successful Farmer Registry involves considering several key components and principles:

*   **Core Data:** Typical data collected includes:
    
    *   _:term:`Farm Holder` Information:_ Demographics (age, gender), :term:`household` composition, socio-economic indicators.
        
    *   _:term:`Farm Holding` Details:_ Geographic location (GPS coordinates, boundaries), land parcel details, total size, ownership or tenure status (owned, rented, communal).
        
    *   _:term:`Agricultural Activities`:_ Types of crops grown, livestock raised, aquaculture practices.
        
    *   _:term:`Assets & Inputs`:_ Ownership of machinery, access to irrigation, use of fertilizers/pesticides.
        
*   **Essential Functions:** Common operational functions involve:
    
    *   _:term:`Data Collection & Intake`:_ Methods can range from comprehensive :term:`census sweep` approaches to :term:`on-demand` registration at local offices or via mobile applications.
        
    *   _:term:`Data Validation` & :term:`Data Verification`:_ Ensuring data accuracy through cross-checking with official documents (ID cards, land titles), other administrative systems, or community validation processes.
        
    *   _:term:`Dynamic Updates`:_ Recognizing that farm situations change, registries should allow for periodic updates or continuous registration to maintain data relevance.
        
    *   _:term:`Reporting & Analytics`:_ The ability to generate reports and analyze registry data is crucial for policy design and program monitoring.
        
*   **Integration Potential:** The value of a Farmer Registry is significantly enhanced when linked with other systems:
    
    *   _:term:`Social Protection Systems (SP-MIS)`:_ Enables targeted support, coordination of agricultural and social benefits.
        
    *   _:term:`National ID` / :term:`CRVS` Systems:_ Facilitates farmer verification and helps prevent duplicate registrations (:term:`deduplication`).
        
    *   _:term:`Land Administration Systems`:_ Provides clarity on land tenure and rights.
        
    *   _:term:`GIS` & Remote Sensing Data:_ Allows for spatial analysis, crop monitoring, and verification of land use.
        
    *   _:term:`Climate & Weather Data`:_ Supports early warning systems and climate adaptation planning.
        
*   **Key Considerations:** Implementers face challenges such as:
    
    *   _:term:`Data Privacy` & Security:_ Protecting sensitive :term:`personal data` and farm data.
        
    *   _:term:`Inclusivity`:_ Ensuring smallholders, tenants, landless farmers, and women farmers are adequately represented.
        
    *   _:term:`Data Quality`:_ Maintaining accuracy and completeness over time.
        
    *   _:term:`Cost & Sustainability`:_ Managing the resources required for setup and maintenance.
        

### 3. Implementing a Farmer Registry with OpenSPP

OpenSPP's modular architecture provides a strong foundation for building a Farmer Registry tailored to specific needs. Here’s how its features map to the general principles:

*   **Registry Core:** Modules like `g2p_registry_base`, `g2p_registry_individual`, `g2p_registry_group`, and `g2p_registry_membership` provide the tools to manage farmers (as individuals) and farmer groups/households/cooperatives (as groups), along with their relationships.
    
*   **Farmer Specifics:** The `spp_farmer_registry_base` module extends the core registry with data models specifically designed for farmer attributes, farm details, activities, assets, etc.
    
*   **Land Data:** The `spp_land_record` module allows detailed management of land parcels associated with farms, while `spp_area_gis` enables mapping and spatial analysis of these records.
    
*   **Customization:** `spp_custom_field` allows administrators to easily add country- or program-specific fields to capture unique data requirements without needing code changes.
    
*   **Data Collection:** OpenSPP supports various data intake methods, including bulk import from spreadsheets (`.xlsx`, `.csv`), manual entry, and potential integration with mobile data collection tools like CommCare.
    
*   **Interoperability:** The :term:`API` layer (`spp_api`, `spp_api_records`) enables secure data exchange with external systems (National ID, Land Admin, SP-MIS, etc.).
    
*   **Detailed Features:** Explore features relevant to Farmer Registries in {doc}`/overview/features/registry_data_management`.
    
*   **Relevant Modules:** Find detailed documentation for key modules in the {doc}`/reference/modules/index`.
    

### 4. Getting Started (Links)

*   **Installation:** Start with the general OpenSPP installation guide: {doc}`/getting_started/index`.
    
*   **Initial Setup:**
    
    *   Setting up the Farmer Registry
        
    *   Configuring Areas
        
    *   Importing Initial Data: {doc}`/user_guide/registry_management/import_export_data`
        

### 5. Common Tasks & User Guides (Links)

*   **Registry Management:**
    
    *   Registering Farmers/Groups: {doc}`/user_guide/registry_management/register_individual`
        
    *   Managing Group Memberships
        
    *   Importing/Exporting Data: {doc}`/user_guide/registry_management/import_export_data`
        
*   **Land & GIS:**
    
    *   Managing Land Records: `[TODO: Link to How-to Guide for Managing Land Records - Needs Content?]`
        
    *   Using Map Features: `[TODO: Link to How-to Guide for Using Map Features - Needs Content?]`
        
*   **Administration:**
    
    *   Managing Custom Fields: `[TODO: Link to How-to Guide for Managing Custom Fields]`
        
    *   User Access Control: {doc}`/user_guide/administration/user_access`. `[TODO: Verify link]`
        

### 6. Development & Customization (Links)

*   Customizing Registry Fields/Indicators: {doc}`/developer_guide/customization/customizing_fields`. `[TODO: Verify link]`
    
*   Integrating with GIS: `[TODO: Link to Developer Guide for GIS Integration]`
    
*   Module Development Overview: {doc}`/developer_guide/module_development`. `[TODO: Verify link]`
    
*   Relevant Modules: See {doc}`/reference/modules/index` (especially `spp_farmer_registry_base`, `spp_land_record`, `spp_area_gis`). `[TODO: Verify link]`
    
*   API Usage: {doc}`/developer_guide/api_usage/index`. `[TODO: Verify link]`
    

### 7. Diagram: OpenSPP Farmer Registry Ecosystem

A Farmer Registry built with OpenSPP typically interacts with various internal modules and external systems:

```mermaid

graph LR
    subgraph ExternalSystems["External Systems"]
        direction LR
        A[National ID / CRVS]
        B[Land Admin System]
        C[GIS Data / Satellite]
        D[Climate Data]
        E[Social Programs / SP-MIS]
        F[Agricultural Services]
    end

    subgraph OpenSPPPlatform["OpenSPP Platform"]
        direction TB
        subgraph CoreRegistry["Core Registry"]
            direction TB
            G[Registrant Data\nFarmers, Groups] --> H(Membership Mgmt)
        end
        subgraph FarmerRegistryModules["Farmer Registry Modules"]
             direction TB
             I[Farmer Attributes] --> J(Farm Details)
             J --> K(Land Records)
             K --> L(Agri Activities)
             L --> M(Assets/Inputs)
        end
        subgraph SupportingModules["Supporting Modules"]
             direction TB
             N[GIS Module] --> O(Custom Fields)
             O --> P(User Mgmt / Audit)
        end
        Q(Data Collection Tools\n - Mobile App\n - Bulk Import\n - Manual Entry)
        R(API Layer)
        S(Reporting / Dashboards)
    end

    Q --> G
    G --> I
    I --> N
    N --> K 

    A <--> R
    B <--> R
    C --> N
    D --> R 

    R <--> E
    R <--> F
    R --> S

    style G fill:#f9f,stroke:#333,stroke-width:2px
    style I fill:#ccf,stroke:#333,stroke-width:2px
    style K fill:#cfc,stroke:#333,stroke-width:2px
    style N fill:#fcf,stroke:#333,stroke-width:2px
    style R fill:#ff9,stroke:#333,stroke-width:2px
    style Q fill:#eee,stroke:#333,stroke-width:1px
    style S fill:#eee,stroke:#333,stroke-width:1px
    
```

_Caption:_ Functional overview of OpenSPP Farmer Registry components and integrations.

### 8. Further Reading & See Also

*   Detailed Conceptual Explanation: {doc}`/overview/concepts/farmer_registry`. `[TODO: Verify link]`
    
*   Other Use Cases: {doc}`/overview/use_cases/index`. `[TODO: Verify link]`
    
*   Core Concepts Overview: {doc}`/overview/concepts/index`. `[TODO: Verify link]`
    
*   `[TODO: Add optional links to relevant external standards or resources, e.g., FAO guidelines]`
</file>

<file path="docs/conf.py">
# Configuration file for the Sphinx documentation builder.
# OpenSPP Documentation build configuration file


# -- Path setup --------------------------------------------------------------
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup

from datetime import datetime
import os
import re
import sys
import logging

from pathlib import Path
_logger = logging.getLogger(__name__)


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath("."))



#=== Odoo configuration ===#


odoo_current_branch = '15.0'
# `current_version` is the Odoo version linked to the current branch.
# E.g., saas-15.4 -> 15.4; 12.0 -> 12; master -> master (*).
odoo_current_version = odoo_current_branch.replace('saas-', '').replace('.0', '')
# `current_major_branch` is the technical name of the major branch before the current branch.
# E.g., saas-15.4 -> 15.0; 12.0 -> 12.0; master -> master (*).
odoo_current_major_branch = re.sub(r'\.\d', '.0', odoo_current_branch.replace('saas-', ''))
# `current_major_version` is the Odoo version linked to the current major branch.
# E.g., saas-15.4 -> 15; 12.0 -> 12; master -> master (*).
odoo_current_major_version = odoo_current_major_branch.replace('.0', '')
# (*): We don't care for master.


odoo_source_read_replace_vals = {
    'BRANCH': odoo_current_branch,
    'CURRENT_BRANCH': odoo_current_branch,
    'CURRENT_VERSION': odoo_current_version,
    'CURRENT_MAJOR_BRANCH': odoo_current_major_branch,
    'CURRENT_MAJOR_VERSION': odoo_current_major_version,
    'GITHUB_PATH': f'https://github.com/odoo/odoo/blob/{odoo_current_branch}',
    'GITHUB_ENT_PATH': f'https://github.com/odoo/enterprise/blob/{odoo_current_branch}',
}


# Search for the directory of odoo sources to know whether autodoc should be used on the dev doc
# odoo_sources_candidate_dirs = (Path('odoo'), Path('../odoo'), Path('../../dockerdoo/src/odoo'))
odoo_sources_candidate_dirs = (Path('../submodules/odoo'), )
odoo_sources_dirs = [
    d for d in odoo_sources_candidate_dirs if d.is_dir() and (d / 'odoo-bin').exists()
]
odoo_dir_in_path = False
print (odoo_sources_dirs)


if not odoo_sources_dirs:
    _logger.warning(
        "Could not find Odoo sources directory in neither of the following folders:\n"
        "%(dir_list)s\n"
        "The 'Developer' documentation will be built but autodoc directives will be skipped.\n"
        "In order to fully build the 'Developer' documentation, clone the repository with "
        "`git clone https://github.com/odoo/odoo` or create a symbolic link.",
        {'dir_list': '\n'.join([f'\t- {d.resolve()}' for d in odoo_sources_candidate_dirs])},
    )
else:
    if (3, 6) < sys.version_info < (3, 7):
        # Running odoo needs python 3.7 min but monkey patch version_info to be compatible with 3.6.
        sys.version_info = (3, 7, 0)
    odoo_dir = odoo_sources_dirs[0].resolve()
    odoo_source_read_replace_vals['ODOO_RELPATH'] = '/../' + str(odoo_sources_dirs[0])
    sys.path.insert(0, str(odoo_dir))
    print(f"Found Odoo sources in {odoo_dir}.")
    import odoo.addons

    # # import my addons
    # if "dockerdoo" in str(odoo_dir):
    #     print("Found Odoo sources in dockerdoo dev environment.")
    #     my_addons_dir = os.path.abspath(os.path.join(odoo_dir, '..', '..', 'custom'))
    #     my_addons_dir = Path(my_addons_dir)
    #     for folder in my_addons_dir.iterdir():
    #         if folder.is_dir():
    #             sys.path.insert(0, str(folder))
    #             odoo.addons.__path__.append(str(folder))
    #             print(f"Found custom addon in {folder}.")


    if "submodules" in str(odoo_dir):
        print("Found Odoo sources in submodules dev environment.")
        my_addons_dir = os.path.abspath(os.path.join(odoo_dir, '..'))
        my_addons_dir = Path(my_addons_dir)
        for folder in my_addons_dir.iterdir():
            if folder.is_dir() and not folder.name == 'odoo':
                sys.path.insert(0, str(folder))
                odoo.addons.__path__.append(str(folder))
                print(f"Found custom addon in {folder}.")

    odoo.addons.__path__.append(str(odoo_dir) + '/addons')
    from odoo import release as odoo_release  # Don't collide with Sphinx's 'release' config option
    odoo_version = odoo_release.version.replace('~', '-') \
        if 'alpha' not in odoo_release.version else 'master'
    
    _logger.info(
        "Found Odoo sources in %(directory)s matching documentation version '%(version)s'.",
        {'directory': odoo_dir, 'version': odoo_release},
    )
    odoo_dir_in_path = True

#### End of Odoo


# -- Project information -----------------------------------------------------

project = "OpenSPP Documentation"
copyright = "OpenSPP"
author = "The OpenSPP community"
trademark_name = "OpenSPP"
now = datetime.now()
year = str(now.year)

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = "1.1"
# The full version, including alpha/beta/rc tags.
release = "1.1"

# -- General configuration ----------------------------------------------------

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# Add any Sphinx extension module names here, as strings.
# They can be extensions coming with Sphinx (named "sphinx.ext.*")
# or your custom ones.
extensions = [
    "myst_parser",
    "sphinx.ext.autodoc",
    "sphinx.ext.ifconfig",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.githubpages",
    "sphinx_copybutton",
    "sphinx_design",
    "sphinx_sitemap",
    "sphinxcontrib.httpdomain", 
    "sphinxcontrib.httpexample",
    'sphinxcontrib.googleanalytics',
    "sphinxcontrib.video",
    "sphinxext.opengraph",
    "sphinx.ext.viewcode",
    "sphinx.ext.autosummary",
    "sphinx.ext.graphviz",
    "sphinx_tabs.tabs",
    "notfound.extension",
]

sphinx_tabs_disable_tab_closing = True
sphinx_tabs_disable_css_loading = True

# -- sphinx-reredirects configuration ----------------------------------
# Redirect configuration for moved or renamed pages
# Format: "old-path": "new-path.html"
# Paths are relative to the documentation root
# NOTE: sphinx-reredirects is temporarily disabled due to version conflicts
# redirects = {
#     "best_practices/index.md": "developer_guide/best_practices.html",
#     "community_and_support/code_of_conduct.md": "community/code_of_conduct.html",
#     "community_and_support/how_to_contribute_to_the_project.md": "community/contributing.html",
#     "community_and_support/index.md": "community/index.html",
#     "community_and_support/l3_support.md": "community/support.html",
#     "community_and_support/license.md": "community/license.html",
#     "community_and_support/security_report.md": "community/security_reporting.html",
#     "contributing/admins.md": "community/contributing.html",
#     "contributing/authors.md": "community/contributing.html",
#     "contributing/index.md": "community/contributing.html",
#     "contributing/myst-reference.md": "community/contributing.html",
#     "contributing/setup-build.md": "community/contributing.html",
#     "contributing/sphinx-extensions.md": "community/contributing.html",
#     "explanation/Registering_individuals_and_groups.md": "overview/concepts/registrant_concepts.html",
#     "explanation/data_collection_validation.md": "overview/concepts/data_collection_validation.html",
#     "explanation/data_protection.md": "overview/concepts/data_protection.html",
#     "explanation/digital_public_infrastructure.md": "overview/concepts/digital_public_infrastructure.html",
#     "explanation/farmer_registry.md": "overview/concepts/farmer_registry.html",
#     "explanation/index.md": "overview/concepts/index.html",
#     "explanation/integrated_beneficiary_registry.md": "overview/concepts/integrated_beneficiary_registry.html",
#     "explanation/registry_key_concepts.md": "overview/concepts/registry_key_concepts.html",
#     "explanation/security_archi.md": "reference/technical/security.html",
#     "explanation/social_protection_management_information_systems.md": "overview/concepts/sp_mis.html",
#     "explanation/social_registry.md": "overview/concepts/social_registry.html",
#     "explanation/user_mgt.md": "overview/concepts/user_management.html",
#     "getting_started/creating_a_program.md": "user_guide/program_management/create_program.html",
#     "getting_started/installation_guide.md": "getting_started/installation_docker.html",
#     "glossary.rst": "reference/glossary.html",
#     "howto/developer_guides/beneficiary_keycloak.md": "developer_guide/integrations/keycloak_beneficiary_portal.html",
#     "howto/developer_guides/custom_areas.md": "developer_guide/customization/customizing_areas.html",
#     "howto/developer_guides/custom_audit.md": "developer_guide/customization/customizing_audit.html",
#     "howto/developer_guides/custom_cr.md": "developer_guide/customization/customizing_change_requests.html",
#     "howto/developer_guides/custom_cycle.md": "developer_guide/customization/customizing_cycles.html",
#     "howto/developer_guides/custom_entitlement.md": "developer_guide/customization/customizing_entitlements.html",
#     "howto/developer_guides/custom_fields_indicators.md": "developer_guide/customization/customizing_fields.html",
#     "howto/developer_guides/custom_program.md": "developer_guide/customization/customizing_programs.html",
#     "howto/developer_guides/custom_registry.md": "developer_guide/customization/customizing_registry.html",
#     "howto/developer_guides/custom_registry_tab_fields.md": "developer_guide/customization/customizing_registry.html",
#     "howto/developer_guides/custom_service_points.md": "developer_guide/customization/customizing_service_points.html",
#     "howto/developer_guides/dci.md": "developer_guide/integrations/dci.html",
#     "howto/developer_guides/development_setup.md": "developer_guide/setup.html",
#     "howto/developer_guides/esignet.md": "developer_guide/integrations/esignet.html",
#     "howto/developer_guides/implmenting_pmt.md": "developer_guide/customization/implementing_pmt.html",
#     "howto/developer_guides/indicators.md": "developer_guide/customization/customizing_indicators.html",
#     "howto/developer_guides/module.md": "developer_guide/module_development.html",
#     "howto/developer_guides/oidc.md": "developer_guide/integrations/oidc.html",
#     "howto/developer_guides/rest_api.md": "developer_guide/api_usage/rest_api.html",
#     "howto/developer_guides/setting_up_using_pypi.md": "getting_started/installation_pypi.html",
#     "howto/developer_guides/troubleshooting.md": "developer_guide/troubleshooting.html",
#     "howto/developer_mode.md": "developer_guide/developer_mode.html",
#     "howto/index.md": "user_guide/index.html",
#     "howto/translation.md": "community/contributing.html",
#     "howto/user_guides/administrating_role_based_access.md": "user_guide/administration/user_access.html",
#     "howto/user_guides/enroll_beneficiaries.md": "user_guide/program_management/enroll_beneficiaries.html",
#     "howto/user_guides/export_registrant_data.md": "user_guide/registry_management/import_export_data.html",
#     "howto/user_guides/implementing_pmt.md": "user_guide/program_management/implementing_pmt.html",
#     "howto/user_guides/import_registrant_data.md": "user_guide/registry_management/import_export_data.html",
#     "howto/user_guides/register_new_individual.md": "user_guide/registry_management/register_individual.html",
#     "howto/user_guides/setting_up_farmer_registry.md": "user_guide/registry_management/setting_up_farmer_registry.html",
#     "howto/user_guides/setting_up_service_points.md": "user_guide/administration/service_points.html",
#     "technical_reference/apis.md": "developer_guide/api_usage/index.html",
#     "technical_reference/architecture.md": "developer_guide/architecture.html",
#     "technical_reference/audit_logs.md": "reference/technical/audit_logs.html",
#     "technical_reference/backup.md": "reference/technical/backup.html",
#     "technical_reference/code.md": "developer_guide/best_practices.html",
#     "technical_reference/extensibility.md": "overview/concepts/extensibility.html",
#     "technical_reference/external_api.rst": "developer_guide/api_usage/external_api_xmlrpc.html",
#     "technical_reference/g2p-connect.md": "developer_guide/integrations/g2p-connect.html",
#     "technical_reference/index.md": "reference/index.html",
#     "technical_reference/integrations.md": "overview/features/integrations_apis.html",
#     "technical_reference/monitoring.md": "reference/technical/monitoring.html",
#     "technical_reference/openg2p.md": "overview/concepts/openg2p.html",
#     "technical_reference/performance_optimization.md": "reference/technical/performance.html",
#     "technical_reference/programs/concepts.md": "developer_guide/architecture.html",
#     "technical_reference/programs/cycle_manager.rst": "reference/technical/cycle_manager.html",
#     "technical_reference/programs/dashboards.md": "user_guide/reporting_dashboards.html",
#     "technical_reference/programs/deduplication_manager.md": "reference/technical/deduplication_manager.html",
#     "technical_reference/programs/eligibility_manager.rst": "reference/technical/eligibility_manager.html",
#     "technical_reference/programs/entitlement_manager.rst": "reference/technical/entitlement_manager.html",
#     "technical_reference/programs/index.md": "reference/technical/index.html",
#     "technical_reference/programs/notification_manager.rst": "reference/technical/notification_manager.html",
#     "technical_reference/programs/program_manager.rst": "reference/technical/program_manager.html",
#     "technical_reference/release_management.md": "community/release_management.html",
#     "technical_reference/security.md": "reference/technical/security.html",
#     "tutorial/access_management.md": "user_guide/administration/user_access.html",
#     "tutorial/audit_log.md": "user_guide/administration/using_audit_logs.html",
#     "tutorial/change_requests.md": "user_guide/registry_management/using_change_requests.html",
#     "tutorial/consent_management.md": "user_guide/consent_management.html",
#     "tutorial/custom_fields.md": "user_guide/administration/managing_custom_fields.html",
#     "tutorial/dashboards_and_reports.md": "user_guide/reporting_dashboards.html",
#     "tutorial/event_data.md": "user_guide/registry_management/using_event_data.html",
#     "tutorial/geotargeting.md": "user_guide/program_management/using_geotargeting.html",
#     "tutorial/grievance_redressal_management.md": "user_guide/grievance_management.html",
#     "tutorial/hardware_integration.md": "user_guide/administration/hardware_integration.html",
#     "tutorial/index.md": "user_guide/index.html",
#     "tutorial/indicators.md": "user_guide/program_management/using_indicators.html",
#     "tutorial/managing_social_protection_programs.md": "user_guide/program_management/index.html",
#     "tutorial/programs/export_beneficiaries.md": "user_guide/program_management/export_beneficiaries.html",
#     "tutorial/programs_and_cycles.md": "user_guide/program_management/programs_overview.html",
#     "tutorial/proxy_means_test.md": "user_guide/program_management/using_pmt.html",
#     "tutorial/user_guides/administrating_role_based_access.md": "user_guide/administration/user_access.html",
#     "tutorial/user_guides/allocate_funds.md": "user_guide/program_management/allocate_funds.html",
#     "tutorial/user_guides/configure_ID_generate_qr.md": "user_guide/registry_management/identity_management.html",
#     "tutorial/user_guides/configure_cash_entitlements.md": "user_guide/program_management/configure_entitlements.html",
#     "tutorial/user_guides/create_program_cycle_prepare_entitlements.md": "user_guide/program_management/create_cycle.html",
#     "tutorial/user_guides/create_social_protection_program.md": "user_guide/program_management/create_program.html",
#     "tutorial/user_guides/enroll_beneficiaries.md": "user_guide/program_management/enroll_beneficiaries.html",
#     "tutorial/user_guides/export_registrant_data.md": "user_guide/registry_management/import_export_data.html",
#     "tutorial/user_guides/import_areas.md": "user_guide/administration/import_areas.html",
#     "tutorial/user_guides/import_registrant_data.md": "user_guide/registry_management/import_export_data.html",
#     "tutorial/user_guides/point_of_sales.md": "user_guide/pos_usage.html",
#     "tutorial/user_guides/register_new_individual.md": "user_guide/registry_management/register_individual.html",
#     "tutorial/user_guides/setting_up_service_points.md": "user_guide/administration/service_points.html",
#     "tutorial/vouchers.md": "user_guide/program_management/using_vouchers.html",
# }

# If true, the Docutils Smart Quotes transform, originally based on SmartyPants
# (limited to English) and currently applying to many languages, will be used
# to convert quotes and dashes to typographically correct entities.
# Note to maintainers: setting this to `True` will cause contractions and
# hyphenated words to be marked as misspelled by spellchecker.
smartquotes = False

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = "sphinx.pygments_styles.PyramidStyle"
pygments_style = "sphinx"

# Options for the linkcheck builder
# Ignore localhost
linkcheck_ignore = [
    r"http://localhost",
    r"http://0.0.0.0",
    r"http://127.0.0.1",
    r"^/_static/",
    r"https://www.researchgate.net/",
    
]
linkcheck_anchors = True
linkcheck_timeout = 10
linkcheck_retries = 2
# linkcheck_timeout = 5
# linkcheck_retries = 1

# The suffix of source filenames.
source_suffix = {
    ".md": "markdown",
    ".rst": "restructuredtext",
}

default_role = 'literal'

# The master toctree document.
master_doc = "index"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    "spelling_wordlist.txt",
    "**/CHANGES.rst",
    "**/CONTRIBUTORS.rst",
    "**/LICENSE.rst",
    "**/README.rst",
]

html_js_files = ["patch_scrollToActive.js", "search_shortcut.js"]

html_extra_path = [
    "robots.txt",
]

html_static_path = [
    "_static",  # Last path wins. So this one will override the default theme's static files.
]

# -- Options for myST markdown conversion to html -----------------------------

# For more information see:
# https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
myst_enable_extensions = [
    "deflist",  # You will be able to utilise definition lists
    # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#definition-lists
    "linkify",  # Identify “bare” web URLs and add hyperlinks.
    "colon_fence",  # You can also use ::: delimiters to denote code fences,\
    #  instead of ```.
    "substitution", # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#substitutions-with-jinja2
    "html_image",  # For inline images. See https://myst-parser.readthedocs.io/en/latest/syntax/optional.html
]

myst_substitutions = {
    "postman_basic_auth": "![](../_static/img/postman_basic_auth.png)",
    "postman_headers": "![](../_static/img/postman_headers.png)",
    "postman_request": "![](../_static/img/postman_request.png)",
    "postman_response": "![](../_static/img/postman_response.png)",
    "postman_retain_headers": "![](../_static/img/postman_retain_headers.png)",
    "fawrench": '<span class="fa fa-wrench" style="font-size: 1.6em;"></span>',
}

# -- Intersphinx configuration ----------------------------------

# This extension can generate automatic links to the documentation of objects
# in other projects. Usage is simple: whenever Sphinx encounters a
# cross-reference that has no matching target in the current documentation set,
# it looks for targets in the documentation sets configured in
# intersphinx_mapping. A reference like :py:class:`zipfile.ZipFile` can then
# linkto the Python documentation for the ZipFile class, without you having to
# specify where it is located exactly.
#
# https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html
#
# Note that OpenSPP Documentation imports documentation from several remote repositories.
# These projects need to build their docs as part of their CI/CD and testing.
# We use Intersphinx to resolve targets when either the individual project's or
# the entire OpenSPP Documentation is built.
intersphinx_mapping = {
    "python": ("https://docs.python.org/3/", None),
    "odoo": ("https://www.odoo.com/documentation/15.0/", None),
}


# -- GraphViz configuration ----------------------------------

graphviz_output_format = "svg"


# -- OpenGraph configuration ----------------------------------

ogp_site_url = "https://docs.openspp.org/"
ogp_description_length = 200
ogp_image = "https://docs.openspp.org/_static/openspp_logo.png"
ogp_site_name = "OpenSPP Documentation"
ogp_type = "website"
ogp_custom_meta_tags = [
    '<meta property="og:locale" content="en_US" />',
]


# -- sphinx_copybutton -----------------------
copybutton_prompt_text = r"^ {0,2}\d{1,3}"
copybutton_prompt_is_regexp = True


# -- sphinx-notfound-page configuration ----------------------------------

notfound_urls_prefix = ""
notfound_template = "404.html"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_book_theme"

# html_logo = "_static/logo.svg"
html_favicon = "_static/icon_192.png"

html_css_files = ["custom.css", ("print.css", {"media": "print"})]

# See http://sphinx-doc.org/ext/todo.html#confval-todo_include_todos
todo_include_todos = True

# Announce that we have an opensearch plugin
# https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-html_use_opensearch
html_use_opensearch = "https://docs.openspp.org"

html_sidebars = {
    "**": [
        "sidebar-logo.html",
        "search-field.html",
        "sbt-sidebar-nav.html",
    ]
}

html_theme_options = {
    "path_to_docs": "docs",
    "repository_url": "https://github.com/openspp/documentation",
    "repository_branch": "main",
    "use_repository_button": True,
    "use_issues_button": True,
    "use_edit_page_button": True,
    "search_bar_text": "Search",
    "extra_navbar": """
    <p class="openspporglink">
        <a href="https://openspp.org">
            <img src="/_static/openspp_logo.png" alt="openspp.org" /> openspp.org</a>
    </p>""",
    "extra_footer": """<p>The text and illustrations in this website are licensed by the OpenSPP Project under a Creative Commons Attribution 4.0 International license. All other trademarks are owned by their respective owners.</p>
    """,
}

googleanalytics_id = 'G-RS4T4ZPG52'

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
html_title = "%(project)s v%(release)s" % {"project": project, "release": release}

# If false, no index is generated.
html_use_index = True

# Used by sphinx_sitemap to generate a sitemap
html_baseurl = "https://docs.openspp.org/"
sitemap_url_scheme = "{link}"

# -- Options for HTML help output -------------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "OpenSPPDocumentation"


# -- Options for LaTeX output -------------------------------------------------

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual])
latex_documents = [
    (
        "index",
        "OpenSPPDocumentation.tex",
        "OpenSPP Documentation",
        "The OpenSPP community",
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
latex_logo = "_static/logo_2x.png"


# suggest edit link
# remark: {{ file_name }} is mandatory in "edit_page_url_template"
html_context = {
    "edit_page_url_template": "https://docs.openspp.org/contributing/?{{ file_name }}#making-contributions-on-github",
    "display_github": True,
    "github_user": "openspp",  # Username
    "github_repo": "documentation",  # Repo name
    "github_version": "main",  # Version
    "conf_py_path": "/docs/",  # Path in the checkout to the docs root
}

# An extension that allows replacements for code blocks that
# are not supported in `rst_epilog` or other substitutions.
# https://stackoverflow.com/a/56328457/2214933
def source_replace(app, docname, source):
    result = source[0]
    for key in app.config.source_replacements:
        result = result.replace(key, app.config.source_replacements[key])
    source[0] = result


def modify_sitemap(app, exception):
    if exception is None:  # Only run if the build was successful
        sitemap_path = os.path.join(app.outdir, 'sitemap.xml')
        if os.path.exists(sitemap_path):
            tree = ET.parse(sitemap_path)
            root = tree.getroot()
            namespace = {'ns': 'http://www.sitemaps.org/schemas/sitemap/0.9'}

            for url in root.findall('ns:url', namespace):
                loc = url.find('ns:loc', namespace)
                if loc.text and loc.text.endswith('/index.html'):
                    loc.text = loc.text[:-10]  # Remove 'index.html'

            tree.write(sitemap_path, xml_declaration=True, encoding='utf-8')


def update_html_files(app, exception):
    if exception is None:  # Only run if the build was successful
        for root, dirs, files in os.walk(app.outdir):
            for file in files:
                if file.endswith('.html'):
                    file_path = os.path.join(root, file)
                    with open(file_path, 'r', encoding='utf-8') as file:
                        soup = BeautifulSoup(file, 'html.parser')

                    # Update the canonical link
                    canonical_link = soup.find('link', {'rel': 'canonical'})
                    if canonical_link and canonical_link['href'].endswith('/index.html'):
                        canonical_link['href'] = canonical_link['href'][:-10]

                    # Update internal reference links
                    for a_tag in soup.find_all('a', {'class': 'reference internal'}):
                        href = a_tag.get('href', '')
                        if href.endswith('index.html'):
                            a_tag['href'] = href[:-10]

                    # update home logo link
                    home_link = soup.find('a', {'class': 'navbar-brand text-wrap'})
                    if home_link and home_link['href'].endswith('/index.html'):
                        home_link['href'] = home_link['href'][:-10]

                    # Write the changes back to the file
                    with open(file_path, 'w', encoding='utf-8') as file:
                        file.write(str(soup))

def setup(app):
    app.connect('build-finished', modify_sitemap)
    app.connect('build-finished', update_html_files)
</file>

<file path="docs/index.md">
---
myst:
  html_meta:
    "description": "This website is the HTML documentation of OpenSPP, an open source social protection platform."
    "property=og:description": "This website is the HTML documentation of OpenSPP, an open source social protection platform."
    "property=og:title": "OpenSPP Documentation"
    "keywords": "OpenSPP, open source, Documentation"
---

(index-label)=

# Welcome to OpenSPP!

OpenSPP was created to support the improvement and growth of effective social protection and humanitarian programs using open-source technologies. Our goal is to make it easier and more cost effective for governments and humanitarian agencies to digitalize their social protection systems.

OpenSPP is an open-source, modular and highly interoperable platform. The platform offers four main products: SP-MIS - a comprehensive management information system - plus a Social Registry, a Farmer Registry and a Disability Registry.

OpenSPP is a Digital Public Good. It is built on more than 60 open-source modules, and leverages and contributes to other open-source projects including OpenG2P, MOSIP, OpenCRVS, Odoo, Payment Hub EE, ID PASS, CommCare, Metabase and OpenFn

## SP-MIS

OpenSPP’s social protection management information system offers customizable building blocks for effective program implementation. Its modular design allows users to select only the components they need without an overhaul of existing systems.

![](images/openspp_bb.png)

## Social Registry

The Social Registry is a repository for the storage and management of data for planning and administering social protection. It supports intake, dynamic registration and needs assessment, and the efficient and secure sharing of data from the social registry with various social protection programs and services.

## Farmer Registry

The Farmer Registry stores and manages farm holding and farm owner data, supporting coordination between the social and agricultural sectors. It supports mass registrations and regular updates, and integrates data from Geographic Information Systems, national ID and CRVS.

## Disability Registry

The Disability Registry is an organized database for systematically recording and managing information about individuals with disabilities within a specific population or geographic area. It contains important information to facilitate services and assistance for people with disabilities, including access to social protection programs. **OpenSPP is set to release its open-source Disability Registry in the second quarter of 2024**.

## Guiding principles

Our guiding principles are informed by the Digital Public Goods Standard and the Principles for Digital Development.

- **User-centricity**: Our products are designed to be intuitive and pragmatic, recognizing that social protection operates in complex, resource-constrained and rapidly changing contexts.
- **Modularity**: The platform is composed of independent modules which allow for flexibility, scalability, and the interchangeability of components.
- **Privacy and security**: We rigorously uphold privacy and security standards - essential prerequisites for safeguarding Digital Public Goods.
- **Interoperability**: The platform is designed to support system interoperability - critical for the creation of cohesive and efficient digital ecosystems.
- **Inclusivity**: Our products can be customized to suit linguistic and cultural requirements, accessibility, digital literacy, and deployment in remote and less-developed contexts.

To begin using the platform, head to the [Getting Started](https://docs.openspp.org/getting_started/) section for an overview of how OpenSPP’s documentation is organized, and how to locate relevant information.

OpenSPP is currently in development, and everything is evolving rapidly thanks to the input provided by our users. If you have any questions or needs, please do not hesitate to contact the team through Github issues or the OpenSPP [website](https://openspp.org/).

```{toctree}
:maxdepth: 3
:hidden: true

overview/index
getting_started/index
user_guide/index
developer_guide/index
reference/index
community/index
```

```{toctree}
:caption: Appendices
:maxdepth: 1
:hidden: true

reference/glossary
```
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Overview

This is the documentation repository for OpenSPP - an open-source social protection platform. The documentation is built using Sphinx with MyST parser for Markdown support.

## Build Commands

### Setup Development Environment
```bash
# Create Python virtual environment and install dependencies
make deps

# This will:
# - Create a Python virtual environment
# - Install requirements from requirements_frozen.txt
# - Initialize git submodules (openg2p-program, openg2p-registry)
```

### Build Documentation
```bash
# Build HTML documentation
make html

# Live reload server for development (port 8050)
make livehtml

# Clean build artifacts
make clean

# Clean everything including virtual environment
make distclean
```

### Quality Checks
```bash
# Run Vale for style, grammar, and spell checks
make vale

# Check for broken links
make linkcheck

# Run all quality checks and build
make all  # Runs: clean, vale, linkcheck, html
```

### Testing
```bash
# Run tests (cleans then runs linkcheck)
make test
```

## Architecture

The documentation is organized into several key sections:

1. **docs/** - Main documentation source files
   - `getting_started/` - Installation guides and quickstart tutorials
   - `explanation/` - Conceptual documentation about registries, security, and core concepts
   - `howto/` - Step-by-step guides for developers and users
   - `tutorial/` - User-focused tutorials for common tasks
   - `technical_reference/` - API documentation, architecture details
   - `modules/` - Documentation for OpenSPP modules
   - `community_and_support/` - Contributing guidelines, support resources

2. **submodules/** - Git submodules containing related OpenG2P projects
   - `odoo/` - Odoo framework (OpenSPP is built on Odoo)
   - `openg2p-program/` - OpenG2P program management modules
   - `openg2p-registry/` - OpenG2P registry modules
   - `queue/` - Queue job management

3. **Configuration**
   - `conf.py` - Sphinx configuration with custom OpenSPP/Odoo integration
   - `.vale.ini` - Vale linter configuration using Microsoft and alex style guides
   - `requirements_frozen.txt` - Pinned Python dependencies

## Key Development Notes

- The documentation uses Sphinx 4.5.0 with MyST parser for Markdown support
- Vale is configured for style checking with OpenSPP-specific vocabulary
- The build system automatically handles Odoo module documentation integration
- Live reload development server runs on port 8050
- GitHub Actions handle automated builds and deployment on push to main branch
- Redirects are managed using sphinx-reredirects extension (see `redirects` dict in conf.py)

## Module Documentation

When documenting OpenSPP modules, follow the existing pattern in `docs/modules/`. Each module should have its own Markdown file with standardized sections for overview, features, configuration, and usage.

## Managing Redirects

When moving or renaming documentation pages, add redirects in `docs/conf.py`:
```python
redirects = {
    "old-path": "new-path.html",
}
```
See `docs/contributing/redirects.md` for detailed instructions.
</file>

<file path="requirements.txt">
docutils<0.17,>=0.15  # sphinx-book-theme 0.2.0 has requirement docutils<0.17,>=0.15
Sphinx<5,>=3  # sphinx-book-theme 0.3.3 has requirement sphinx<5,>=3
graphviz
jsx-lexer  # volto
lesscpy
linkify-it-py
myst-parser
pydata-sphinx-theme<=0.8.99  # Build fails in 0.9.0. See https://github.com/plone/documentation/issues/1297
sphinx-autobuild
sphinx-book-theme==0.3.3  # Temporary pin until we can sort out HTML refactoring.
sphinx-copybutton
sphinx-design  # Documentation only
sphinx-notfound-page  # Documentation only
sphinx-sitemap
sphinx-togglebutton
sphinxcontrib.httpdomain
sphinxcontrib.httpexample
sphinxext-opengraph
sphinx-design
sphinxcontrib-video
sphinx-tabs==3.2.0
sphinxcontrib-googleanalytics
sphinx-reredirects
</file>

<file path="docs/tutorial/user_guides/create_program_cycle_prepare_entitlements.md">
# Create a program cycle & prepare entitlements

## Introduction

In this tutorial, you will learn the process of configuring, creating, and approving cycles and preparing entitlements in OpenSPP.

## Prerequisites

To create a cycle and prepare entitlements in OpenSPP, you need to:

- Ensure your program is set and ready. Learn more about this in the documentation [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html).
- Enroll beneficiaries in the program. Learn more about this in the documentation [Enroll beneficiaries](https://docs.openspp.org/tutorial/user_guides/enroll_beneficiaries.html).
- Allocate funds to the program. Learn more about this in the documentation [Allocate funds](https://docs.openspp.org/tutorial/user_guides/allocate_funds.html).

## Objective

By the end of this tutorial, you will have gained a deeper understanding of configuring cycles, either new or existing ones. You will also have gained familiarity with creating and handling entitlements as well as management of funds to allocate to existing programs. Ensuring correct setup upon cycle approval and entitlements is essential for a precise distribution of assistance.

## Process

To begin configuring cycles and preparing entitlements in OpenSPP, first log into your OpenSPP account, then go to Programs.

![](create_program_cycle_prepare_entitlements/1.png)

If any modifications are required to either the cycle or entitlement configuration of the program, these should be done prior to approving a cycle. This is because once a cycle is approved, configuration changes you applied to the program will not take effect unto the cycles that you already approved. However, if you are already satisfied with the current program configurations, you may proceed to [Creating Cycle](#creating-cycle).

### Editing program configuration

Configuring a cycle is done as a part of creating a program, as described in the documentation Configure the Cycle Manager; however, it is possible to modify an existing program’s cycle configuration.

Click on a program and navigate to the **Configuration** tab.

![](create_program_cycle_prepare_entitlements/2.png)

### Eligibility managers

You can edit the eligibility manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/3.png)

On the popup that appears, click on the **Admin Area** dropdown field to select the target area of the cycle. You may also narrow down your criteria by clicking on **New Rule**.

![](create_program_cycle_prepare_entitlements/4.png)

The number indicated in **record(s)** represents the number of beneficiaries that qualify your criteria. After configuring, click on the **Save** button to apply changes.

The changes made will only be applied to existing cycles that are in **Draft** and **To Approve** state, it will not be applied to cycles that fall under **Ended** or **Approved** state.

![](create_program_cycle_prepare_entitlements/5.png)

To apply the latest eligibility changes for the cycles under **To Approve** state, it must first be set back to **Draft** state. Click on the green button beside the cycle, then click on **Reset to Draft** button. This resets the cycle back to **Draft** state.

![](create_program_cycle_prepare_entitlements/6.png)

To apply the latest eligibility changes for the cycles under **Draft** state, click on the green button beside the cycle then click on **Verify Eligibility** button.

![](create_program_cycle_prepare_entitlements/7.png)

The **Beneficiaries** count should be updated accordingly.

### Cycle manager

You can edit the cycle manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/8.png)

A popup is displayed. Make the necessary changes and then click **Save**.

![](create_program_cycle_prepare_entitlements/9.png)

See **Configure the cycle manager** section of the document [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html) for more information on the displayed fields.

Please note that changes you made on **Auto-Approve entitlements** and **Approver Group** are only applicable to **New**, **Draft** or **To Approve** cycles, while changes made for **Recurrence** only apply to the **New** cycles created thereafter. If you wish to edit the current recurrence of an already existing cycle, it must first be on **Draft** state. Click on the green button beside the cycle, then on the popup menu, click on the **Start date** and **End date** of a program to modify. Click on **Save** to apply changes.

![](create_program_cycle_prepare_entitlements/10.png)

### Entitlement manager

You can edit the entitlement manager by clicking on the green icon.

![](create_program_cycle_prepare_entitlements/11.png)

A popup should appear. Make the necessary changes and then click **Save**.

![](create_program_cycle_prepare_entitlements/12.png)

See Tutorial - [Configure cash entitlements](https://docs.openspp.org/tutorial/user_guides/configure_cash_entitlements.html) to learn more on configuring cash entitlements.

Please note that changes you made into the following fields are only applied to newly prepared entitlements.

### Creating Cycle

A cycle can only be created under a program. If you do not have any existing programs yet, you may refer to this document [Create a social protection program](https://docs.openspp.org/tutorial/user_guides/create_social_protection_program.html).

Select an existing program from the program table list. You will be directed to the screen below. Click **Create New Cycle** to generate a cycle for the program.

![](create_program_cycle_prepare_entitlements/13.png)

Please note that during the creation of the program, if **One-time Distribution** was enabled, a single cycle will be automatically generated upon creation of the program and this program will not have any **Create New Cycle** button, as this program is meant to run with one cycle only.

![](create_program_cycle_prepare_entitlements/14.png)

Once a cycle is created, click on the green button beside it to open it. You may click on the **Edit** button to change **Cycle name**, **Start date** and **End Date** fields.

![](create_program_cycle_prepare_entitlements/15.png)

If there were beneficiaries added into the program after this cycle was created, you may click on **Copy Beneficiaries from Program** to sync beneficiaries into this cycle. The **Verify Eligibility** button is to check if beneficiaries enrolled would still qualify the criteria set for this cycle.

### Preparing entitlements

It is important to prepare entitlements for a cycle before a cycle is approved, as you will not be able to prepare entitlements anymore once the cycle has been approved.

Select the program you wish to act upon and click the green icon beside the cycle you wish to generate entitlements for.

![](create_program_cycle_prepare_entitlements/16.png)

Click on the **Prepare Entitlement** button. Entitlements will be generated.

![](create_program_cycle_prepare_entitlements/17.png)

The number count on top of **Entitlements** indicates the amount of entitlements prepared for the enrolled beneficiaries.

![](create_program_cycle_prepare_entitlements/18.png)

**Note**: A yellow warning message appears if processes are still running. If displayed, click **Refresh** within the yellow warning message. Repeat every now and then until the yellow warning message disappears. It is important to let the warning message resolve before proceeding into the next step as it might otherwise cause data discrepancy.

![](create_program_cycle_prepare_entitlements/19.png)

To verify the prepared entitlements, Click on **Entitlements** beside **Beneficiaries** to display a table of entitlements under **Draft** state.

![](create_program_cycle_prepare_entitlements/20.png)

Click further on an entitlement to show more details.

![](create_program_cycle_prepare_entitlements/21.png)

### Approving a cycle

After entitlements are prepared, the next step is to approve the cycle. Please note that only the assigned user with correct access rights is able to approve cycles for the program. This is set during the creation of the program, however it can also be changed in the **Approver group** dropdown within the Cycle manager of the program configuration.

Login to OpenSPP with a user role to approve the cycle. After clicking on the program, select a cycle to approve by clicking on the green button beside it, click on **To Approve** button.

![](create_program_cycle_prepare_entitlements/22.png)

**Note:** If a yellow warning message displays, click on the refresh button within the yellow warning message until it resolves.

![](create_program_cycle_prepare_entitlements/23.png)

Click on the **Approve** button to approve the cycle.

![](create_program_cycle_prepare_entitlements/24.png)

Please note that enabling Auto-approve entitlements in the program’s [Cycle manager](#cycle-manager) configuration auto approves the entitlements upon approving the cycle. Therefore, you may skip Approving entitlements if this is enabled.

![](create_program_cycle_prepare_entitlements/25.png)

If entitlements were not auto approved successfully. It could be that the [Allocate funds](https://docs.openspp.org/tutorial/user_guides/allocate_funds.html) for the program are insufficient or missing. See the documentation Allocate funds for more details.

### Approving entitlements

After approving a cycle, the next step is to approve the entitlements. Please note that only the assigned user with correct access rights is able to approve entitlements for the cycle. This is set during the creation of the program, however it can also be changed in the **Entitlement Validation Group** dropdown within the [Entitlement manager](#entitlement-manager) of the program configuration.

Login to OpenSPP with correct user role to approve the entitlements. After clicking on the program, select a cycle by clicking on the green button beside it and click on **Approve entitlement**. A yellow warning message appears if processes are still running. Make sure to click **Refresh** within the yellow warning message. Repeat every now and then until the yellow warning message disappears. It is important to let the warning message resolve before proceeding into the next step as it might otherwise cause data discrepancy.

![](create_program_cycle_prepare_entitlements/26.png)

Note: If a yellow warning message resolves, you may click on **Entitlements** beside **Beneficiaries** to verify its status.

![](create_program_cycle_prepare_entitlements/27.png)

You may also individually approve them by clicking on **Entitlements** and clicking on the checkboxes beside the entitlements, then click on the **Action** button and click **Approve**.

![](create_program_cycle_prepare_entitlements/28.png)

You could also approve them all manually at once by clicking the checkbox beside **Name** then click on **Select all**. Click on the **Action** button then click **Approve**.

![](create_program_cycle_prepare_entitlements/29.png)

A popup should appear, click on **Approve** to complete the approval of entitlements.

![](create_program_cycle_prepare_entitlements/30.png)
</file>

<file path=".gitignore">
# Dependencies
/bin
/include
/lib
/lib64

# Generated files
pyvenv.cfg
/_build
/styles/Microsoft
/styles/alex
/styles/write-good

.DS_Store
*.pyc
*.pyo
*.pyd
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
#*.mo
#*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# VS Code
**/.vscode/

docs/build

.idea
docs_old
.aider*
</file>

<file path="docs/howto/index.md">
# How To

Here you’ll find articles on “How do I….?” types of questions. It addresses the task of traversing through a practical problem area, from one aspect to another.

**Development**

- {doc}`developer_mode`
- {doc}`developer_guides/development_setup`
- {doc}`developer_guides/setting_up_using_pypi`
- {doc}`developer_guides/module`
- {doc}`developer_guides/indicators`
- {doc}`developer_guides/troubleshooting`

**Customization**

- {doc}`developer_guides/custom_areas`
- {doc}`developer_guides/custom_audit`
- {doc}`developer_guides/custom_cr`
- {doc}`developer_guides/custom_entitlement`
- {doc}`developer_guides/custom_registry`
- {doc}`developer_guides/custom_registry_tab_fields`
- {doc}`developer_guides/custom_fields_indicators`
- {doc}`developer_guides/custom_service_points`
- {doc}`developer_guides/rest_api`

**Specification**

- {doc}`developer_guides/dci`

**Integration**

- {doc}`developer_guides/esignet`
- {doc}`developer_guides/oidc`
- {doc}`developer_guides/beneficiary_keycloak`

**User Guides**

- {doc}`user_guides/setting_up_farmer_registry`
- {doc}`user_guides/register_new_individual`
- {doc}`user_guides/enroll_beneficiaries`
- {doc}`user_guides/import_registrant_data`
- {doc}`user_guides/export_registrant_data`
- {doc}`user_guides/administrating_role_based_access`
- {doc}`user_guides/setting_up_service_points`

```{toctree}
:maxdepth: 2
:hidden: true

#Developer Guides
developer_mode
developer_guides/development_setup
developer_guides/setting_up_using_pypi
developer_guides/troubleshooting
developer_guides/indicators
developer_guides/module
developer_guides/troubleshooting

#Customization
developer_guides/custom_areas
developer_guides/custom_audit
developer_guides/custom_cr
developer_guides/custom_entitlement
developer_guides/custom_registry
developer_guides/custom_registry_tab_fields
developer_guides/custom_fields_indicators.md
developer_guides/custom_service_points

developer_guides/rest_api
developer_guides/dci

developer_guides/esignet
developer_guides/oidc
developer_guides/beneficiary_keycloak

#User Guides
user_guides/setting_up_farmer_registry
user_guides/register_new_individual
user_guides/enroll_beneficiaries
user_guides/import_registrant_data
user_guides/export_registrant_data
user_guides/administrating_role_based_access
user_guides/setting_up_service_points
#user_guides/implementing_pmt

#developer_guides/custom_program
#developer_guides/custom_cycle
#developer_guides/implmenting_pmt
```
</file>

</files>
